<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2016-04-26T03:50:34.000Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何使用 Elixir + Browsersync 自動刷新瀏覽器?]]></title>
    <link href="http://oomusou.io/laravel/elixir/elixir-browsersync/"/>
    <id>http://oomusou.io/laravel/elixir/elixir-browsersync/</id>
    <published>2016-04-25T15:23:43.000Z</published>
    <updated>2016-04-26T03:50:34.000Z</updated>
    <content type="html"><![CDATA[<p>由於 HTML/CSS 技術越來越複雜，如 Dreamweaver 那種所見即所得的工具已經很難全面支援 HTML/CSS，所以前端開發取而代之的是文字編輯器配合 Emmet，然後直接在瀏覽器預覽，此時如 Browsersync 就非常方便。Laravel Elixir 3.3 之後直接支援 Browsersync，讓我們只要直接存檔就可以立即在瀏覽器看結果。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.30<br>Laravel Elixir 5.0.0</p>
<h2 id="Prerequisite">Prerequisite</h2><hr>
<ul>
<li>在 OS X 已經成功安裝 Node.js、NPM 與 Gulp。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>詳細請參考<a href="/laravel/elixir/elixir-nodejs/">如何在 OS X 安裝 Laravel 前端開發環境?</a></span></span></span></li>
</ul>
<h2 id="安裝_Laravel_Elixir">安裝 Laravel Elixir</h2><hr>
<p>Gulp 可以幫我們做一些前端的自動化工作，如自動編譯 Less 與 Saas，Babel 自動編譯 JavaScript ES6，自動執行 PHPUnit…等。</p>
<p>Laravel Elixir 是 Laravel 對 Gulp 的再次封裝，讓我們可以更簡單地在 Laravel 使用 Gulp。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>詳細請參考<a href="http://laravel.com/docs/master/elixir" target="_blank" rel="external">Laravel Elixir</a></span></span></span></p>
<p>在使用 Composer 建立 Laravel 專案時，會自動安裝後端的 <code>composer.json</code> 內的 PHP package，但卻沒有自動安裝前端的 <code>package.json</code> 內的 Node package，需自行手動安裝。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ npm install</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync000.png" alt=""></p>
<p>使用 NPM 安裝 Laravel elixir。</p>
<h2 id="測試_Laravel_Elixir">測試 Laravel Elixir</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync001.png" alt=""></p>
<p>若能看到以上畫面，表示 Laravel Elixer 已經正常執行，可順利編譯Saas。</p>
<h2 id="修改_gulpfile-js">修改 gulpfile.js</h2><hr>
<p><strong> gulpfile.js </strong> <span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ElixirBrowserSync_demo/commit/87de4f3afcda27fd54b8b3fe3f3d38210c79ff92" target="_blank" rel="external">修改 gulpfile.js，啟動 Browsersync</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elixir = <span class="built_in">require</span>(<span class="string">'laravel-elixir'</span>);</span><br><span class="line"></span><br><span class="line">elixir(<span class="function"><span class="keyword">function</span> (<span class="params">mix</span>) </span>&#123;</span><br><span class="line">    mix.sass(<span class="string">'app.scss'</span>);</span><br><span class="line"></span><br><span class="line">    mix.browserSync(&#123;</span><br><span class="line">        files: [<span class="string">'app/**/*'</span>, <span class="string">'public/**/*'</span>, <span class="string">'resources/views/**/*'</span>],</span><br><span class="line">        port: <span class="number">5000</span>,</span><br><span class="line">        proxy: <span class="string">'localhost:8000'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync002.png" alt=""></p>
<p>啟動 Browsersync，若將來對 PHP、blade 或 JavaScript 有任何修改，只要存檔就會在瀏覽器自動更新。</p>
<ul>
<li><strong> files </strong> : 設定監視哪些檔案一變更，就要啟動 Browsersync。</li>
<li><strong> port </strong> : 設定 Browsersync 所使用的 port。</li>
<li><strong> proxy </strong> : 指定到 8000，因為 PHP 內建 Http server 為 8000。</li>
</ul>
<h2 id="啟動_Http_Server">啟動 Http Server</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve --host 0.0.0.0</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync003.png" alt=""></p>
<p>使用 PHP 內建的 Http server。</p>
<h2 id="啟動_Gulp_Watch">啟動 Gulp Watch</h2><hr>
<p>Gulp 會在背景執行，持續監視檔案，只要一變更，就會重新執行 gulp。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp watch</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync004.png" alt=""></p>
<p>Gulp watch 必須在新的 process 執行，也就是必須有一個 process 執行 <code>php artisan serve</code>，一個 process 執行 <code>gulp watch</code>。</p>
<h2 id="自動啟動瀏覽器">自動啟動瀏覽器</h2><hr>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync005.png" alt=""></p>
<p>Laravel 將執行在 <code>localhost:5000</code>。</p>
<p>將來修改 PHP、blade 或 JavaScript，只要存檔後，瀏覽器就會自動更新，不用再手動 refersh。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>有了 Laravel Elixir + Browsersync ，以後我們有任何修改，就不用再一直手動 refresh 看結果了，若搭配雙螢幕更為方便。</li>
<li>這種方式在 Windows 也可以使用，不侷限在 OS X，只要在 Windows 也裝好 Node.js、NPM 與 Gulp 即可。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52ElixirBrowserSync_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[Laravel Elixir 3.3開始支援Browsersync]]>
    
    </summary>
    
      <category term="Browsersync" scheme="http://oomusou.io/tags/Browsersync/"/>
    
      <category term="Elixir" scheme="http://oomusou.io/tags/Elixir/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Laravel 執行 Angular 2?]]></title>
    <link href="http://oomusou.io/angular2/angular2-laravel-setup/"/>
    <id>http://oomusou.io/angular2/angular2-laravel-setup/</id>
    <published>2016-04-24T12:23:43.000Z</published>
    <updated>2016-04-26T03:47:46.000Z</updated>
    <content type="html"><![CDATA[<p>Angular 2 即將推出正式版，挾著一些特點：如使用 TypeScript，強烈物件導向風格，支援 component 開發方式，與 PhpStorm 的完整支援，都讓人非常心動，但該如何與 Laravel 環境整合呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.30<br>Angular 2.0.0-beta.15</p>
<h2 id="5_Min_Quickstart">5 Min Quickstart</h2><hr>
<p>本文要將 Angular 2 官網的 <a href="https://angular.io/docs/ts/latest/quickstart.html#" target="_blank" rel="external">5 Min Quickstart</a> 移植到 Laravel 環境。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>本文不對 Angular 2 設定檔與程式內容做詳細解釋，僅針對 Laravel 部分討論，Angular 2 部分請參考官網的 <a href="https://angular.io/docs/ts/latest/quickstart.html#" target="_blank" rel="external">5 Min Quickstart</a></span></span></span></p>
<h2 id="安裝_Angular_2_與其相依套件">安裝 Angular 2 與其相依套件</h2><hr>
<p>除了 Angular 2 本身外，他還有很多相依的套件，須由 npm 管理安裝。</p>
<p><strong> package.json </strong> <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/e1a3b19c9a9cbda2d40f72246aab17a1d5696686" target="_blank" rel="external">更新 Angular 2 所相依的套件</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="string">"concurrently"</span>: <span class="string">"^2.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"laravel-elixir"</span>: <span class="string">"^5.0.0"</span>,</span><br><span class="line">    <span class="string">"bootstrap-sass"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="string">"elixir-typescript"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="string">"angular2"</span>: <span class="string">"2.0.0-beta.15"</span>,</span><br><span class="line">    <span class="string">"systemjs"</span>: <span class="string">"0.19.26"</span>,</span><br><span class="line">    <span class="string">"es6-shim"</span>: <span class="string">"^0.35.0"</span>,</span><br><span class="line">    <span class="string">"reflect-metadata"</span>: <span class="string">"0.1.2"</span>,</span><br><span class="line">    <span class="string">"rxjs"</span>: <span class="string">"5.0.0-beta.2"</span>,</span><br><span class="line">    <span class="string">"zone.js"</span>: <span class="string">"0.6.10"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-laravel-setup/setup000.png" alt=""></p>
<p>Laravel 本身的 package.json 就有自帶一些套件，紅色框框部分為 Angular 2 所相依的套件。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>安裝 node 套件時，最低需求是不能看到 <code>ERR</code> 出現，有警告沒關係，嘗試更新 node.js 版本試試看。</span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ npm install</span><br></pre></td></tr></table></figure>
<p>安裝 Angular 2 與其相依的套件。</p>
<h2 id="新增TypeScript_設定檔">新增TypeScript 設定檔</h2><hr>
<p>Angular 2 使用 TypeScript，而 <code>tsconfig.json</code> 為 TypeScript compiler 的設定檔。</p>
<p><strong> tsconfig.json </strong> <span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/e1a3b19c9a9cbda2d40f72246aab17a1d5696686" target="_blank" rel="external">新增 TypeScript compiler 設定檔</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"system"</span>,</span><br><span class="line">    <span class="string">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"removeComments"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"exclude"</span>: [</span><br><span class="line">    <span class="string">"node_modules"</span>,</span><br><span class="line">    <span class="string">"typings/main"</span>,</span><br><span class="line">    <span class="string">"typings/main.d.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-laravel-setup/setup001.png" alt=""></p>
<p>在 <code>resources/assets</code> 建立 <code>typescript</code> 目錄，新增 <code>tsconfig.json</code>。</p>
<h2 id="建立第一個_Component">建立第一個 Component</h2><hr>
<p>Angular 2 強調整個網頁都由 component 所構成，首先我們要先建立一個 component。</p>
<p><strong> app.component.ts </strong> <span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/304c201f1c268c0300d6990d858492ff2f2240c5" target="_blank" rel="external">建立第一個 Component</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>resources/assets/typescript/app.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'angular2/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'my-app'</span>,</span><br><span class="line">    template: <span class="string">'&lt;h1&gt;My First Angular 2 App&lt;/h1&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123; &#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-laravel-setup/setup002.png" alt=""></p>
<p>在 <code>resources/assets/typescript</code> 目錄下建立 <code>app.component.ts</code>。</p>
<p>此為 TypeScript 語法，主要表示其 HTML tag 為 <code>my-app</code>，其所代表的 HTML 為 <code>&lt;h1&gt;My First Angular 2 App&lt;/h1&gt;</code>。</p>
<p>因為目前還沒有任何顯示邏輯，所以 <code>AppComponent</code> class 為空的。</p>
<h2 id="建立_Angular_2_啟動檔">建立 Angular 2 啟動檔</h2><hr>
<p>Angular 2 需要一個程式的起動點，就類似 C 語言的 <code>main()</code> 一樣，<code>main.ts</code> 就是扮演起動 Angular 2 的角色。</p>
<p><strong> main.ts </strong> <span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/85e4d464db0af6b422639696c57d67ca0d0fd800" target="_blank" rel="external">建立 Angular 2 的啟動檔</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>resources/assets/typescript/main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path="../../../node_modules/angular2/typings/browser.d.ts"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;bootstrap&#125;    from <span class="string">'angular2/platform/browser'</span></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span></span><br><span class="line"></span><br><span class="line">bootstrap(AppComponent);</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-laravel-setup/setup003.png" alt=""></p>
<p>在 <code>resources/assets/typescript</code> 目錄下建立 <code>main.ts</code>。</p>
<p>第 1 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path="../../../node_modules/angular2/typings/browser.d.ts"/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>為 <code>browser</code> 的型別定義檔，TypeScript 為強型別語言，需要型別定義檔才能編譯。</p>
<p>第 3 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;bootstrap&#125; from <span class="string">'angular2/platform/browser'</span></span><br></pre></td></tr></table></figure></p>
<p>載入 <code>angular2/platform/browser</code>，表示 Angular 2 跑在瀏覽器平台，此外，Angular 2 還可以跑在 <code>Apache Cordova</code> 與 <code>Native</code> 平台，    只要 import 不同 <code>bootstrap</code> 即可。</p>
<p>第 4 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span></span><br></pre></td></tr></table></figure></p>
<p>載入我們剛剛建立的 <code>app.component.ts</code>。</p>
<p>第 6 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap(AppComponent);</span><br></pre></td></tr></table></figure></p>
<p>啟動我們剛剛建立的 <code>app.component.ts</code>。</p>
<h2 id="將_Angular_2_整合進_Blade">將 Angular 2 整合進 Blade</h2><hr>
<p>接著我們要將 Angular 2 整合進 Laravel 的 blade 內。</p>
<p><strong> welcome.blade.php </strong> <span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/0540a11a83c81f01de1ccda2f5ef36ebf35d2a3b" target="_blank" rel="external">將 Angular 2 整合進 Blade</a></span></span></span><br><figure class="highlight html"><figcaption><span>resources/views/welcome.blade.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>Laravel<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"https://fonts.googleapis.com/css?family=Lato:100"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 1. Load libraries --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"es6-shim/es6-shim.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"systemjs/dist/system-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"angular2/bundles/angular2-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"systemjs/dist/system.src.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"rxjs/bundles/Rx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"angular2/bundles/angular2.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 2. Configure SystemJS --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">            System.config(&#123;</span><br><span class="line">                <span class="string">"defaultJSExtensions"</span>: <span class="literal">true</span>,</span><br><span class="line">                packages: &#123;</span><br><span class="line">                    app: &#123;</span><br><span class="line">                        format: <span class="string">'register'</span>,</span><br><span class="line">                        defaultExtension: <span class="string">'js'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            System.import(<span class="string">'main'</span>)</span><br><span class="line">                    .then(<span class="literal">null</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">            <span class="tag">html</span>, <span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> <span class="number">100</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'Lato'</span></span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">display</span>:<span class="value"> table-cell</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> middle</span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="class">.content</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="class">.title</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">96px</span></span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span>Laravel 5<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">my-app</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="title">my-app</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure> </p>
<p>第 8 行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. Load libraries --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"es6-shim/es6-shim.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"systemjs/dist/system-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"angular2/bundles/angular2-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"systemjs/dist/system.src.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"rxjs/bundles/Rx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"angular2/bundles/angular2.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>載入 Angular 2 所需要的 JavaScript。</p>
<p>16 行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2. Configure SystemJS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    System.config(&#123;</span><br><span class="line">        <span class="string">"defaultJSExtensions"</span>: <span class="literal">true</span>,</span><br><span class="line">        packages: &#123;</span><br><span class="line">            app: &#123;</span><br><span class="line">                format: <span class="string">'register'</span>,</span><br><span class="line">                defaultExtension: <span class="string">'js'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.import(<span class="string">'main'</span>)</span><br><span class="line">          .then(<span class="literal">null</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>設定 SystemJS。</p>
<h2 id="設定_Laravel_Elixir">設定 Laravel Elixir</h2><hr>
<p><img src="/images/angular2/angular2-laravel-setup/setup004.png" alt=""></p>
<p>在設定 <code>gulpfile.js</code> 之前，必須先解一個雷。</p>
<p>在 <code>node_modules/elixir-typescript/index.js</code>，將第 45 行 mark 掉。</p>
<p>因為 <code>elixir-typescript</code> 會試著將 <code>app.component.ts</code> 與 <code>main.ts</code> 最後整合成 <code>app.js</code>，其用意是好的，但這會導致此範例執行失敗，或許有更好的解法。</p>
<p><strong> gulpfile.js </strong> <span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/5440b9fe55dab96d28888986ff2a58b0ed9c4c7e" target="_blank" rel="external">設定 Laravel Elixir</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elixir = <span class="built_in">require</span>(<span class="string">'laravel-elixir'</span>);</span><br><span class="line"><span class="keyword">var</span> elixirTypscript = <span class="built_in">require</span>(<span class="string">'elixir-typescript'</span>);</span><br><span class="line"></span><br><span class="line">elixir(<span class="function"><span class="keyword">function</span> (<span class="params">mix</span>) </span>&#123;</span><br><span class="line">    mix.sass(<span class="string">'app.scss'</span>);</span><br><span class="line"></span><br><span class="line">    mix.copy(<span class="string">'node_modules/angular2'</span>, <span class="string">'public/angular2'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/rxjs'</span>, <span class="string">'public/rxjs'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/systemjs'</span>, <span class="string">'public/systemjs'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/es6-promise'</span>, <span class="string">'public/es6-promise'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/es6-shim'</span>, <span class="string">'public/es6-shim'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/zone.js'</span>, <span class="string">'public/zone.js'</span>);</span><br><span class="line"></span><br><span class="line">    mix.typescript([</span><br><span class="line">            <span class="string">'app.component.ts'</span>,</span><br><span class="line">            <span class="string">'main.ts'</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'public/'</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    mix.browserSync(&#123;</span><br><span class="line">        files: [<span class="string">'app/**/*'</span>, <span class="string">'public/**/*'</span>, <span class="string">'resources/views/**/*'</span>],</span><br><span class="line">        port: <span class="number">5000</span>,</span><br><span class="line">        proxy: <span class="string">'localhost:8000'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-laravel-setup/setup005.png" alt=""></p>
<p>第 2 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elixirTypscript = <span class="built_in">require</span>(<span class="string">'elixir-typescript'</span>);</span><br></pre></td></tr></table></figure></p>
<p>載入 <code>elixir-typescript</code>，用來編譯 TypeScript。</p>
<p>第 7 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mix.copy(<span class="string">'node_modules/angular2'</span>, <span class="string">'public/angular2'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/rxjs'</span>, <span class="string">'public/rxjs'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/systemjs'</span>, <span class="string">'public/systemjs'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/es6-promise'</span>, <span class="string">'public/es6-promise'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/es6-shim'</span>, <span class="string">'public/es6-shim'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/zone.js'</span>, <span class="string">'public/zone.js'</span>);</span><br></pre></td></tr></table></figure></p>
<p>將 Angular 2 所需要的 JavaScript 複製到 <code>public</code> 目錄下。</p>
<p>14 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mix.typescript([</span><br><span class="line">        <span class="string">'app.component.ts'</span>,</span><br><span class="line">        <span class="string">'main.ts'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'public/'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>將 <code>app.component.ts</code> 與 <code>main.ts</code> 編譯後，複製到 <code>public</code> 目錄下。</p>
<p>21 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mix.browserSync(&#123;</span><br><span class="line">       files: [<span class="string">'app/**/*'</span>, <span class="string">'public/**/*'</span>, <span class="string">'resources/views/**/*'</span>],</span><br><span class="line">       port: <span class="number">5000</span>,</span><br><span class="line">       proxy: <span class="string">'localhost:8000'</span></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></p>
<p>啟動 Browsersync，若將來對 PHP、blade 或 TypeScript 有任何修改，只要存檔就會在瀏覽器自動更新。</p>
<ul>
<li><strong> files </strong> : 設定監視哪些檔案一變更，就要啟動 Browsersync。</li>
<li><strong> port </strong> : 設定 Browsersync 所使用的 port。</li>
<li><strong> proxy </strong> : 指定到 8000，因為 PHP 內建 Http server 為 8000。</li>
</ul>
<h2 id="編譯_TypeScript">編譯 TypeScript</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp</span><br></pre></td></tr></table></figure>
<p><img src="/images/angular2/angular2-laravel-setup/setup007.png" alt=""></p>
<p>使用 Laravel Elixir 編譯 TypeScript。</p>
<h2 id="啟動_Http_Server">啟動 Http Server</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve --host 0.0.0.0</span><br></pre></td></tr></table></figure>
<p><img src="/images/angular2/angular2-laravel-setup/setup006.png" alt=""></p>
<p>使用 PHP 內建的 Http server。</p>
<h2 id="啟動_Gulp_Watch">啟動 Gulp Watch</h2><hr>
<p>Gulp 會在背景執行，持續監視檔案，只要一變更，就會重新執行 gulp。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp watch</span><br></pre></td></tr></table></figure>
<p><img src="/images/angular2/angular2-laravel-setup/setup009.png" alt=""></p>
<p>Gulp watch 必須在新的 process 執行，也就是必須有一個 process 執行 <code>php artisan serve</code>，一個 process 執行 <code>gulp watch</code>。</p>
<h2 id="自動啟動瀏覽器">自動啟動瀏覽器</h2><hr>
<p><img src="/images/angular2/angular2-laravel-setup/setup008.png" alt=""></p>
<p>若能顯示 <code>My First Angular 2 App</code>，表示 Angular 2 已經正常啟動，若出現 <code>loading</code>，則表示 Angular 2 啟動失敗。</p>
<p>將來修改 PHP、blade 或 TypeScript，只要存檔後，瀏覽器就會自動更新，不用再手動 refersh。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Angular 2 有了 TypeScript 與 component 之後，可以輕易寫出符合 SOLID 原則的程式碼，不再像 jQuery 那樣拿以維護。</li>
<li>Angular 2 可以融合在 Laravel blade 體系中，並且使用 Laravel Elixir 完成編譯與管理。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52Angular2Beta_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[在 Laravel 環境使用 Laravel Elixir 執行 Angular 2]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Browsersync" scheme="http://oomusou.io/tags/Browsersync/"/>
    
      <category term="Elixir" scheme="http://oomusou.io/tags/Elixir/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何測試 Repository 模式 (使用 MySQL)?]]></title>
    <link href="http://oomusou.io/tdd/tdd-repository-testing-mysql/"/>
    <id>http://oomusou.io/tdd/tdd-repository-testing-mysql/</id>
    <published>2016-04-20T12:23:43.000Z</published>
    <updated>2016-04-24T08:54:51.000Z</updated>
    <content type="html"><![CDATA[<p>使用 SQLite In-Memory 的方式雖然又快又方便，但若使用了 <code>DB::raw</code> 或 <code>whereRaw()</code> 的寫法，由於直接使用了 MySQL 的函式，可能 SQLite 並不支援，就必須直接在 MySQL 跑測試。</p>
<p>雖然我們會另外開一個資料庫做測試，但也有可能我們想直接對正式有資料的資料庫做測試，我們該怎麼快速無痛切換呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.30<br>PHPUnit 4.8.24<br>PhpStorm 2016.1</p>
<h2 id="Repository模式">Repository模式</h2><hr>
<p>初學者常會商業邏輯與資料庫邏輯同時寫在 controller 內，如我們想將最新的 3 筆文章顯示在 view。<br><figure class="highlight php"><figcaption><span>app/Http/Controllers/PostsController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$posts</span> = Post::orderBy(<span class="string">'id'</span>, <span class="string">'desc'</span>)</span><br><span class="line">        -&gt;take(<span class="number">3</span>)</span><br><span class="line">        -&gt;get();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = compact(<span class="variable">$posts</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View(<span class="string">'posts.index'</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>這段程式碼在執行上沒有問題，但在設計上有幾個問題 : </p>
<ol>
<li><p>違反 SOLID 的單一職責原則，controller 原本該有的職責應該是商業邏輯，但現在卻將資料庫邏輯直接寫在 controller 內，這已經超出原本 controller 的職責，將會導致日後 controller 過於肥大而難以維護。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>單一職責原則 : 應該且僅有一個原因引起 class 的變更。</span></span></span></p>
</li>
<li><p>將資料庫邏輯直接寫在 controller 內，將來若有不同 controller 使用相同的資料庫邏輯，將無法重複使用。</p>
</li>
<li><p>由於 controller 內直接使用 Eloquent，表示 controller 直接相依於<code>Post</code> model，若我們要對 controller 做單元測試，必須直接存取資料庫，這違反了隔離測試 ( isolated test ) 原則。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>Isolated Test : 1.執行速度快 2.關注點分離 3.單一職責 4.可測試性 5.測試程式的健壯性</span></span></span></p>
</li>
<li><p>為了隔離測試，我們會希望 mock 掉資料庫邏輯，然後透過依賴注入將 mock 物件注入 contoller，但在 controller 直接使用 model，導致無法使用依賴注入，因此無法執行單元測試。</p>
</li>
</ol>
<p>比較好的方式是使用 repository 模式，將資料庫邏輯從 controller 中獨立出來寫在 repository，透過依賴注入將 repository注入controller。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>詳細請參考<a href="/laravel/laravel-repository/">如何使用 Repository 模式?</a></span></span></span></p>
<p>使用 repository 模式有以下好處 : </p>
<ol>
<li><p>Repository 專心負責資料庫邏輯，符合單一職責原則，可避免 controller 過於肥大而難以維護。</p>
</li>
<li><p>資料庫邏輯從 controller 搬到 repository，因此不同的 controller 可以重複使用。</p>
</li>
<li><p>controller 不再直接相依於 model，而是透過依賴注入將 repository 注入 controller，符合依賴反轉原則，且測試時不用直接存取資料庫，達到隔離測試要求。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>依賴反轉原則 : 高階模組不該依賴低階模組，兩者都該依賴其抽象。抽象不要依賴細節，細節要依賴抽象。</span></span></span></p>
</li>
<li><p>單元測試時直接 mock 掉 repository 即可，並透過依賴注入將 repository 注入到 controller，不用特別去 mock Eloquent model。</p>
</li>
</ol>
<p>將資料庫邏輯從 controller 搬到 repository 之後，本文的重點就是討論該如何測試 repository 內的資料庫邏輯。</p>
<h2 id="Test_Factory_Generator">Test Factory Generator</h2><hr>
<p>Laravel 5 提出了 model factory，直接整合了 faker，讓我們在 seeding 與 testing 時更為方便，而 Test Factory Generator 會自動根據 migration 產生 model factory，讓我們連 model factory 都不用寫。</p>
<p><strong>安裝</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require mpociot/laravel-test-factory-helper --dev</span><br></pre></td></tr></table></figure>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo000.png" alt=""></p>
<p>使用 composer 安裝 Test Factory Generator，因為此套件只會在開發使用，可以加上 <code>--dev</code> 參數。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>關於 <code>--dev</code> 參數，詳細請參考<a href="/laravel/laravel-debugbar/#使用Composer安裝">如何使用 Laravel Debugbar #使用 Composer 安裝</a></span></span></span></p>
<p><strong> Service Provider </strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mpociot\LaravelTestFactoryHelper\TestFactoryHelperServiceProvider::class,</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo001.png" alt=""></p>
<p>在 <code>config/app.php</code> 中加入 <code>TestFactoryHelperServiceProvider</code>。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/f8dfabc170754efd4e581fe013a25b6e61240f67" target="_blank" rel="external">安裝 Laravel Test Factory Generator</a></span></span></span></p>
<h2 id="建立_Model_與_Migration">建立 Model 與 Migration</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:model Post -m</span><br></pre></td></tr></table></figure>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo002.png" alt=""></p>
<p>建立 <code>Post</code> model 與 migration，<code>-m</code> 讓我們在建立 model 時一併建立 migrarion。</p>
<p>會在 <code>app</code> 目錄下建立 <code>Post.php</code>，並在 <code>database/migrations</code> 目錄建立 migration 檔。</p>
<p><strong> Post.php </strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/bec5ad2e61b7dd7b302ee9a824059aa00599ede4" target="_blank" rel="external">建立Post.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Post.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [</span><br><span class="line">        <span class="string">'title'</span>,</span><br><span class="line">        <span class="string">'description'</span>,</span><br><span class="line">        <span class="string">'content'</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 
<p>第7行<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="variable">$fillable</span> = [</span><br><span class="line">    <span class="string">'title'</span>,</span><br><span class="line">    <span class="string">'description'</span>,</span><br><span class="line">    <span class="string">'content'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<p>定義當使用 mass assignment 時可以被修改的欄位，進而保護其他欄位不被修改。</p>
<p><strong> create_posts_table.php </strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/3ea17c01a22fa0bfaa7f7e837d714ba7982eb7d0" target="_blank" rel="external">create_posts_table.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>database/migrations/2015_10_14_113810_create_posts_table.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatePostsTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'title'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'description'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;text(<span class="string">'content'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::drop(<span class="string">'posts'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>13行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> Schema::create(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'title'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'description'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;text(<span class="string">'content'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>加入 <code>title</code>、<code>description</code> 與 <code>content</code> 3 個欄位。 </p>
<p><strong> 正式資料庫連線 </strong><br><img src="/images/tdd/tdd-repository-testing-mysql/repo003.png" alt=""></p>
<p>將來 Test Factory Generator 必須連上資料庫才能產生 model factory，必須西確定專案已經與資料庫順利連線。</p>
<p><strong> 正式資料庫執行 Migrate </strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan migrate</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo004.png" alt=""></p>
<p>執行 migrate 將 table 建立在 MySQL 的正式資料庫。</p>
<h2 id="建立_Model_Factory">建立 Model Factory</h2><hr>
<p>測試 repository 時，將使用 model factory 幫我們建立測試資料。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan test-factory-helper:generate</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo008.png" alt=""></p>
<p>Test Factory Generator 幫我們自動建立 model factory。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/3283997109e50494a47d873bbf9891442203f227" target="_blank" rel="external">建立Model Factory</a></span></span></span></p>
<h2 id="新增_MySQL_測試資料庫連線">新增 MySQL 測試資料庫連線</h2><hr>
<p>之前設定的是 MySQL 正式資料庫連線，但在單元測試時，我們希望讀寫在另外一個 MySQL 資料庫。</p>
<p><strong> 新增資料庫連線 </strong><br><img src="/images/tdd/tdd-repository-testing-mysql/repo005.png" alt=""></p>
<p>先在 MySQL 建立 <code>homestead_testing</code> 資料庫，並在 <code>.env</code> 增加 <code>DB_DATABASE_TESTING</code>，設定為 <code>homestead_testing</code>。</p>
<p>將 <code>DB_CONNECTION</code> 先改成 <code>mysql_testing</code>，稍後會建立此連線，目的在替測試資料庫跑 migration，跑完 migration 之後會再切回來。</p>
<p><strong>database.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/97cee476f2640ccb6d84d37be6e6e7ddd16ea28d" target="_blank" rel="external">新增 mysql_testing 連線</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>config/database.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'mysql_testing'</span> =&gt; [</span><br><span class="line">   	<span class="string">'driver'</span> =&gt; <span class="string">'mysql'</span>,</span><br><span class="line">    <span class="string">'host'</span> =&gt; env(<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>),</span><br><span class="line">    <span class="string">'port'</span> =&gt; env(<span class="string">'DB_PORT'</span>, <span class="string">'3306'</span>),</span><br><span class="line">    <span class="string">'database'</span> =&gt; env(<span class="string">'DB_DATABASE_TESTING'</span>, <span class="string">'forge'</span>),</span><br><span class="line">    <span class="string">'username'</span> =&gt; env(<span class="string">'DB_USERNAME'</span>, <span class="string">'forge'</span>),</span><br><span class="line">    <span class="string">'password'</span> =&gt; env(<span class="string">'DB_PASSWORD'</span>, <span class="string">''</span>),</span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">    <span class="string">'collation'</span> =&gt; <span class="string">'utf8_unicode_ci'</span>,</span><br><span class="line">    <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'strict'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">'engine'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure> 
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo006.png" alt=""></p>
<p>在 <code>config/database.php</code> 新增 <code>mysql_testing</code> 連線。</p>
<p>將 <code>database</code> key 的 value 改為 <code>env(&#39;DB_DATABASE_TESTING&#39;, &#39;forge&#39;)</code>。</p>
<p><strong> 測試資料庫執行 Migrate </strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan migrate</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo007.png" alt=""></p>
<p>執行 migrate 將 table 建立在 MySQL 的測試資料庫。</p>
<p>目前為止，在正式資料庫與測試資料庫都已經跑過 migration。</p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo009.png" alt=""></p>
<p>將 <code>.env</code> 的資料庫連線從測試資料庫改為正式資料庫的 <code>mysql</code>。</p>
<p><strong> 修改 phpunit.xml </strong><br><strong>phpunit.xml</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/471d52aa09e10d5223886c9106871c5d2673a51a" target="_blank" rel="external">在 phpunit.xml 新增 DB_CONNECTION</a></span></span></span><br><figure class="highlight xml"><figcaption><span>phpunit.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">phpunit</span> <span class="attribute">backupGlobals</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">backupStaticAttributes</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">bootstrap</span>=<span class="value">"bootstrap/autoload.php"</span></span><br><span class="line">         <span class="attribute">colors</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertErrorsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertNoticesToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertWarningsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">processIsolation</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">stopOnFailure</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">testsuites</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">testsuite</span> <span class="attribute">name</span>=<span class="value">"Application Test Suite"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">"Test.php"</span>&gt;</span>./tests<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">testsuite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">testsuites</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">whitelist</span> <span class="attribute">processUncoveredFilesFromWhitelist</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">".php"</span>&gt;</span>./app<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">file</span>&gt;</span>./app/Http/routes.php<span class="tag">&lt;/<span class="title">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">whitelist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"mysql_testing"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">phpunit</span>&gt;</span></span><br></pre></td></tr></table></figure> </p>
<p>24行<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"mysql_testing"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可在此建立 <code>APP_ENV</code> 為 <code>testing</code> 時的全域變數。</p>
<p>設定 <code>DB_CONNECTION</code> 為 <code>mysql_testing</code>，當跑測試時，將會使用 <code>mysql_testing</code> 資料庫連線。</p>
<h2 id="測試_MySQL_測試資料庫連線">測試 MySQL 測試資料庫連線</h2><hr>
<p><code>ExampleTest.php</code> 為 Laravel 預設的測試範例，其中包含了 <code>testBasicExample()</code>，示範了如何測試預設的 <code>welcome.blade.php</code> 是否正確執行。</p>
<p><strong>ExampleTest.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/4dd438355c8c3ff9090ceb5c6cc5e0f304a2fbb8" target="_blank" rel="external">新增 MySQL 測試資料庫連線</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/ExampleTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A basic functional test example.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testBasicExample</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/'</span>)</span><br><span class="line">             -&gt;see(<span class="string">'Laravel 5'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MySQL</span>測試料庫連線<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = Post::all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertCount(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>16行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@test</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MySQL</span>測試料庫連線<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = Post::all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertCount(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於只是測試連線是否成功，尚未跑 model factory，因此預期 <code>Post</code> model 的資料筆數為 <code>0</code>。</p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo010.png" alt=""></p>
<p>實際跑測試，<span class="label label-success">綠燈</span> 表示連線成功。<span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>關於如何在 PhpStorm 跑單元測試，詳細請參考<a href="/phpstorm/phpstorm-debug-testing/">如何使用 PhpStorm 測試與除錯?</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  為什麼不需在 setUp() 下 Artisan::call('migrate:migrate')?</div>
<p>若使用 SQLite In-Memory，只要資料庫連線一斷，SQLite 會自動釋放記憶體，也就是說，當每個測試案例執行開始時，因為資料庫重新建立，所以必須重新跑一次 migration，但若使用 MySQL 測試，因為測試資料庫一直存在於 MySQL，因此不需再跑 migration。</p>
<h2 id="以_TDD_建立_Repository">以 TDD 建立 Repository</h2><hr>
<p>之前的所有動作都只是為了建立 repository 的測試環境，接下來將以 TDD 的方式建立 <code>PostRepository</code>。</p>
<p><strong>建立 PostRepository 的單元測試</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:test Unit/Repositories/PostRepositoryTest</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo011.png" alt=""></p>
<p><strong>PostRepositoryTest.php</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/451a7d6f02391178df34398a46f95683a93c81cc" target="_blank" rel="external">建立 PostRepositoyTest.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/Repositories/PostRepositoryTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">WithoutMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseTransactions</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepositoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A basic test example.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testExample</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 <code>PostRepositoryTest.php</code> 建立在 <code>tests/Unit/Repositories</code> 目錄下。</p>
<p>實務上測試分 3 種，有<strong>單元測試</strong>，<strong>整合測試</strong>與<strong>驗收測試</strong>。</p>
<p>Repository 測試屬於單元測試，故建立在 <code>Unit</code> 目錄下，將來還有 <code>Integration</code> 目錄放整合測試，與 <code>Acceptance</code> 放驗收測試。</p>
<p>所建立的 <code>PostRepositoryTest</code> 也繼承於 <code>TestCase</code>。</p>
<p><strong>最新 3 筆文章</strong><br>TDD 要我們先寫測試再寫程式，在 <code>PostRepository</code> 實作抓最新的 3 筆文章前，必須先將其測試先寫好。</p>
<p><strong>PostRepositoryTest.php</strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/5701f9e374aef6746143eac3dead395c3c991118" target="_blank" rel="external">建立最新 3 筆文章</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>tests/Unit/Repositories/PostRepositoryTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseTransactions</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepositoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseTransactions</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 最新3筆文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">100</span>)-&gt;create();</span><br><span class="line">        <span class="variable">$target</span> = App::make(PostRepository::class);</span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;getLatest3Posts()-&gt;count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Arrange</strong><br>負責建立要測試的資料，因為我們想要抓最新 3 筆文章，所以先使用 model factory 新增 100 筆測試資料進 MySQL。</p>
<p>建立 <code>$target</code> 待測物件，一律使用 <code>App::make()</code> 建立物件，不再使用<code>new</code>建立物件。</p>
<p>建立 <code>$expected</code>，也就我們預期會傳回最新 3 筆文章的結果。</p>
<p><strong>Act</strong><br>實際執行 <code>$target</code> 的 <code>getLatest3Posts()</code>，由於我們只想測試是否能傳回 3 筆資料，使用 collection 的 <code>count()</code> 計算筆數。</p>
<p><strong>Assert</strong><br>使用 PHPUnit 的 <code>assertEquals()</code>，判斷 <code>$expected</code> 與 <code>$actual</code> 是否相等，若相等則 <span class="label label-success">綠燈</span>，不相等則 <span class="label label-danger">紅燈</span>。</p>
<p>第 7 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">DatabaseTransactions</span>;</span><br></pre></td></tr></table></figure></p>
<p>若使用SQLite In-Memory，因為每次資料庫連線一斷，SQLite 就會自動釋放記憶體，因此每次使用 model factory 建立的假資料，並不會殘存在 SQLite In-Memory 內，但目前使用的是 MySQL，資料是實際存在 MySQL 內，並不會自動刪除，若一直跑測試，則 MySQL 的測試資料將越來越多，這樣每次跑測試時，由於資料庫的資料並不相同，所以可能每次跑的結果都不一樣。</p>
<p>Laravel 提供了 <code>DatabaseTransactions</code> trait，只要 <code>use</code> 以後，每次測試完，就會自動幫我們將假資料從 MySQL 刪除，這樣就可以確保我們每次執行測試的結果都是相同的。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  到底 <strong>use DatabaseTransactions;</strong> 有什麼黑魔法，能使得每次測試完就會自動刪除資料呢?</div>
<figure class="highlight php"><figcaption><span>vendor/laravel/framework/src/Illuminate/Foundation/Testing/DatabaseTransactions.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> DatabaseTransactions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Handle database transactions on the specified connections.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beginDatabaseTransaction</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$database</span> = <span class="variable">$this</span>-&gt;app-&gt;make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;connectionsToTransact() <span class="keyword">as</span> <span class="variable">$name</span>) &#123;</span><br><span class="line">            <span class="variable">$database</span>-&gt;connection(<span class="variable">$name</span>)-&gt;beginTransaction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;beforeApplicationDestroyed(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(<span class="variable">$database</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;connectionsToTransact() <span class="keyword">as</span> <span class="variable">$name</span>) &#123;</span><br><span class="line">                <span class="variable">$database</span>-&gt;connection(<span class="variable">$name</span>)-&gt;rollBack();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The database connections that should have transactions.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">connectionsToTransact</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> property_exists(<span class="variable">$this</span>, <span class="string">'connectionsToTransact'</span>)</span><br><span class="line">                            ? <span class="variable">$this</span>-&gt;connectionsToTransact : [<span class="keyword">null</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 10 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Handle database transactions on the specified connections.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beginDatabaseTransaction</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$database</span> = <span class="variable">$this</span>-&gt;app-&gt;make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;connectionsToTransact() <span class="keyword">as</span> <span class="variable">$name</span>) &#123;</span><br><span class="line">        <span class="variable">$database</span>-&gt;connection(<span class="variable">$name</span>)-&gt;beginTransaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;beforeApplicationDestroyed(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(<span class="variable">$database</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;connectionsToTransact() <span class="keyword">as</span> <span class="variable">$name</span>) &#123;</span><br><span class="line">            <span class="variable">$database</span>-&gt;connection(<span class="variable">$name</span>)-&gt;rollBack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>當每個測試案例執行時，Laravel 會以 <code>beginTransaction()</code> 處理，當測試案例結束時，會再以 <code>rollBack()</code> 處理，因此最後假資料不會寫進資料庫。</p>
<p><strong>執行測試</strong><br><img src="/images/tdd/tdd-repository-testing-mysql/repo012.png" alt=""></p>
<p>得到第 1 個 <span class="label label-danger">紅燈</span> : <code>PostRepository</code> 不存在，因為我們還沒有建立。</p>
<p>事實上 PhpStorm 也將 <code>PostRepository</code> 反白，警告我們 <code>PostRepository</code> 並不存在。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/9b22d10d2be1bd688658b354a1ef23b744cace6a" target="_blank" rel="external">建立 PostRepository.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo013.png" alt=""></p>
<p>補上 <code>PostRepository.php</code> 後，繼續執行測試。</p>
<p>得到第 2 個 <span class="label label-danger">紅燈</span> : <code>getLatest3Posts()</code> 不存在，因為我們還沒有建立。</p>
<p>事實上 PhpStorm 也將 <code>getLatest3Posts()</code> 反白，警告我們 <code>getLatest3Posts()</code> 並不存在。</p>
<p><strong>PostRepository.php</strong><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo014.png" alt=""></p>
<p>補上 <code>getLatest3Posts()</code> 後，繼續執行測試。</p>
<p>得到第 3 個 <span class="label label-danger">紅燈</span> : 對 一個 <code>null</code> 去執行 <code>count()</code>，因為我們還沒寫 <code>getLatest3Post()</code> 內的程式碼。</p>
<p>事實上 PhpStorm也將<code>pluck()</code> 反白，警告我們 <code>getLatest3Posts()</code> 尚未傳回任何物件。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/d2be13d3f53378e28e266af0c97ffc523eead4e0" target="_blank" rel="external">回傳 collection</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::orderBy(<span class="string">'id'</span>, <span class="string">'desc'</span>)</span><br><span class="line">            -&gt;take(<span class="number">3</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo015.png" alt=""></p>
<p>在 <code>getLatest3Posts()</code> 補上 query 後回傳 collection 後，繼續執行測試。</p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>。</p>
<p>隨著 <span class="label label-success">綠燈</span> 的出現，我們也完成了 repository。</p>
<h2 id="切換到_MySQL_正式資料庫">切換到 MySQL 正式資料庫</h2><hr>
<p>既然都是在 MySQL 測試，我們可能想將測試實際跑在有正式上線資料的資料庫，而不只是跑在測試資料庫。</p>
<p><strong> 新增 phpunit_acceptance.xml </strong><br>從 <code>phpunit.xml</code> 複製一個新的 <code>phpunit_acceptance.xml</code>。</p>
<p><strong> phpunit_acceptance.xml </strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/d2be13d3f53378e28e266af0c97ffc523eead4e0" target="_blank" rel="external">新增 phpunit_acceptance.xml </a></span></span></span><br><figure class="highlight xml"><figcaption><span>phpunit_acceptance.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">phpunit</span> <span class="attribute">backupGlobals</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">backupStaticAttributes</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">bootstrap</span>=<span class="value">"bootstrap/autoload.php"</span></span><br><span class="line">         <span class="attribute">colors</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertErrorsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertNoticesToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertWarningsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">processIsolation</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">stopOnFailure</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">testsuites</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">testsuite</span> <span class="attribute">name</span>=<span class="value">"Application Test Suite"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">"Test.php"</span>&gt;</span>./tests<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">testsuite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">testsuites</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">whitelist</span> <span class="attribute">processUncoveredFilesFromWhitelist</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">".php"</span>&gt;</span>./app<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">file</span>&gt;</span>./app/Http/routes.php<span class="tag">&lt;/<span class="title">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">whitelist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"mysql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">phpunit</span>&gt;</span></span><br></pre></td></tr></table></figure> </p>
<p>24行<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"mysql"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>將 <code>DB_CONNECTION</code> 從 <code>mysql_testing</code> 改成 <code>mysql</code>，也就是我們想將測試直接跑在正式資料庫。</p>
<p><strong> 切換 phpunit.xml </strong><br><img src="/images/tdd/tdd-repository-testing-mysql/repo016.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; PHPUnit </em></strong></p>
<p>將 <code>Default configuration file</code> 改成剛剛建立的 <code>phpunit_acceptance.xml</code>。</p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo017.png" alt=""></p>
<p>重新跑測試，目前的 <span class="label label-success">綠燈</span> 是跑在 <code>mysql</code> 這個資料庫連線。</p>
<h2 id="使用_CLI_方式執行_phpunit">使用 CLI 方式執行 phpunit</h2><hr>
<p>若你不習慣在 PhpStorm 內跑測試也沒關係，也可以使用 CLI 方式執行 phpunit。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ vendor/bin/phpunit -c phpunit_acceptance.xml</span><br></pre></td></tr></table></figure>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo018.png" alt=""></p>
<p>只要加上 <code>-c</code> 參數，並指定你要使用的 <code>phpunit_acceptance.xml</code> 即可。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於單元測試的資料量很少，其實直接跑在 MySQL 的速度也是很快，而且也不用擔心 SQLite 與 MySQL 的差異。</li>
<li>若直接跑在 MySQL，則建議不必每次在 <code>setup()</code> 去跑 migration，直接先跑 migration，然後搭配 <code>DatabaseTransactions</code> trait。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[直接使用 MySQL 與 Test Factory Generator 測試 Repository]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="SQLite" scheme="http://oomusou.io/tags/SQLite/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討依賴注入]]></title>
    <link href="http://oomusou.io/tdd/tdd-di/"/>
    <id>http://oomusou.io/tdd/tdd-di/</id>
    <published>2016-04-16T12:23:43.000Z</published>
    <updated>2016-04-25T08:26:36.000Z</updated>
    <content type="html"><![CDATA[<p>依賴反轉原則是 SOLID 中最難理解的原則，而依賴注入則是單元測試的基石，本文將從測試角度探討依賴反轉與依賴注入，並將 Laravel 的 service container、constructor injection 與 method injection 應用在實務上。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.29</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>假設目前有 3 家貨運公司，每家公司的計費方式不同，使用者可以動態選擇不同的貨運公司，將一步步的重構成依賴注入方式。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>本範例靈感來自於91哥的<a href="https://dotblogs.com.tw/hatelove/archive/2013/01/02/learning-tdd-in-30-days-day17-refactoring-with-strategy-pattern.aspx" target="_blank" rel="external">30天快速上手TDD Day 17:Refactoring - Stagegy Pattern</a></span></span></span></p>
<h2 id="傳統寫法">傳統寫法</h2><hr>
<p>傳統我們會使用 <code>if else</code> 與 <code>new</code> 來建立物件。</p>
<p><strong>BlackCat.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/4862ffd79ac52e74a245010760662932839fb68d" target="_blank" rel="external">新增BlackCat.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>黑貓的計費方式。</p>
<p><strong>Hsinchu.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/2a7fe354bf337b7b74332c6cafb9dd1a4c02fce4" target="_blank" rel="external">新增Hsinchu.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Hsinchu.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hsinchu</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新竹貨運的計費方式。</p>
<p><strong>PostOffice.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/fa4b0f8cfc82f554b5f671cad2ff467e7e8c16a9" target="_blank" rel="external">新增PostOffice.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostOffice.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostOffice</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">70</span> + <span class="variable">$weight</span> * <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>郵局的計費方式。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/038eecfcabbcb867a6505456cfba78587d1c26bc" target="_blank" rel="external">新增ShippingService.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$companyName</span>, <span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$companyName</span> == <span class="string">'BlackCat'</span>) &#123;</span><br><span class="line">            <span class="variable">$blackCat</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$blackCat</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> (<span class="variable">$companyName</span> == <span class="string">'Hsinchu'</span>) &#123;</span><br><span class="line">            <span class="variable">$hsinchu</span> = <span class="keyword">new</span> Hsinchu();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$hsinchu</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> (<span class="variable">$companyName</span> == <span class="string">'PostOffice'</span>) &#123;</span><br><span class="line">            <span class="variable">$postOffice</span> = <span class="keyword">new</span> PostOffice();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$postOffice</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'No company exception'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>calculateFee()</code> 傳入 2 個參數 : <code>$companyName</code> 與 <code>$weight</code>。</p>
<p>使用者可自行由 <code>$companyName</code> 挑選貨運公司，並傳入 <code>$weight</code> 計算運費。</p>
<p>使用 <code>if else</code> 判斷 <code>$companyName</code> 字串，並 <code>new</code>出相對應物件，這是初學者學習物件導向時的寫法。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/cd5306243c8416ada62beb8fc3540cf20e79d55e" target="_blank" rel="external">將if else重構成switch</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> string $companyName</span><br><span class="line"> * <span class="doctag">@param</span> int $weight</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> * <span class="doctag">@throws</span> Exception</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$companyName</span>, <span class="variable">$weight</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">            <span class="variable">$blackCat</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$blackCat</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">            <span class="variable">$hsinchu</span> = <span class="keyword">new</span> Hsinchu();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$hsinchu</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">            <span class="variable">$postOffice</span> = <span class="keyword">new</span> PostOffice();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$postOffice</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'No company exception'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>將 <code>if else</code> 重構成 <code>switch</code>，可稍微改善程式碼的可讀性。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>將 <code>if else</code> 重構成 <code>switch</code>，請參考<a href="/phpstorm/phpstorm-if-switch/">如何在PhpStorm將if else重構成switch case?</a></span></span></span></p>
<h2 id="使用_Interface">使用 Interface</h2><hr>
<p>目前的寫法，執行上沒有什麼問題，若以 TDD 開發，我們將得到第一個 <span class="label label-success">綠燈</span>。</p>
<p>我們將繼續重構成更好的程式。</p>
<p>目前我們是實際去 <code>new Blackcat()</code>、<code>new Hsinchu()</code> 與 <code>new PostOffice()</code>，也就是說<code>ShippingService</code>將直接<strong>相依</strong>於<code>BlackCat</code>、<code>Hshinchu</code> 與 <code>PostOffice</code> 3 個 class。</p>
<p>物件導向就是希望達到<strong>高內聚，低耦合</strong>的設計。所謂的低耦合，就是希望能減少<strong>相依</strong>於外部的 class 的數量。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  何謂<strong>相依</strong>?</div>
<p>簡單的說，有 2 種寫法會產生相依 :</p>
<ol>
<li>去 new 其他 class。</li>
<li>去 extends 其他 class。</li>
</ol>
<p>由於 PHP 不用編譯，所以可能較無法體會相依的嚴重性，但若是需要編譯的程式語言，若你相依的 class 的 property 或 method 改變，可能導致你的程式無法編譯成功，也就是你必須配合相依的 class 做相對應的修改才能通過編譯，因此我們希望降低對其他 class 的相依程度與數量。</p>
<p>GoF 四人幫在設計模式曾說 : <strong>Program to an Interface, not an Implementation</strong>。也就是程式應該只相依於 interface，而不是相依於實際 class，目的就是要藉由 interface，降低對於實際 class 的相依程度。</p>
<p>若我們能將 <code>BlackCat</code>、 <code>Hshinchu</code> 與 <code>PostOffice</code> 3 個 class抽象化為 1 個 interface，則 <code>ShippingService</code>將從相依 3 個 class，降低成只相依於 1 個interface，將大大降低 <code>ShippingService</code> 與其他 class 的相依程度。</p>
<p>若以編譯的角度，由於 <code>ShippingService</code> 只相依於 interface，因此 <code>BlackCat</code>、 <code>Hshinchu</code> 與 <code>PostOffice</code> 做任何修改都不會影響我 <code>ShippingService</code> 的編譯。</p>
<p><strong>LogisticsInterface.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/c627e8ad2e73df8f0631521eb8d66f416013c83d" target="_blank" rel="external">抽取出LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>從 <code>BlackCat</code> 抽取出 <code>LogisticsInterface</code>，將 <code>BlackCat</code>、 <code>Hsinchu</code> 與 <code>PostOffice</code> 抽象化成 <code>LogisticsInterface</code>。</p>
<p><strong>BlackCat.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/7e611c3948d68b6e5226ea922b6748f97518ea6f" target="_blank" rel="external">BlackCat實現LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> * <span class="variable">$weight</span> * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>BlackCat</code> 實現 <code>LogisticsInterface</code>。</p>
<p><strong>Hsinchu.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/dcf284c298cf6c9ac1b0615ed9cadcc0ef22c36b" target="_blank" rel="external">Hsinchu實現LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Hsinchu.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hsinchu</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">80</span> * <span class="variable">$weight</span> * <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Hsinchu</code> 實現 <code>LogisticsInterface</code>。</p>
<p><strong>PostOffice.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/c627e8ad2e73df8f0631521eb8d66f416013c83d" target="_blank" rel="external">PostOffice實現LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostOffice.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostOffice</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">70</span> * <span class="variable">$weight</span> * <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>PostOffice</code> 實現 <code>LogisticsInterface</code>。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/24656ced564f230198248350c25676ca57e98c2c" target="_blank" rel="external">ShippingService只相依於LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$companyName</span>, <span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> Hsinchu();</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> PostOffice();</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'No company exception'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>$logistics</code> 的型別都是 <code>LogisticsInterface</code>，目前 PHP 7 對於變數還沒有支援 type hint，所以程式碼看起來差異不大，但藉由 PHPDoc，在 PhpStorm 打 <code>$logistics-&gt;</code>，已經可以得到語法提示: <code>calculateFee()</code>，表示 PhpStorm 已經知道<code>BlackCat</code>、 <code>Hsinchu</code> 與 <code>PostOffice</code> 都是 <code>LogisticsInterface</code> 型別的物件，也就是對於 <code>ShippingService</code> 來說，<code>BlackCat</code>、<code>Hsinchu</code> 與 <code>PostOffice</code> 都已經抽象化成 <code>LogisticsInterface</code>。</p>
<h2 id="工廠模式">工廠模式</h2><hr>
<p>雖然已經將 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>PostOffice</code> 抽象化成 <code>LogisticsInterface</code>，但是在 <code>ShoppingService</code> 中，仍看到 <code>new Blackcat()</code>、 <code>new Hsinchu()</code> 與 <code>new PostOffice()</code>，對於 <code>ShoppingService</code> 而言，我們看到了 3 個問題 :</p>
<ol>
<li><strong>違反單一職責原則</strong> : <code>calculateFee()</code> 原本應該只負責計算運費，現在卻還要負責建立貨運公司物件。</li>
<li><strong>違反開放封閉原則</strong> : 將來若有新的貨運公司供使用者選擇，勢必修改 <code>switch</code>。</li>
<li><strong>實質相依數為 3</strong> : 雖然已經重構出 interface，但實際上卻還必須 <code>new</code> 3 個class。</li>
</ol>
<p>比較好的方式是將 <code>new</code> 封裝在 <code>LogisticsFactory</code> 中。</p>
<p><strong>LogisticsFactory.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/9da99ca17a25ba8c65d852007ebc34a4558f8306" target="_blank" rel="external">新增LogisticsFactory.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticsFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> LogisticsInterface</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(string <span class="variable">$companyName</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> BlackCat();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Hsinchu();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PostOffice();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'No company exception'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Simple Factory模式使用了<code>static create()</code>，專門負責建立貨運公司物件:</p>
<ol>
<li>專門負責建立貨運公司的邏輯，符合單一職責原則。</li>
</ol>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/eb7a53f55a3a4bd625ce2f0b65b436dd6073b05f" target="_blank" rel="external">ShippingService只相依於LogisticsFactory</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$companyName</span>, <span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$logistics</span> = LogisticsFactory::create(<span class="variable">$companyName</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>將來有新的貨運公司，也只要統一修改<code>LogisticsFactory</code>即可，將其變化封裝在<code>LogisticsFactory</code>，對於 <code>ShoppingService</code>開放封閉。</li>
<li><code>ShoppingService</code> 從相依於 3 個 class 降低成僅相依於 <code>LogisticsInterface</code> 與 <code>LogisticsFactory</code>，實質相依數降為 2。</li>
</ol>
<h2 id="程式的可測試性">程式的可測試性</h2><hr>
<p>符合 spec 的程式，並不代表是好的程式，一個好的程式還要符合 5 個要求 :</p>
<ol>
<li><strong> 容易維護 </strong>。</li>
<li><strong> 容易新增功能 </strong>。</li>
<li><strong> 容易重複使用 </strong>。</li>
<li><strong> 容易上Git，不易與其他人衝突 </strong>。</li>
<li><strong> 容易寫測試 </strong>。</li>
</ol>
<p>使用 interface + 工廠模式，已經達到以上前4點要求，算是很棒的程式。</p>
<p>根據單元測試的定義 :<span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>單元測試的定義來自於<a href="https://dotblogs.com.tw/hatelove/archive/2012/11/13/learning-tdd-in-30-days-day5-how-to-isolate-dependency-the-basic-testability.aspx" target="_blank" rel="external">30天快速上手TDD Day 5:如何隔離相依性 - 基本的可測試性</a></span></span></span><br><div class="alert alert-info"><i class="fa fa-info"></i>  單元測試必須與外部環境、類別、資源、服務獨立，而不能直接相依。這樣才是單純的測試目標物件本身的邏輯是否符合預期。</div></p>
<p>若要對 <code>ShippingService</code> 進行單元測試，勢必將 <code>BlackCat</code>、 <code>Hsinchu</code> 與 <code>PostOffice</code> 加以抽換隔離，但使用了工廠模式之後，<code>ShippingService</code> 依然直接相依了 <code>LogisticsFactory</code>，而 <code>LogisticsFactory</code> 又直接相依 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>PostOffice</code>，當我們對 <code>ShippingService</code> 做單元測試時，由於無法對 <code>LogisticsFactory</code> 做抽換隔離，因此無法對<code>ShippingService</code> 做單元測試。</p>
<p>簡單的說，interface + 工廠模式，仍然無法達到可測試性的要求，我們必須繼續重構。</p>
<h2 id="依賴反轉">依賴反轉</h2><hr>
<p>為了可測試性，單元測試必須可決定待測物件的相依物件，如此才可由單元測試將待測物件的相依物件加以抽換隔離。</p>
<p>換句話說，我們不能讓待測物件直接相依其他 class，而應該由單元測試訂出 interface，讓待測物件僅能相依於interface，而實際相依的物件可由單元測試來決定，如此我們才能對相依物件加以抽換隔離。</p>
<p>這也就是所謂的依賴反轉原則 :<br><div class="alert alert-info"><i class="fa fa-info"></i>  高階模組不該依賴低階模組，兩者都應該要依賴其抽象。</div></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  抽象不要依賴細節，細節要依賴抽象。</div>
<p>好像越講越抽象 XDD。</p>
<p>其中<strong>相依</strong>與<strong>依賴</strong>是相同的，只是翻譯用字的問題。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  何謂高階模組? 何謂低階模組?</div>
<p>高階與低階是相對的。</p>
<p>簡單的說:</p>
<ul>
<li>當A class 去 <code>new</code> B class，A 就是高階模組，B就是低階模組。 </li>
</ul>
<p>若以本例而言 :</p>
<ol>
<li><code>ShippingService</code> 相對於 <code>BlackCat</code>，<code>ShippingService</code> 是高階模組，<code>BlackCat</code> 是低階模組，</li>
<li>單元測試相對於 <code>ShippingService</code>，單元測試是高階模組，<code>ShippingService</code> 是低階模組。</li>
<li><code>ShippingController</code> 相對於 <code>ShippingService</code>，<code>ShippingController</code> 是高階模組，<code>ShippingService</code> 是低階模組。</li>
</ol>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  何謂抽象? 何謂細節?</div>
<ul>
<li>interface 為抽象, abstract class 為抽象。</li>
<li>class 為細節去 implement interface，class 為細節去 extends abstract class。</li>
</ul>
<p>若以本例而言 :</p>
<img src="/images/tdd/tdd-di/di000.svg" width="550">
<p>在沒有使用 interface 前 :</p>
<ul>
<li><code>ShippingService</code> 直接 <code>new BlackCat()</code>。</li>
<li><code>ShippingService</code> 直接相依於 <code>BlackCat</code>。</li>
<li>也就是高階模組依賴低階模組。</li>
</ul>
<img src="/images/tdd/tdd-di/di001.svg" width="550">
<p>使用了 interface 之後 : </p>
<ul>
<li><code>ShippingService</code> 沒有相依於 <code>BlackCat</code>，也就是高階模組沒有依賴於低階模組。</li>
<li><code>ShippingService</code> 改成相依於 <code>LogisticsInterface</code>，也就是高階模組依賴其抽象(因為 <code>new</code> 而相依)。</li>
<li><code>BlackCat</code> 改成相依於 <code>LogisticsInterface</code>，也就是低階模組也依賴其抽象(因為 <code>implements</code> 而相依)。</li>
<li>也就是目前高階模組與低階模組都改成依賴其抽象。</li>
<li>高階模組<code>ShippingService</code> 原本依賴的是低階模組 <code>BlackCat</code> 的 <code>calculateFee()</code>，有了 interface 之後，變成<strong>反過來</strong>低階模組 <code>BlackCat</code> 要依賴高階模組所定義 <code>LogisticsInterface</code> 的 <code>calculateFee()</code>，所以稱為<strong>依賴反轉</strong>。</li>
</ul>
<p>更簡單的說，依賴反轉就是要你使用 interface 來寫程式，而不要直接相依於 class。</p>
<p>我們之前已經重構出 <code>LogisticsInterface</code>，事實上已經符合依賴反轉。</p>
<h2 id="依賴注入">依賴注入</h2><hr>
<p>有了依賴反轉還不足以達成可測試性，依賴反轉只確保了待測物件的相依物件相依於 interface。</p>
<p>既然相依物件相依於 interface，若單元測試可以產生該 interface 的物件，並加以注入，就可以將相依物件加以抽換隔離，這就是依賴注入。</p>
<h2 id="Constructor_Injection">Constructor Injection</h2><hr>
<p><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/b3b66a2cbbe3276d833aa0c655420938da465ec3" target="_blank" rel="external">ShippingService重構成constructor injection</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> LogisticsInterface */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logistics</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * ShippingService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(LogisticsInterface <span class="variable">$logistics</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;logistics = <span class="variable">$logistics</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;logistics-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>12行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> LogisticsInterface */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$logistics</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * ShippingService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(LogisticsInterface <span class="variable">$logistics</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;logistics = <span class="variable">$logistics</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原本相依的 <code>LogisticsInterface</code> 型別的物件，改由 constructor 注入，藉由 PHP 的 type hint，描述要注入的物件型別為 <code>LogisticsInterface</code>。</p>
<p>原本使用 interface + 工廠模式，實質相依數為 2，改用 constructor injection 之後，連 <code>LogisticsFactory</code>都不需要了，僅相依於 <code>LogisticsInterface</code>，實質相依數降為 1。</p>
<p>17行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> int $weight</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;logistics-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原本的 <code>logistics</code> 物件改成 field。</p>
<h2 id="Service_Container">Service Container</h2><hr>
<p>我們目前已經有了依賴注入，對於可測試性只剩下最後一哩路，若我們能將 mock 出的假物件，透過依賴注入取代掉原來的相依物件，就能將相依物件加以抽換隔離，達成隔離測試的要求，service container 就是要幫我們將相依物件抽換隔離。</p>
<p>Laravel 4 稱為 IoC container，Laravel 5 稱為 service container。<span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>以下句子來自於<a href="https://dotblogs.com.tw/hatelove/archive/2012/11/13/learning-tdd-in-30-days-day5-how-to-isolate-dependency-the-basic-testability.aspx" target="_blank" rel="external">30天快速上手TDD Day 5:如何隔離相依性 - 基本的可測試性</a></span></span></span>事實上 IoC (Inversion of Conttrol) 與 DI (Dependency Inversion) 講的是同一件事情，也就是由單元測試決定待測物件的相依物件。</p>
<p><strong> 單元測試 </strong><br><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/21260f19a09380370f13c26934107ce954d5114c" target="_blank" rel="external">新增ShippingService的單元測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓單元測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mock</span> = Mockery::mock(BlackCat::class);</span><br><span class="line">        <span class="variable">$mock</span>-&gt;shouldReceive(<span class="string">'calculateFee'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;withAnyArgs()</span><br><span class="line">            -&gt;andReturn(<span class="variable">$expected</span>);</span><br><span class="line"></span><br><span class="line">        App::instance(LogisticsInterface::class, <span class="variable">$mock</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mock</span> = Mockery::mock(BlackCat::class);</span><br><span class="line"><span class="variable">$mock</span>-&gt;shouldReceive(<span class="string">'calculateFee'</span>)</span><br><span class="line">    -&gt;once()</span><br><span class="line">    -&gt;withAnyArgs()</span><br><span class="line">    -&gt;andReturn(<span class="variable">$expected</span>);</span><br></pre></td></tr></table></figure></p>
<p>因為單元測試，我們只想測試 <code>ShippingService</code>，因此想將其相依的 <code>LogisticsInterface</code> 物件抽換隔離，因此利用 <code>Mockery</code> 根據 <code>BlackCat</code>建立假物件 <code>$mock</code>，並定義 <code>calculateFee()</code> 回傳的期望值為 <code>$expected</code>。</p>
<p><code>once()</code> 為預期 <code>calculateFee()</code>會被執行一次，且只會被執行一次，若完全沒被執行，或執行超過一次，PHPUnit 會顯示 <span class="label label-danger">紅燈</span>。</p>
<p><code>withAngArgs()</code> 為不特別在乎 <code>calculateFee()</code> 的參數型別與個數，一般來說，單元測試在乎的是被 mock method 是否被正確執行，以及其回傳值是否如預期，至於參數則不太重要。</p>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App::instance(LogisticsInterface::class, <span class="variable">$mock</span>);</span><br></pre></td></tr></table></figure></p>
<p>mock 物件已經建立好，接著要告訴 service container，當 constructor injection 的 type hint 遇到 <code>LogisticsInterface</code>時，該使用我們剛建立的 <code>$mock</code> 物件抽換隔離，而不是原來的相依物件。</p>
<p><code>App::instance()</code> 用到的地方不多，一般就是用在需要 mock 時。</p>
<p>22行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$target</span> = App::make(ShippingService::class);</span><br></pre></td></tr></table></figure></p>
<p>當 mock 與 service container 都準備好時，接著要建立待測物件準備測試，這裡不能再使用 <code>new</code> 建立物件，而必須使用 service container 提供的 <code>App::make()</code> 來建立物件，因為我們就是希望靠 service container 幫我們將 mock 物件抽換隔離原來的相依物件，因此必須改用 service container 提供的 <code>App::make()</code>。</p>
<p><strong> 整合測試 </strong><br><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/f736ffff42969a5e958b3d9d5340cb6acc8f5973" target="_blank" rel="external">新增ShippingService的整合測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓整合測試<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">    <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    App::bind(LogisticsInterface::class, BlackCat::class);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>當執行整合測試時，我們會希望實際執行相依物件的功能，而不再使用 mock 將其相依物件抽換隔離。</p>
<p>第8行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App::bind(LogisticsInterface::class, BlackCat::class);</span><br></pre></td></tr></table></figure></p>
<p>當 constructor injection 配合 type hint 時，若是 class，Laravel 的 service container 會自動幫我們注入其相依物件，但若 type hint 為 interface 時，因為可能有很多 class implements 該 interface，所以必須先使用 <code>App::bind()</code> 告訴 service container，當 type hint 遇到 <code>LogisticsInterface</code> 時，實際上要注入的是 <code>BlackCat</code> 物件。</p>
<p>10行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$target</span> = App::make(ShippingService::class);</span><br></pre></td></tr></table></figure></p>
<p>當 <code>App::bind()</code> 完成後，就可以使用 <code>App::make()</code> 建立待測物件，service container 也會根據剛剛 <code>App::bind()</code> 的設定，自動依賴注入 <code>BlackCat</code> 物件。</p>
<h2 id="Method_Injection">Method Injection</h2><hr>
<p>Laravel 4 提出了 constructor injection 實現了依賴注入，而 Laravel 5 更進一步提出了 method injection。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  有 constructor injection 不就已經可測試了嗎? 為什麼還需要 method injection 呢?</div>
<p>由於 Laravel 4 只有 constructor injection，所以只要 class 要實現依賴注入，唯一的管道就是 constructor injection，若有些相依物件只有單一 method 使用一次，也必須使用 constructor injection，這將導致最後 constructor 的參數爆炸而難以維護。</p>
<p>對於一些只有單一 method 使用的相依物件，若能只在 method 的參數加上 type hint，就可自動依賴注入，而不需要動用 constructor，那就太好了，這就是 method injection。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(StoreBlogPostRequest <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// The incoming request is valid...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如大家熟悉的form request，就是使用 method injection，相依的 <code>StoreBlogPostRequest</code> 物件並不是透過 constructor 注入，而是在 <code>store()</code> 注入。</p>
<p><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/be1a98426347564503a41e6c114d9c317f4491ac" target="_blank" rel="external">ShippingService重構成method injection</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(LogisticsInterface <span class="variable">$logistics</span>, <span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>重構成 method injection 後，就不必再使用 constructor 與 field，程式更加精簡。<span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>要注入的物件參數位置並不一定要排第一個，可以依實際需求調整。</span></span></span></p>
<p>第 1 個參數為我們要注入的 <code>LogisticsInterface</code> 物件，第 2 個參數為我們原本要傳的 <code>$weight</code> 參數。</p>
<p><strong> 單元測試 </strong><br><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>22</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">22</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/ebb25ee69a994070c4781415ebe8663d994b64e7" target="_blank" rel="external">ShippingService method injection的單元測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓單元測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mock</span> = Mockery::mock(BlackCat::class);</span><br><span class="line">        <span class="variable">$mock</span>-&gt;shouldReceive(<span class="string">'calculateFee'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;withAnyArgs()</span><br><span class="line">            -&gt;andReturn(<span class="variable">$expected</span>);</span><br><span class="line"></span><br><span class="line">        App::instance(LogisticsInterface::class, <span class="variable">$mock</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">    <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>之前 mock 的部分，與 constructor injection 相同，就不再解釋。</p>
<p>關鍵在於 <code>App::call()</code>，這是一個在 Laravel 官方文件沒有介紹的 method，但 Laravel 內部卻到處在用。<span class="margin-note-marker"><sup>23</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">23</span>method injection 的介紹，始見於 Matt Stauffer Blog 的 <a href="https://mattstauffer.co/blog/laravel-5.0-method-injection" target="_blank" rel="external">Laravel 5.0 - Method Injection</a></span></span></span></p>
<p>之前我們使用 constructor injection，就要搭配 <code>App::make()</code> 才能自動依賴注入。</p>
<p>現在我們使用 method injection，就要搭配 <code>App::call()</code> 才能自動依賴注入。</p>
<p>第 1 個參數要傳的字串，是 class 完整名稱，加上 <code>@</code> 與 method名稱。</p>
<p>第 2 個參數要傳的是陣列，也就是我們自己要傳的參數，其中參數名稱為 key，參數值為 value。</p>
<p><strong> 整合測試 </strong><br><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>24</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">24</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/57fc7d2e6de9e52a070c327866d195c272f29ee3" target="_blank" rel="external">新增ShippingService method injection的整合測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓整合測試<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">    <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    App::bind(LogisticsInterface::class, BlackCat::class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">        <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>10行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">    <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>關鍵一樣是使用 <code>App::call()</code>。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  為什麼只能在 controller 使用 method injection，而無法在自己的 presenter、service 或 repository 使用 method injection?</div>
<p>當初學習 method injection時，我也非常興奮，總算可以解決 Laravel 4 的 constructor 參數爆炸的問題，但發現只能用在 controller，但無法用在自己的 presenter、service 或 repository，一直學習到 <code>App::call()</code> 時，問題才迎刃而解。</p>
<p>因為 Laravel 內部使用 <code>App::call()</code> 呼叫 controller 的 method，因此你可以在 controller 無痛使用 method injection，但若你自己的 presenter、service 或 repository 要使用 method injection，就必須在 controller 搭配 <code>App::call()</code>，如此 service containter 才會幫你自動依賴注入相依物件。</p>
<h2 id="再談可測試性">再談可測試性</h2><hr>
<p>本文從頭到尾，都是以<strong>可測試性</strong>的角度去談依賴注入，而我個人也的確是在寫單元測試之後，才領悟依賴反轉與依賴注入的重要性。</p>
<p>若是不寫測試，是否就不需要依賴反轉與依賴注入呢?</p>
<p>之前曾經提到 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  IoC (Inversion of Conttrol) 與 DI (Dependency Inversion) 講的是同一件事情，也就是由單元測試決定待測物件的相依物件。</div>
<p>根據之前的經驗，我們可以發現待測物件的相依物件都是在測試的 <code>App::bind()</code> 所決定。</p>
<p>之前有提到所謂的高階模組與低階模組是相對的，單元測試相對於 service，單元測試是高階模組，而 service 是低階模組。</p>
<p>對照於實際狀況，controller 相對於 service，controller是高階模組，而 service 是低階模組。</p>
<p>我們可以在單元測試以 <code>App::bind()</code> 決定 service 的相依物件，同樣的，我們也可以在 controller 以 <code>App::bind()</code> 去決定 service 的相依物件。</p>
<p>既然我們可以由 controller 去決定，去注入 service 的相依物件，我們就不再被底層綁死，不再依賴底層 service，而是由低階模組去依賴高階模組所制定的 interface，再由 controller 的 <code>App::bind()</code> 來決定低階模組的相依物件，這就是所謂的依賴反轉。</p>
<p>也就是說，若高層模組可以決定低階模組的相依物件，那整個設計的彈性與擴充性會非常好，因為需求都來自於人，而人所面對的是高階模組，而高階模組可以透過依賴注入去決定低階模組的相依物件，而不是被低階模組綁死，可彈性地依照需求而改變。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  若程式符合可測試性的要求，表示其具有低耦合的特性，也就是物件導向強調的高內聚，低耦合，因此程式將更容易維護，更容易新增功能，更容易重複使用，更容易上Git，不易與其他人衝突，也就是說我們可以將程式的可測試性，當成是否為好程式的指標之一。</div>
<h2 id="生活中的依賴反轉">生活中的依賴反轉</h2><hr>
<p>舉個生活上實際的例子，事實上硬體產業就大量使用依賴反轉。</p>
<p>比如電腦需要將畫面送到顯示器，系統廠對 design house 發出需求，此時系統廠相當於高階模組，而 design house 相當於低階模組。</p>
<p>Design house 當然可以設計出 IC 符合系統廠需求，但由於系統廠沒有規定任何傳輸介面規格，只提出顯示需求，因此 design house 可以使用自己設計的專屬傳輸介面，系統廠的電路板只要符合 design house 的專屬傳輸介面規格，就可以將電腦畫面傳送到顯示器。</p>
<p>這樣雖然可以達成需求，但有幾個問題：</p>
<ol>
<li>傳輸介面由 design house 規定，只要 design house 傳輸介面更改，系統廠的電路板就得跟著修改。</li>
<li>Design house 的專屬傳輸介面，需要搭該公司的控制 IC，因此系統廠還被綁死要使用該 design house 的控制 IC。</li>
<li>由於使用專屬傳輸介面，因此系統廠無法使用替代料，只能乖乖使用該 design house 的 IC，沒有議價空間，且備料時間也被綁死。</li>
</ol>
<p>這就是典型的高階模組依賴低階模組，也就是系統廠被 design house 綁死了。</p>
<p>所以系統廠很聰明，會聯絡各大系統廠一起制定傳輸介面規格，如VGA、HDMI、Display Port…等，如此 deisgn house 就得乖乖的依照系統廠制定的傳輸介面規格來設計 IC，這樣系統廠就不再被單一 design house 綁死，可以自行選擇控制 IC，還可以找替代料，增加議價空間，備料時間也更加彈性，這就是典型的低階模組反過來依賴高階模組所制定的規格，也就是依賴反轉。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Interface + 工廠模式無法達成可測試性的要求，因此才有了依賴注入與 service container。</li>
<li>若很多 method 都使用相同相依物件，可使用 constructor injection，若只有單一 method 使用的相依物件，建議改用 method injection。</li>
<li>Method Injection 必須搭配 <code>App::call()</code>，除了自動依賴注入相依物件外，也可以自行傳入其他參數。</li>
<li>可測試性與物件導向是相通的，我們可以藉由程式的可測試性，當成是否為好程式的指標之一。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52DI_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[從測試角度探討依賴注入]]>
    
    </summary>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何從 Route 傳參數給 Controller?]]></title>
    <link href="http://oomusou.io/laravel/laravel-route-pass-parameter-to-controller/"/>
    <id>http://oomusou.io/laravel/laravel-route-pass-parameter-to-controller/</id>
    <published>2016-04-12T12:23:43.000Z</published>
    <updated>2016-04-12T23:02:29.000Z</updated>
    <content type="html"><![CDATA[<p>實務上我們可能會遇到資料庫邏輯與商業邏輯完全相同，只有顯示邏輯不同，也就是 controller、service、repository 完全相同，只有 route 與 view 不相同，我們該如何在使用同一個 controller 的前提下，實現此需求呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.29</p>
<h2 id="測試案例">測試案例</h2><hr>
<p>我們以 TDD 方式來完成此需求。</p>
<ol>
<li>URI 為 <code>/welcome</code> 時，使用 <code>welcome.blade.php</code>。</li>
<li>URI 為 <code>/helloworld</code> 時，使用 <code>helloworld.blade.php</code>。</li>
</ol>
<h2 id="第一個測試">第一個測試</h2><hr>
<p><strong>HomeControllerTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/b50f496326ff766b8e36694e365e2f00d1083a0d" target="_blank" rel="external">新增HomeControllerTest的第一個測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/HomeControllerTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeControllerTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">welcomeURI</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/welcome'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Laravel 5'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們希望當URI為 <code>/welcome</code> 時，期望能在 view 看到 <code>Laravel 5</code> 字串。</p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route000.png" alt=""></p>
<p>馬上跑測試，我們得到第1個 <span class="label label-danger">紅燈</span>。</p>
<p>錯誤訊息為 <code>A request [http://localhost/welcome] failed</code>。</p>
<p>因為我們還沒有建立 route。</p>
<p><strong>routes.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/620423d81d0cb9abd0637a29c8cf288b8c9a5980" target="_blank" rel="external">修改routes.php，增加/welcome</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/welcome'</span>, [</span><br><span class="line">    <span class="string">'as'</span>   =&gt; <span class="string">'Welcome'</span>,</span><br><span class="line">    <span class="string">'uses'</span> =&gt; <span class="string">'HomeController@index'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route001.png" alt=""></p>
<p>補上 route 後，繼續跑測試。</p>
<p>我們得到第2個 <span class="label label-danger">紅燈</span>。</p>
<p>錯誤訊息為 <code>Class App\Http\Controllers\HomeController does not exist</code>。</p>
<p>因為我們還沒建立 <code>HomeController</code>。</p>
<p><strong>HomeController.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/98d5e4d48f15575d577778cfdf1df4aec772da45" target="_blank" rel="external">新增HomeController.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/HomeController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'Welcome'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route002.png" alt=""></p>
<p>新增 <code>HomeController</code> 後，繼續跑測試。</p>
<p>我們得到第1個 <span class="label label-success">綠燈</span>。</p>
<h2 id="第二個測試">第二個測試</h2><hr>
<p><strong>HomeControllerTest.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/20b989975ec1c389fe167fbccd9fad3e95785adf" target="_blank" rel="external">新增HomeControllerTest的第二個測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/HomeControllerTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeControllerTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">welcomeURI</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/welcome'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Laravel 5'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">helloWorld</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/helloworld'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Hello World'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route003.png" alt=""></p>
<p>馬上跑測試，我們得到第1個 <span class="label label-danger">紅燈</span>。</p>
<p>錯誤訊息為 <code>A request [http://localhost/helloworld] failed</code>。</p>
<p>因為我們還沒有建立 route。</p>
<p><strong>routes.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/96682203b8171694758fdeccad1e39384f17602e" target="_blank" rel="external">修改routes.php，增加/helloworld</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">HomeController</span>;</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/welcome'</span>, [</span><br><span class="line">    <span class="string">'as'</span> =&gt; <span class="string">'Welcome'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> App::make(HomeController::class)-&gt;index(<span class="string">'welcome'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/helloworld'</span>, [</span><br><span class="line">    <span class="string">'as'</span> =&gt; <span class="string">'HelloWorld'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> App::make(HomeController::class)-&gt;index(<span class="string">'helloworld'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>修改 routes 時，我們面臨了一個挑戰，需求為 route 與 view 不同，但 controller 相同，因此勢必使用同一個 <code>HomeController@index</code>。</p>
<p>也就是若我們可以將 view 當成參數，從 route 傳給 <code>HomeController@index</code>，就能達成我們的需求。</p>
<p>我們將陣列的 key 由 <code>uses</code> 改成 closure ，利用<code>App::make()</code>自己建立 <code>HomeController</code>物件，並將 view 為 <code>index()</code> 的參數傳入。</p>
<p><strong>HomeController.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/329a5de62f885e34d0f1fa256fd8a59ca172317f" target="_blank" rel="external">修改HomeController.php，新增$viewName參數</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/HomeController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(<span class="variable">$viewName</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="variable">$viewName</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於 <code>routes.php</code> 將 view的名稱傳入 <code>HomeController@index</code>，所以必須重構符合 <code>routes.php</code>的要求。</p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route004.png" alt=""></p>
<p>重構 <code>HomeController.php</code>後，繼續跑測試。</p>
<p>我們得到第2個 <span class="label label-danger">紅燈</span>。</p>
<p>錯誤訊息為 <code>View [HelloWorld] not found</code>。</p>
<p>因為我們還沒建立 <code>helloworld.blade.php</code>。</p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route005.png" alt=""></p>
<p>新增<code>helloworld.blade.php</code>後，繼續跑測試。</p>
<p>我們得到2個 <span class="label label-success">綠燈</span>，兩個測試都通過了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>我們也可以自行由 <code>routes.php</code> 去建立 <code>controller</code> 物件，只是因為 Laravel 內部大量使用依賴注入，所以你無法自行使用 <code>new</code> 去建立，但透過 <code>App::make()</code> 與 service container，我們就可以再次掌握 controller 物件，因此可以透過 route 對 controller 傳參數。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52RoutePassParameterToController" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[利用 Service Container 從 Route 將參數傳給 Controller]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在Eloquent建立一個含or的where條件式?]]></title>
    <link href="http://oomusou.io/laravel/eloquent/laravel-where-and-or/"/>
    <id>http://oomusou.io/laravel/eloquent/laravel-where-and-or/</id>
    <published>2016-04-09T06:23:43.000Z</published>
    <updated>2016-04-12T05:14:29.000Z</updated>
    <content type="html"><![CDATA[<p>實務上在Eloquent下where條件式時，其中可能包含一個or條件判斷，這種需求該如何使用Eloquent的query builder建立呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.29</p>
<h2 id="Migration">Migration</h2><hr>
<p><strong>create_posts_table.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52WhereAndOr_demo-/commit/da5b80c3c51164b14bfa22d84de6ee2f65dfd918" target="_blank" rel="external">建立Post model與migration</a></span></span></span><br><figure class="highlight php"><figcaption><span>database/migration/2016_04_10_143945_create_posts_table.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatePostsTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'title'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'description'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;text(<span class="string">'content'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;tinyInteger(<span class="string">'status'</span>); <span class="comment">// 0: normal, 1:draft, 2:deleted</span></span><br><span class="line">            <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::drop(<span class="string">'posts'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Schema::create(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'title'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'description'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;text(<span class="string">'content'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;tinyInteger(<span class="string">'status'</span>); <span class="comment">// 0: normal, 1:draft, 2:deleted</span></span><br><span class="line">    <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>posts</code> table有<code>status</code>欄位，其中0為正常文章，1為草稿文章，2為已刪除文章。</p>
<h2 id="SQL">SQL</h2><hr>
<p>需求為列出所有<strong>正常</strong>與<strong>草稿</strong>文章，若使用SQL，我們會這樣寫 :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">SELECT * </span><br><span class="line"><span class="keyword">FROM</span> posts</span><br><span class="line"><span class="keyword">WHERE</span> (<span class="keyword">status</span> = <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">status</span> = <span class="number">1</span>)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="whereRaw()">whereRaw()</h2><hr>
<p>若使用Eloquent，我們該怎麼寫呢?很多人會想到<code>whereRaw()</code> :<br><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52WhereAndOr_demo-/commit/3942ca94b8d806af49d21bb0b3b02fc1acabc904" target="_blank" rel="external">PostRepository.php使用whereRaw()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUndeletedPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereRaw(<span class="string">'status = 0 or status = 1'</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這樣寫當然可以，不過<code>whereRaw()</code>的程式可讀性較差，畢竟<code>whereRaw()</code>裡面是SQL字串。</p>
<h2 id="where()_+_closure">where() + closure</h2><hr>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52WhereAndOr_demo-/commit/ef961c682976ad4041e8a29b99e42b5b8e6363c9" target="_blank" rel="external">PostRepository.php使用where() + closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUndeletedPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::where(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$query</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$query</span>-&gt;where(<span class="string">'status'</span>, <span class="number">0</span>)</span><br><span class="line">                -&gt;orWhere(<span class="string">'status'</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;)-&gt;get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>比較好的寫法是將or部分，寫成closure傳入<code>where()</code>，這比較符合物件導向與Eloquent風格。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>這3種寫法所產出的SQL都一樣，沒有執行效率問題。</li>
<li>實務上建議少使用<code>DB::raw()</code>或<code>whereRaw()</code>，可讀性較差，盡量使用Eloquent寫法。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52WhereAndOr_demo-" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[不使用whereRaw()也可以寫得出來]]>
    
    </summary>
    
      <category term="Eloquent" scheme="http://oomusou.io/tags/Eloquent/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用SQLite建立最簡單的Laravel開發環境?]]></title>
    <link href="http://oomusou.io/laravel/laravel-sqlite/"/>
    <id>http://oomusou.io/laravel/laravel-sqlite/</id>
    <published>2016-04-08T04:23:43.000Z</published>
    <updated>2016-04-11T02:44:54.000Z</updated>
    <content type="html"><![CDATA[<p>有很多方式可以建立Laravel開發環境，如MAMP、Homestead，但事實上我最近最常使用的是PHP內建HTTP server與SQLite，這是最簡單，也是最省電的開發環境。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.29<br>PhpStorm 2016.1</p>
<h2 id="建立Laravel專案">建立Laravel專案</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ composer create-project laravel/laravel Laravel52SQLite_demo --prefer-dist</span><br></pre></td></tr></table></figure>
<h2 id="建立SQLite資料庫">建立SQLite資料庫</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ cd database&#10;oomusou@mac:~/MyProject/database$ touch database.sqlite</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/laravel-sqlite/sqlite000.png" alt=""></p>
<p>在<code>database</code>目錄下，建立空的<code>database.sqlite</code>資料庫。</p>
<h2 id="修改-env">修改.env</h2><hr>
<p><strong>.env</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52SQLite_demo/commit/657be187128dd469887385d48d2706bd957fc8b2" target="_blank" rel="external">修改.env</a></span></span></span><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">APP_ENV=local</span><br><span class="line">APP_DEBUG=<span class="keyword">true</span></span><br><span class="line">APP_KEY=base64:Hv/GYT3Mz3PFWgj4cDnhGhHnkByhuNKUT9NKbGRIfu4=</span><br><span class="line">APP_URL=http:<span class="comment">//localhost</span></span><br><span class="line"></span><br><span class="line">DB_CONNECTION=sqlite</span><br><span class="line">DB_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DB_PORT=<span class="number">3306</span></span><br><span class="line"><span class="comment">#DB_DATABASE=homestead</span></span><br><span class="line">DB_USERNAME=homestead</span><br><span class="line">DB_PASSWORD=secret</span><br><span class="line"></span><br><span class="line">CACHE_DRIVER=file</span><br><span class="line">SESSION_DRIVER=file</span><br><span class="line">QUEUE_DRIVER=sync</span><br><span class="line"></span><br><span class="line">REDIS_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">REDIS_PASSWORD=<span class="keyword">null</span></span><br><span class="line">REDIS_PORT=<span class="number">6379</span></span><br><span class="line"></span><br><span class="line">MAIL_DRIVER=smtp</span><br><span class="line">MAIL_HOST=mailtrap.io</span><br><span class="line">MAIL_PORT=<span class="number">2525</span></span><br><span class="line">MAIL_USERNAME=<span class="keyword">null</span></span><br><span class="line">MAIL_PASSWORD=<span class="keyword">null</span></span><br><span class="line">MAIL_ENCRYPTION=<span class="keyword">null</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/laravel-sqlite/sqlite001.png" alt=""></p>
<p>第6行<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">DB_CONNECTION</span>=<span class="string">sqlite</span></span><br></pre></td></tr></table></figure></p>
<p>將資料庫連線改成<code>sqlite</code>。</p>
<p>第9行<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#DB_DATABASE=homestead</span></span><br></pre></td></tr></table></figure></p>
<p>將<code>DB_DATABASE</code>前面加加上<code>#</code>，將這行註解掉。</p>
<h2 id="執行Migration">執行Migration</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan migration</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/laravel-sqlite/sqlite002.png" alt=""></p>
<p>若能成功migration，表示Laravel已經抓到SQLite，並將資料順利migrate進<code>database.sqlite</code>。</p>
<h2 id="使用PhpStorm管理SQLite">使用PhpStorm管理SQLite</h2><hr>
<p>很多人猶豫該用什麼GUI工具管理SQLite，其實PhpStorm已經內建SQLite的管理工具。</p>
<p><strong> 新增Data Source </strong></p>
<p><img src="/images/laravel/laravel-sqlite/sqlite003.png" alt=""></p>
<p>按下右側的<code>Database</code>，再按下上方的<code>+</code>，選擇<code>Data Source form Path</code>。</p>
<p><strong> 選擇SQLite檔案 </strong></p>
<p><img src="/images/laravel/laravel-sqlite/sqlite004.png" alt=""></p>
<p>選擇剛剛建立的<code>database.sqlite</code>。</p>
<p><strong> 設定資料庫Driver </strong></p>
<p><img src="/images/laravel/laravel-sqlite/sqlite005.png" alt=""></p>
<p>選擇<code>Sqlite (Xerial)</code>。</p>
<p><strong> 下載SQLite Driver </strong></p>
<p><img src="/images/laravel/laravel-sqlite/sqlite006.png" alt=""></p>
<p>若PhpStorm還沒安裝過SQLite driver，會顯示<code>Download missing files</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>SQLite driver只要安裝一次即可，以後其他專案都不需再安裝。</span></span></span></p>
<p>按<code>Download</code>下載SQLite driver。</p>
<p><strong> 測試SQLite連線 </strong></p>
<p><img src="/images/laravel/laravel-sqlite/sqlite007.png" alt=""></p>
<p>按<code>Test Connection</code>測試SQLite連線。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite008.png" alt=""></p>
<p>連線成功。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite009.png" alt=""></p>
<p>PhpStorm的Database可以順利顯示預設的<code>users</code> table。</p>
<h2 id="使用PHP內建的HTTP_Server">使用PHP內建的HTTP Server</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/laravel-sqlite/sqlite010.png" alt=""></p>
<p>執行PHP內建的Http server。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite011.png" alt=""></p>
<p>成功執行Laravel在<code>http://localhost:8000/</code></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm內建支援SQLite，要管理SQLite不用再找其他GUI管理工具。</li>
<li>使用SQLite + <code>php artisan serve</code>方式，不需安裝MAMP或Homestead，只要有安裝PHP即可開發Laravel。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52SQLite_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[SQLite不只可以用在測試，也可以用來開發專案]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="SQLite" scheme="http://oomusou.io/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何讓PhpStorm在存檔時自動刪除whitespace?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-save-strip-whitespace/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-save-strip-whitespace/</id>
    <published>2016-04-07T04:23:43.000Z</published>
    <updated>2016-04-10T13:45:05.000Z</updated>
    <content type="html"><![CDATA[<p>有些公司會要求空白的一行也不能有whitespace，如Gerrit在空白行若有whitespace，會出現紅色警告，但PhpStorm預設換行會有whitespace，是否能自動幫我們在存檔時刪除whitespace呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PhpStorm 2016.1</p>
<h2 id="顯示Whitespace">顯示Whitespace</h2><p><img src="/images/phpstorm/phpstorm-save-strip-whitespace/whitespace000.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Editor -&gt; General -&gt; Appearance </em></strong></p>
<ul>
<li>將<code>Show whitespaces</code>與其下的<code>Leading</code>、<code>Inner</code>、與<code>Trailing</code>打勾。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-save-strip-whitespace/whitespace001.png" alt=""></p>
<p>設定完後，PhpStorm會以<code>.</code>顯示whitespace。</p>
<h2 id="存檔時自動刪除white_space">存檔時自動刪除white space</h2><p><img src="/images/phpstorm/phpstorm-save-strip-whitespace/whitespace002.png" alt=""></p>
<p>PhpStorm預設空白的一行，為了排版對齊，會幫你自動塞whitespace。</p>
<p><img src="/images/phpstorm/phpstorm-save-strip-whitespace/whitespace003.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Editor -&gt; General </em></strong></p>
<ul>
<li>將<code>Allow placement of caret after end of line</code>打勾。</li>
<li>將<code>Strip trailing spaces on Save</code>選<code>All</code>。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-save-strip-whitespace/whitespace004.png" alt=""></p>
<p>在寫code時，為了排版對齊，PhpStorm依然會幫你加上whitesapce。</p>
<p><img src="/images/phpstorm/phpstorm-save-strip-whitespace/whitespace005.png" alt=""></p>
<p>存檔後，whitespace可自動刪除。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>自動刪除whitespace後，檔案size會稍微小一點點，若有這個需求可參考本文的方式設定。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓PhpStorm也能如Sublime Text一樣存檔時刪除whitespace]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何測試 Repository 模式 (使用 SQLite)?]]></title>
    <link href="http://oomusou.io/tdd/tdd-repository-testing-sqlite/"/>
    <id>http://oomusou.io/tdd/tdd-repository-testing-sqlite/</id>
    <published>2016-04-04T15:23:43.000Z</published>
    <updated>2016-04-21T06:08:36.000Z</updated>
    <content type="html"><![CDATA[<p>一般我們會把資料庫邏輯寫在 repository，只要有邏輯，就需要去寫測試，畢竟我們寫的程式，可能跟我們想的不一樣。由於 repository 寫的是資料庫邏輯，所以勢必要真的去讀寫資料庫。但若真的去讀寫 MySQL，速度會比較慢，且資料庫本來就有一些資料，可能會影響測試的結果，因此比較理想的方式是測試時改讀寫 <a href="https://www.sqlite.org/inmemorydb.html" target="_blank" rel="external">SQLite In-Memory Database</a>。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.29<br>PHPUnit 4.8.24<br>PhpStorm 2016.1</p>
<h2 id="Repository模式">Repository模式</h2><hr>
<p>初學者常會商業邏輯與資料庫邏輯同時寫在 controller 內，如我們想將最新的 3 筆文章顯示在 view。<br><figure class="highlight php"><figcaption><span>app/Http/Controllers/PostsController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$posts</span> = Post::orderBy(<span class="string">'id'</span>, <span class="string">'desc'</span>)</span><br><span class="line">        -&gt;take(<span class="number">3</span>)</span><br><span class="line">        -&gt;get();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = compact(<span class="variable">$posts</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View(<span class="string">'posts.index'</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這段程式碼在執行上沒有問題，但在設計上有幾個問題 : </p>
<ol>
<li><p>違反 SOLID 的單一職責原則，controller 原本該有的職責應該是商業邏輯，但現在卻將資料庫邏輯直接寫在 controller 內，這已經超出原本 controller 的職責，將會導致日後 controller 過於肥大而難以維護。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>單一職責原則 : 應該且僅有一個原因引起 class 的變更。</span></span></span></p>
</li>
<li><p>將資料庫邏輯直接寫在 controller 內，將來若有不同 controller 使用相同的資料庫邏輯，將無法重複使用。</p>
</li>
<li><p>由於 controller 內直接使用 Eloquent，表示 controller 直接相依於<code>Post</code> model，若我們要對 controller 做單元測試，必須直接存取資料庫，這違反了隔離測試 ( isolated test ) 原則。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>Isolated Test : 1.執行速度快 2.關注點分離 3.單一職責 4.可測試性 5.測試程式的健壯性</span></span></span></p>
</li>
<li><p>為了隔離測試，我們會希望 mock 掉資料庫邏輯，然後透過依賴注入將 mock 物件注入 contoller，但在 controller 直接使用 model，導致無法使用依賴注入，因此無法執行單元測試。</p>
</li>
</ol>
<p>比較好的方式是使用 repository 模式，將資料庫邏輯從 controller 中獨立出來寫在 repository，透過依賴注入將 repository注入controller。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>詳細請參考<a href="/laravel/laravel-repository/">如何使用 Repository 模式?</a></span></span></span></p>
<p>使用 repository 模式有以下好處 : </p>
<ol>
<li><p>Repository 專心負責資料庫邏輯，符合單一職責原則，可避免 controller 過於肥大而難以維護。</p>
</li>
<li><p>資料庫邏輯從 controller 搬到 repository，因此不同的 controller 可以重複使用。</p>
</li>
<li><p>controller 不再直接相依於 model，而是透過依賴注入將 repository 注入 controller，符合依賴反轉原則，且測試時不用直接存取資料庫，達到隔離測試要求。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>依賴反轉原則 : 高階模組不該依賴低階模組，兩者都該依賴其抽象。抽象不要依賴細節，細節要依賴抽象。</span></span></span></p>
</li>
<li><p>單元測試時直接 mock 掉 repository 即可，並透過依賴注入將 repository 注入到 controller，不用特別去 mock Eloquent model。</p>
</li>
</ol>
<p>將資料庫邏輯從 controller 搬到 repository 之後，本文的重點就是討論該如何測試 repository 內的資料庫邏輯。</p>
<h2 id="Test_Factory_Generator">Test Factory Generator</h2><hr>
<p>Laravel 5 提出了 model factory，直接整合了 faker，讓我們在 seeding 與 testing 時更為方便，而 Test Factory Generator 會自動根據 migration 產生 model factory，讓我們連 model factory 都不用寫。</p>
<p><strong>安裝</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require mpociot/laravel-test-factory-helper --dev</span><br></pre></td></tr></table></figure>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo000.png" alt=""></p>
<p>使用 composer 安裝 Test Factory Generator，因為此套件只會在開發使用，可以加上 <code>--dev</code> 參數。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>關於 <code>--dev</code> 參數，詳細請參考<a href="/laravel/laravel-debugbar/#使用Composer安裝">如何使用 Laravel Debugbar #使用 Composer 安裝</a></span></span></span></p>
<p><strong>Service Provider</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mpociot\LaravelTestFactoryHelper\TestFactoryHelperServiceProvider::class,</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo001.png" alt=""></p>
<p>在 <code>config/app.php</code> 中加入 <code>TestFactoryHelperServiceProvider</code>。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/6ebe075d59e3b930302ab422d38e8dbcf0dc15f6" target="_blank" rel="external">安裝 Laravel Test Factory Generator</a></span></span></span></p>
<h2 id="建立_Model_與_Migration">建立 Model 與 Migration</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:model Post -m</span><br></pre></td></tr></table></figure>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo002.png" alt=""></p>
<p>建立 <code>Post</code> model 與 migration，<code>-m</code> 讓我們在建立 model 時一併建立 migrarion。</p>
<p>會在 <code>app</code> 目錄下建立 <code>Post.php</code>，並在 <code>database/migrations</code> 目錄建立 migration 檔。</p>
<p><strong> Post.php </strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/0c9456104b2c8053267bd7e7d668202365964706" target="_blank" rel="external">建立Post.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Post.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [</span><br><span class="line">        <span class="string">'title'</span>,</span><br><span class="line">        <span class="string">'description'</span>,</span><br><span class="line">        <span class="string">'content'</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 
<p>第7行<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="variable">$fillable</span> = [</span><br><span class="line">    <span class="string">'title'</span>,</span><br><span class="line">    <span class="string">'description'</span>,</span><br><span class="line">    <span class="string">'content'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<p>定義當使用 mass assignment 時可以被修改的欄位，進而保護其他欄位不被修改。</p>
<p><strong> create_posts_table.php </strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/ce3b7a7b14c7e06f73bb41921b08d4044c92f530" target="_blank" rel="external">建立create_posts_table.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>database/migrations/2015_10_14_113810_create_posts_table.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatePostsTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'title'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'description'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;text(<span class="string">'content'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::drop(<span class="string">'posts'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>13行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> Schema::create(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'title'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'description'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;text(<span class="string">'content'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>加入 <code>title</code>、<code>description</code> 與 <code>content</code> 3 個欄位。 </p>
<p><strong> 資料庫連線 </strong><br><img src="/images/tdd/tdd-repository-testing-sqlite/repo003.png" alt=""></p>
<p>將來 Test Factory Generator 必須連上資料庫才能產生 model factory，必須西確定專案已經與資料庫順利連線。</p>
<p><strong> 執行 Migrate </strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan migrate</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo004.png" alt=""></p>
<p>執行 migrate 將 table 建立在 MySQL。</p>
<h2 id="建立_Model_Factory">建立 Model Factory</h2><hr>
<p>測試 repository 時，將使用 model factory 幫我們建立測試資料。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan test-factory-helper:generate</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo005.png" alt=""></p>
<p>Test Factory Generator 幫我們自動建立 model factory。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/36ae5827b19db9d82f2681267b89aa8dbe6b3696" target="_blank" rel="external">建立Model Factory</a></span></span></span></p>
<h2 id="新增_SQLite_In-Memory_連線">新增 SQLite In-Memory 連線</h2><hr>
<p>因為實際讀寫 MySQL 較慢，所以在單元測試時，會改用 SQLite In-Memory，速度快很多。</p>
<p><strong>新增資料庫連線</strong><br><strong>database.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/55deb06485331b3ca622d14cac3cdebee57f9237" target="_blank" rel="external">新增sqlite_testing資料庫連線</a></span></span></span><br><figure class="highlight php"><figcaption><span>config/database.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'sqlite_testing'</span> =&gt; [</span><br><span class="line">    <span class="string">'driver'</span> =&gt; <span class="string">'sqlite'</span>,</span><br><span class="line">    <span class="string">'database'</span> =&gt; <span class="string">':memory:'</span>,</span><br><span class="line">    <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo006.png" alt=""></p>
<p><strong>修改phpunit.xml</strong><br><strong>phpunit.xml</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/924cf3e87e2adb8d92af61e42fadb94877855b26" target="_blank" rel="external">在 phpunit.xml 新增 DB_CONNECTION</a></span></span></span><br><figure class="highlight xml"><figcaption><span>phpunit.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">phpunit</span> <span class="attribute">backupGlobals</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">backupStaticAttributes</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">bootstrap</span>=<span class="value">"bootstrap/autoload.php"</span></span><br><span class="line">         <span class="attribute">colors</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertErrorsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertNoticesToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertWarningsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">processIsolation</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">stopOnFailure</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">testsuites</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">testsuite</span> <span class="attribute">name</span>=<span class="value">"Application Test Suite"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">"Test.php"</span>&gt;</span>./tests<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">testsuite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">testsuites</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">whitelist</span> <span class="attribute">processUncoveredFilesFromWhitelist</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">".php"</span>&gt;</span>./app<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">file</span>&gt;</span>./app/Http/routes.php<span class="tag">&lt;/<span class="title">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">whitelist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"sqlite_testing"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">phpunit</span>&gt;</span></span><br></pre></td></tr></table></figure> </p>
<p>24行<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"sqlite_testing"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可在此建立 <code>APP_ENV</code> 為 <code>testing</code> 時的全域變數。</p>
<p>設定 <code>DB_CONNECTION</code> 為 <code>sqlite_testing</code>，當跑測試時，將會使用 <code>sqlite_testing</code> 資料庫連線。</p>
<h2 id="測試_SQLite_In-Memory_連線">測試 SQLite In-Memory 連線</h2><hr>
<p><code>ExampleTest.php</code> 為 Laravel 預設的測試範例，其中包含了 <code>testBasicExample()</code>，示範了如何測試預設的 <code>welcome.blade.php</code> 是否正確執行。</p>
<p><strong>ExampleTest.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/590adfc679abfedc9bed03c5abfaa861ce797ad5" target="_blank" rel="external">測試 SQLite In-Memory 連線</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/ExampleTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Artisan</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        Artisan::call(<span class="string">'migrate'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A basic functional test example.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testBasicExample</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/'</span>)</span><br><span class="line">             -&gt;see(<span class="string">'Laravel 5'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 測試<span class="title">SQLiteInMemory</span>連線<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = Post::all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertCount(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>第6行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    Artisan::call(<span class="string">'migrate'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新增了 <code>setUp()</code>，當每個測試案例執行時，都會執行 <code>setUp()</code>，因此可將需要初始化的行為寫在 <code>setUp()</code>。<span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>事實上 <code>setUp()</code> 定義在 Laravel 的 <code>Illuminate\Foundation\Testing\TestCase</code> 裡，我們在此是去 override 其原本的<code>setUp()</code>，在 PhpStorm 可以使用熱鍵&#8963; + O呼叫 Choose methods to override 選單，選擇<code>setUp()</code>來 override，不需自己 key in。</span></span></span></p>
<p>因為目前測試使用的是 SQLite In-Memory，每個測試案例行完後，SQLite 就會釋放在記憶體中的資料庫，因此每個測試案例執行前，都必須重新執行一次 migration。</p>
<p><code>Artisan::call(&#39;migrate&#39;)</code>就相當於我們下了<code>php artisan migrate</code>。</p>
<p>24行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@test</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 測試<span class="title">SQLiteInMemory</span>連線<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = Post::all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertCount(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於只是測試連線是否成功，尚未跑 model factory，因此預期 <code>Post</code> model 的資料筆數為 <code>0</code>。</p>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo007.png" alt=""></p>
<p>實際跑測試，<span class="label label-success">綠燈</span> 表示連線成功。<span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>關於如何在 PhpStorm 跑單元測試，詳細請參考<a href="/phpstorm/phpstorm-debug-testing/">如何使用 PhpStorm 測試與除錯?</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  為什麼不需在 tearDown() 下 Artisan::call('migrate:reset')?</div>
<p>因為 SQLite In-Memory，只要資料庫連線一斷，SQLite 會自動釋放記憶體，也就是說，當每個測試案例執行結束時，因為資料庫連線斷線，資料庫就會被釋放，因此不需再下 migration reset。</p>
<h2 id="以_TDD_建立_Repository">以 TDD 建立 Repository</h2><hr>
<p>之前的所有動作都只是為了建立 repository 的測試環境，接下來將以 TDD 的方式建立 <code>PostRepository</code>。</p>
<p><strong>建立 PostRepository 的單元測試</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:test Unit/Repositories/PostRepositoryTest</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo008.png" alt=""></p>
<p><strong>PostRepositoryTest.php</strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/9087fa67c626e0890a31434633cfbb2ef6b2c395" target="_blank" rel="external">建立PostRepositoyTest.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/Repositories/PostRepositoryTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">WithoutMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseTransactions</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepositoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A basic test example.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testExample</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>將 <code>PostRepositoryTest.php</code> 建立在 <code>tests/Unit/Repositories</code> 目錄下。</p>
<p>實務上測試分 3 種，有<strong>單元測試</strong>，<strong>整合測試</strong>與<strong>驗收測試</strong>。</p>
<p>Repository 測試屬於單元測試，故建立在 <code>Unit</code> 目錄下，將來還有 <code>Integration</code> 目錄放整合測試，與 <code>Acceptance</code> 放驗收測試。</p>
<p>所建立的 <code>PostRepositoryTest</code> 也繼承於 <code>TestCase</code>。</p>
<p><strong>重構 setUp()</strong><br>之前在 <code>ExampleTest.php</code> 的 <code>setUp()</code> 曾經下 <code>php artisan migrate</code>，在每個測試案例執行時，都會重新執行一次 migration。</p>
<p>但該 <code>setUp()</code> 只寫在 <code>ExampleTest.php</code>，就只有在該檔案中的測試案例執行時才有效。</p>
<p>但目前我們希望所有的 repository 測試都有效，因為全部的測試都繼承於 <code>TestCase</code>，所以將 <code>setUp()</code> pull members up到<code>TestCase</code>，則每個測試案例執行時，都會重新跑一次 migration。</p>
<p><strong>TestCase.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/67b27cba892e1a6c0d320864ca8312ce215e2d99" target="_blank" rel="external">重構setUp()</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/TestCase.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Artisan</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCase</span> <span class="keyword">extends</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The base URL to use while testing the application.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$baseUrl</span> = <span class="string">'http://localhost'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates the application.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Foundation\Application</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createApplication</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$app</span>-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$app</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        Artisan::call(<span class="string">'migrate'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>26行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    Artisan::call(<span class="string">'migrate'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 <code>ExampleTest.php</code> 的 <code>setUp()</code> pull members up 到 <code>TestCase.php</code>。</p>
<p><strong>最新 3 筆文章</strong><br>TDD 要我們先寫測試再寫程式，在 <code>PostRepository</code> 實作抓最新的 3 筆文章前，必須先將其測試先寫好。</p>
<p><strong>PostRepositoryTest.php</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/00aeae0e62f4e77db5e46181f6b9e301b77d2d7c" target="_blank" rel="external">建立最新3筆文章</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>tests/Unit/Repositories/PostRepositoryTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepositoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 最新3筆文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">100</span>)-&gt;create();</span><br><span class="line">        <span class="variable">$target</span> = App::make(PostRepository::class);</span><br><span class="line">        <span class="variable">$expected</span> = <span class="keyword">new</span> Collection([</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">99</span>,</span><br><span class="line">            <span class="number">98</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;getLatest3Posts()-&gt;pluck(<span class="string">'id'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 
<p><strong>Arrange</strong><br>負責建立要測試的資料，因為我們想要抓最新 3 筆文章，所以先使用 model factory 新增 100 筆測試資料進 SQLite in-Memory。</p>
<p>建立 <code>$target</code> 待測物件，一律使用 <code>App::make()</code> 建立物件，不再使用<code>new</code>建立物件。</p>
<p>建立 <code>$expected</code>，也就我們預期會傳回最新 3 筆文章的結果，因為要測試的重點在於最新 3 筆文章，其他欄位如 <code>title</code>、<code>sub_title</code> 與 <code>content</code> 因為都是使用 <code>faker</code> 建立，無法測試，所以我們只在乎 <code>id</code> 欄位是否如我們預期。</p>
<p><strong>Act</strong><br>實際執行 <code>$target</code> 的 <code>getLatest3Posts()</code>，由於我們只想測試 <code>id</code> 欄位的值，所以使用 <code>pluck()</code> 只傳回 <code>id</code> 欄位的資料進 <code>$actual</code>。</p>
<p><strong>Assert</strong><br>使用 PHPUnit 的 <code>assertEquals()</code>，判斷 <code>$expected</code> 與 <code>$actual</code> 是否相等，若相等則 <span class="label label-success">綠燈</span>，不相等則 <span class="label label-danger">紅燈</span>。</p>
<p><strong>執行測試</strong><br><img src="/images/tdd/tdd-repository-testing-sqlite/repo009.png" alt=""></p>
<p>得到第 1 個 <span class="label label-danger">紅燈</span> : <code>PostRepository</code> 不存在，因為我們還沒有建立。</p>
<p>事實上 PhpStorm 也將 <code>PostRepository</code> 反白，警告我們 <code>PostRepository</code> 並不存在。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/a139dd31761967e5f61c036ff0ad5976bf71e041" target="_blank" rel="external">建立PostRepository.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo010.png" alt=""></p>
<p>補上 <code>PostRepository.php</code> 後，繼續執行測試。</p>
<p>得到第 2 個 <span class="label label-danger">紅燈</span> : <code>getLatest3Posts()</code> 不存在，因為我們還沒有建立。</p>
<p>事實上 PhpStorm 也將 <code>getLatest3Posts()</code> 反白，警告我們 <code>getLatest3Posts()</code> 並不存在。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/e0ffcb142eb91c8f068fb9095e1251e75a505488" target="_blank" rel="external">建立 getLatest3Posts()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo011.png" alt=""></p>
<p>補上 <code>getLatest3Posts()</code> 後，繼續執行測試。</p>
<p>得到第 3 個 <span class="label label-danger">紅燈</span> : 對 <code>null</code> 物件呼叫 <code>pluck()</code>，因為我們還沒回傳 collection。</p>
<p>事實上 PhpStorm也將<code>pluck()</code> 反白，警告我們 <code>getLatest3Posts()</code> 並不是回傳 collection。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo/commit/a06819d67f0899e053012a787df81d72edce6865" target="_blank" rel="external">回傳 collection</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::orderBy(<span class="string">'id'</span>, <span class="string">'desc'</span>)</span><br><span class="line">            -&gt;take(<span class="number">3</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/tdd/tdd-repository-testing-sqlite/repo012.png" alt=""></p>
<p>在 <code>getLatest3Posts()</code> 補上 query 後回傳 collection 後，繼續執行測試。</p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>。</p>
<p>隨著 <span class="label label-success">綠燈</span> 的出現，我們也完成了 repository。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>TDD 的開發流程就是 寫測試 -&gt; <span class="label label-danger">紅燈</span> -&gt; 寫程式 -&gt; <span class="label label-success">綠燈</span> -&gt; 重構 -&gt;<span class="label label-success">綠燈</span> -&gt; 重構…-&gt; <span class="label label-success">綠燈</span>，所以測試時看到 <span class="label label-danger">紅燈</span> 不要怕，只要趕快寫程式讓他 <span class="label label-success">綠燈</span> 即可。</li>
<li>本文結合 Laravel 與 PHPUnit，以 TDD 方式建立 repository，並搭配 Test Factory Generator、SQLite In-Memory 與 PhpStorm，讓 repository 測試更為簡單。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52RepositoryTesting_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 SQLite In-Memory 與 Test Factory Generator 測試 Repository]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="SQLite" scheme="http://oomusou.io/tags/SQLite/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在PhpStorm將if else重構成switch case?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-if-switch/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-if-switch/</id>
    <published>2016-03-23T12:23:43.000Z</published>
    <updated>2016-04-05T01:27:30.000Z</updated>
    <content type="html"><![CDATA[<p>將<code>if else</code>轉成<code>switch case</code>雖然不算重構，但轉成<code>switch case</code>之後，程式可讀性較高，且通常可以讓人聯想到下一步重構技巧，如Replace Type with State/Strategy，在PhpStorm 2016.1版中，新增了此項重構，非常實用。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PhpStorm 2016.1</p>
<h2 id="if_else">if else</h2><hr>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTotalPrice</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$totalPrice</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;orders <span class="keyword">as</span> <span class="variable">$order</span>) &#123;</span><br><span class="line">        <span class="variable">$price</span> = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span>-&gt;getMovie()-&gt;getType() == <span class="string">'Regular'</span>) &#123;</span><br><span class="line">            <span class="variable">$price</span> += <span class="number">100</span>;</span><br><span class="line">            <span class="variable">$price</span> += (<span class="variable">$order</span>-&gt;getDays() - <span class="number">7</span>) * <span class="number">10</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$order</span>-&gt;getMovie()-&gt;getType() == <span class="string">'NewRelease'</span>) &#123;</span><br><span class="line">            <span class="variable">$price</span> += <span class="number">150</span>;</span><br><span class="line">            <span class="variable">$price</span> += (<span class="variable">$order</span>-&gt;getDays() - <span class="number">3</span>) * <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> (<span class="variable">$order</span>-&gt;getMovie()-&gt;getType() == <span class="string">'Children'</span>) &#123;</span><br><span class="line">            <span class="variable">$price</span> += <span class="number">40</span>;</span><br><span class="line">            <span class="variable">$price</span> += (<span class="variable">$order</span>-&gt;getDays() - <span class="number">7</span>) * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$totalPrice</span> += <span class="variable">$price</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$totalPrice</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如以上程式，<code>if else</code>是根據<code>$order-&gt;getMovie()-&gt;getType()</code>判斷，這個可以用<code>switch case</code>改寫，可讀性會更高。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>事實上這段程式是<a href="/phpstorm-tdd-refactor/#if_else改成switch">如何使用PhpStorm實現TDD、重構與偵錯?</a>的範例，當時將<code>if else</code>轉成<code>switch case</code>是用手工做，因為當時的PhpStorm 10.0.3還沒有<code>if else</code>重構成<code>switch case</code>功能。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-if-switch/switch000.png" alt=""></p>
<p>將游標放在<code>if</code>前面，按熱鍵&#8997; + &#8617;    ，發現只有看到<code>Flip if-else</code>功能，不是可以轉成<code>switch case</code>嗎?</p>
<h2 id="Extract_Variable">Extract Variable</h2><hr>
<p><img src="/images/phpstorm/phpstorm-if-switch/switch001.png" alt=""></p>
<p>因為<code>if()</code>內目前為method，目前PhpStorm還無法對此種寫法重構成<code>switch case</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>理論上應該要可以，或許未來PhpStorm版本會支援。</span></span></span></p>
<p>必須先將此method使用Extract Variable提煉成變數。</p>
<p>選擇<code>$order-&gt;getMovie()-&gt;getType()</code>，按熱鍵&#8963; + T，出現Refactor This選單，選擇Variable。</p>
<p><img src="/images/phpstorm/phpstorm-if-switch/switch002.png" alt=""></p>
<p>PhpStorm自動幫我們將變數取名為<code>type</code>，可自行修改。</p>
<p>將<code>Replace all occurences</code>打勾，因為我們要將全部<code>if()</code>與<code>elseif()</code>都使用變數取代。</p>
<p><img src="/images/phpstorm/phpstorm-if-switch/switch003.png" alt=""></p>
<p><code>if()</code>與<code>elseif()</code>都使用<code>$type</code>取代了。</p>
<h2 id="switch_case">switch case</h2><hr>
<p><img src="/images/phpstorm/phpstorm-if-switch/switch004.png" alt=""></p>
<p>在將游標放在<code>if</code>之前，按熱鍵&#8997; + &#8617;，出現了<code>Replace if with switch</code>。</p>
<p><img src="/images/phpstorm/phpstorm-if-switch/switch005.png" alt=""></p>
<p>程式從原本的<code>if else</code>重構成<code>switch case</code>了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>目前PhpStorm要將<code>if else</code>重構成<code>switch case</code>時，有2個限制 :<ul>
<li><code>if ()</code>內必須為變數，所以可能需要先搭配Extract Variable。</li>
<li>判斷式必須為<code>==</code>，不可以是<code>===</code>。</li>
</ul>
</li>
<li>也可以將<code>switch case</code>轉成<code>if else</code>，方法完全一樣。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[將if else重構成可讀性較高的switch case]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在OS X安裝Laravel前端開發環境?]]></title>
    <link href="http://oomusou.io/laravel/elixir/elixir-nodejs/"/>
    <id>http://oomusou.io/laravel/elixir/elixir-nodejs/</id>
    <published>2016-03-22T12:23:43.000Z</published>
    <updated>2016-04-04T07:24:43.000Z</updated>
    <content type="html"><![CDATA[<p>Laravel雖然為後端framework，但提供了Laravel Elixir整合了很多好用前端工具，其基於3個更基本的前端工具 : <strong>Node.js</strong>、<strong>NPM</strong>與<strong>Gulp</strong>，這三個必須先搞定後，才能享受Laravel Elixir所帶來的便利。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.23<br>Homestead 0.4.2<br>Node.js 5.7<br>NPM 3.6<br>Gulp 3.9.1</p>
<h2 id="版本考量">版本考量</h2><hr>
<p>Node.js版本更新迅速，裝最新版Node.js不見得是好事，因為 :</p>
<ol>
<li>我們主要目的是使用Laravel Elixir，而不是開發Node.js應用程式。</li>
<li>Laravel Elixir整合了很多Node.js套件，這些套件或工具的更新速度不見得跟得上最新版的Node.js更新速度。</li>
</ol>
<p>因此Laravel Elixir穩定最重要，一味著更新Node.js，反而會造成Laravel Elixir出現未知的問題。</p>
<p>實務上有2種使用Laravel Elixir方式 :</p>
<ol>
<li><strong>直接使用Homestead</strong> : Homestead已經幫你裝好Node.js、NPM與Gulp，不用擔心版本問題。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若想直接在Homestead內使用前端工具，詳細請參考<a href="/laravel/homestead/homestead-osx/">如何在OS X安裝Homestead?</a></span></span></span></li>
<li><strong>參考Homestead的版本</strong> : 參考Homestead的Node.js、NPM與Gulp版本，將相同的版本安裝在OS X。</li>
</ol>
<p>本文參考的是Homestead 0.4.2，其版本為 :</p>
<ol>
<li>Node.js 5.7</li>
<li>NPM 3.6</li>
<li>Gulp 3.9.1</li>
</ol>
<h2 id="安裝Homebrew">安裝Homebrew</h2><hr>
<p>Homebrew為OS X最流行的套件管理工具，我們將使用Homebrew安裝NVM。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ /usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;</span><br></pre></td></tr></table></figure>
<h2 id="安裝NVM">安裝NVM</h2><hr>
<p>NVM全名為Node Version Manager，我們將使用NVM安裝Node.js，並使用NVM切換Node.js版本。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ brew install nvm</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-nodejs/node000.png" alt=""></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  為什麼需要切換Node.js版本呢?</div>
<p>因為Node.js版本更新快速，你用的套件或工具可能來不及支援新版Node.js，因此實務上有可能必須切換到舊版本的Node.js，才能使用該套件或工具。</p>
<h2 id="安裝Node-js與NPM">安裝Node.js與NPM</h2><hr>
<p>目前前端工具大部分都基於Node.js，其優點是執行速度快，又有跨平台的優勢。</p>
<p>NPM全名為Node Package Manager，為Node.js的套件管理工具，類似PHP的Composer角色。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ nvm install 5.7</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-nodejs/node001.png" alt=""></p>
<p>安裝Node.js 5.7。</p>
<p><strong>確認Node.js版本</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ node -v</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/elixir/elixir-nodejs/node002.png" alt=""></p>
<p><strong>確認NPM版本</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ npm -v</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/elixir/elixir-nodejs/node003.png" alt=""></p>
<h2 id="安裝Gulp">安裝Gulp</h2><hr>
<p>Gulp為前端自動化管理工具，Laravel Elixir就是Gulp的再次封裝。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ npm install -g gulp@3.9.1</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-nodejs/node004.png" alt=""></p>
<p>安裝Gulp 3.9.1。</p>
<p><strong>-g</strong> : 因為每個專案都會用到Gulp，因此將Gulp安裝在global區。</p>
<p><strong>確認Gulp版本</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ gulp -v</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/elixir/elixir-nodejs/node005.png" alt=""></p>
<h2 id="安裝Laravel_Elixir">安裝Laravel Elixir</h2><hr>
<p>Laravel Elixir整合了眾多前端工具，讓你不用自己寫Gulp就可達到前端自動化。</p>
<p><strong>建立Laravel專案</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ composer create-project laravel/laravel Laravel52Elixir --prefer-dist</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/elixir/elixir-nodejs/node007.png" alt=""></p>
<p>使用Composer建立Laravel專案。</p>
<p><strong>安裝Laravel Elixir</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ npm install</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/elixir/elixir-nodejs/node008.png" alt=""></p>
<p>安裝Laravel Elixir與前端工具。</p>
<p><strong>測試Laravel Elixir</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/elixir/elixir-nodejs/node011.png" alt=""></p>
<p>右上角顯示<code>Saas Compiled</code>，表示Node.js、NPM、Gulp與Laravel Elixir安裝成功。</p>
<h2 id="Appendix">Appendix</h2><hr>
<p>若將來需要切換Node.js版本，可參考以下方式 :</p>
<h3 id="切換Node-js版本">切換Node.js版本</h3><p><strong>顯示Node.js所有版本</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ nvm list</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/elixir/elixir-nodejs/node006.png" alt=""></p>
<p>目前顯示OS X除了剛裝的Node.js 5.7外，還有0.12版，且預設為0.12。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>新安裝Node.js不會有兩個版本，此為特別示範如何切換Node.js版本。</span></span></span></p>
<p><strong>切換目前Node.js版本</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ nvm use 5.7</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/elixir/elixir-nodejs/node009.png" alt=""></p>
<p>將目前Node.js切換到5.7。</p>
<h3 id="設定Node-js預設版本">設定Node.js預設版本</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ nvm alias default 5.7</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-nodejs/node010.png" alt=""></p>
<p>以後整個OS X的Node.js預設版本就是5.7。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Laravel Elixir提供了很多前端開發工具，本文只是Laravel Elixir的起手式，將難搞的Node.js、NPM與Gulp先在OS X搞定。</li>
<li>當Laravel Elixir安裝失敗時，可以參考Homestead的Node.js、NPM與Gulp版本，就算不使用Homestead開發，也可以把Homestead當成golden sample參考。</li>
<li>若遇到某些套件與工具只能搭配特定Node.js版本，別忘了使用NVM切換Node.js版本。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用Laravel Elixir自動化前端開發]]>
    
    </summary>
    
      <category term="Elixir" scheme="http://oomusou.io/tags/Elixir/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="NPM" scheme="http://oomusou.io/tags/NPM/"/>
    
      <category term="Node.js" scheme="http://oomusou.io/tags/Node-js/"/>
    
      <category term="OS X" scheme="http://oomusou.io/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何根據Checkbox選取與否決定Button的Enable?]]></title>
    <link href="http://oomusou.io/vuejs/vuejs-checkbox-button-disable/"/>
    <id>http://oomusou.io/vuejs/vuejs-checkbox-button-disable/</id>
    <published>2016-03-21T12:23:43.000Z</published>
    <updated>2016-03-22T14:26:08.000Z</updated>
    <content type="html"><![CDATA[<p>實務上GUI常需要做一些防呆，如勾選了<strong>I agree</strong>的之後，button才能enable，否則為disable；又如若完全沒有選擇任何產品時，button為disable，只要選擇了一個以上的產品，button為enable，這在Vue.js是否有不同的作法呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Vue.js 1.0.18</p>
<h2 id="單一Checkbox">單一Checkbox</h2><hr>
<p></p><p data-height="120" data-theme-id="0" data-slug-hash="mVNVrL" data-default-tab="result" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/mVNVrL/" target="_blank" rel="external">Vue.js Checkbox and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>預設button為disable，當勾選了<code>I Agree</code>之後，button變成enable。</p>
<p></p><p data-height="200" data-theme-id="0" data-slug-hash="mVNVrL" data-default-tab="html" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/mVNVrL/" target="_blank" rel="external">Vue.js Checkbox and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>HTML很簡單，只有checkbox與button。</p>
<p>要給Vue.js管理的<code>&lt;div&gt;</code>，要加上<code>id</code>。</p>
<p>checkbox使用了<code>v-model</code>與<code>checked</code>做data binding，<code>v-model</code>為Vue.js自己的directive。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>凡<code>v-</code>開頭的屬性皆為Vue.js所提供的directive。</span></span></span></p>
<p>button直接將<code>disable</code>屬性與<code>checked</code>做data binding，<code>:</code>為Vue.js所擴充的符號，表示將HTML屬性做data binding。</p>
<ul>
<li>當勾選了checkbox時，checked為1，也就是true，加了<code>!</code>為false，為<code>disabled=false</code>，也就是enable。</li>
<li>當不勾選checkbox時，checked為0，也就是false，加了<code>!</code>為true，為<code>disabled=true</code>，也就是disable。</li>
</ul>
<p></p><p data-height="200" data-theme-id="0" data-slug-hash="mVNVrL" data-default-tab="js" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/mVNVrL/" target="_blank" rel="external">Vue.js Checkbox and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p><code>el</code>指定Vue.js所掌管的<code>&lt;div&gt;</code>區塊的<code>id</code>。</p>
<p><code>data</code>列出了<code>checked</code>變數，也就是要做data binding的變數。</p>
<h2 id="多個Checkbox">多個Checkbox</h2><hr>
<p></p><p data-height="180" data-theme-id="0" data-slug-hash="LNWOmq" data-default-tab="result" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/LNWOmq/" target="_blank" rel="external">Vue.js Checkboxs and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>預設button為disable，當勾選任意checkbox後，button變成enable，若沒勾選任checkbox，則button又變為disable。</p>
<p></p><p data-height="310" data-theme-id="0" data-slug-hash="LNWOmq" data-default-tab="html" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/LNWOmq/" target="_blank" rel="external">Vue.js Checkboxs and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>HTML很簡單，只有多個checkbox與button。</p>
<p>3個checkbox的<code>v-model</code>都與相同的<code>checked</code>做data binding，不過此時<code>checked</code>為陣列。</p>
<p>button直接將<code>disable</code>屬性與<code>checked</code>做data binding。</p>
<ul>
<li>當勾選了多個checkbox時，checked陣列的length大於0，為true，加了<code>!</code>為false，為<code>disabled=false</code>，也就是enable。</li>
<li>當沒勾選任何checkbox時，checked陣列的length等於0，為false，加了<code>!</code>為true，為<code>disabled=true</code>，也就是disable。</li>
</ul>
<p></p><p data-height="200" data-theme-id="0" data-slug-hash="LNWOmq" data-default-tab="js" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/LNWOmq/" target="_blank" rel="external">Vue.js Checkboxs and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>JavaScript非常精簡，與單一checkbox的差別只有<code>false</code>改成<code>[]</code>，完全不用寫任何邏輯判斷，也不用處理任何event。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Vue.js的思維與jQuery不同，寫jQuery需要思考的是<strong>event</strong>，但寫Vue.js需思考的是<strong>data</strong>，透過data binding，我們可以將邏輯放在處理data，而不是如jQuery是在處理DOM，因此Vue.js的程式非常精簡。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="http://codepen.io/oomusou/" target="_blank" rel="external">CodePen</a>上找到。</p>
<ul>
<li><a href="http://codepen.io/oomusou/pen/mVNVrL" target="_blank" rel="external">單一Checkbox</a></li>
<li><a href="http://codepen.io/oomusou/pen/LNWOmq" target="_blank" rel="external">多個Checkbox</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[以Data Driven的方式使用Vue.js]]>
    
    </summary>
    
      <category term="Vue.js" scheme="http://oomusou.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何一個專案使用一個Homestead?]]></title>
    <link href="http://oomusou.io/laravel/homestead/homestead-per-project/"/>
    <id>http://oomusou.io/laravel/homestead/homestead-per-project/</id>
    <published>2016-03-20T01:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>傳統上都是在系統只安裝一個Homestead，然後每個專案設定不同站台，各專案共用同一個資料庫。這種方式大體上也沒什麼問題，但有時若想測試一些東西，如安裝Facebook的XHProf + XHGUI，將這些測試用的東西安裝在開發用的Homestead似乎不妥，因此最理想的方式是每個專案有自己的Homestead，各專案可以安裝自己所需的元件，而不影響其他專案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.23<br>Homestead 0.4.2<br>OS X 10.11.3</p>
<h2 id="Prerequisite">Prerequisite</h2><hr>
<p>在OS X已經成功安裝好Homestead。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>詳細請參考<a href="/laravel/homestead/homestead-osx/">如何在OS X安裝Homestead?</a></span></span></span></p>
<h2 id="安裝laravel/homestead套件">安裝laravel/homestead套件</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require laravel/homestead --dev</span><br></pre></td></tr></table></figure>
<p>在專案目錄下安裝<code>laravel/homestead</code>套件，這是Laravel官方的套件，不過目前並沒有放進Laravel 5.2內，需另外自行安裝。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using version ^3.0 for laravel/homestead&#10;./composer.json has been updated&#10;Loading composer repositories with package information&#10;Updating dependencies (including require-dev)&#10;  - Installing laravel/homestead (v3.0.2)&#10;    Downloading: 100%&#10;&#10;Writing lock file&#10;Generating autoload files&#10;&#62; php artisan clear-compiled&#10;&#62; php artisan optimize&#10;Generating optimized class loader</span><br></pre></td></tr></table></figure>
<h2 id="建立Homestead設定檔">建立Homestead設定檔</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php vendor/bin/homestead make</span><br></pre></td></tr></table></figure>
<p>在目前目錄下建立<code>Vagrantfile</code>與<code>Homestead.yaml</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Homestead Installed!</span><br></pre></td></tr></table></figure>
<p>傳統我們還可能需要修改<code>Homestead.yaml</code>的shared folder，但因為Homestead目前只用在一個專案，所以預設值都已經設定好了，不必修改。</p>
<h2 id="啟動Homestead">啟動Homestead</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ vagrant up</span><br></pre></td></tr></table></figure>
<p>接著Homestead就正常啟動了，剩下的用法跟你之前熟悉的Homestead完全一樣。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  由於Homestead會在~/VirtualBox VMs目錄下建立與專案目錄名稱相同的目錄放置VM，所以唯一的限制是專案目錄名稱不能重複，否則vagrant up會失敗。</div>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於每個專案都有自己的VM，優點是非常乾淨，缺點是非常浪費磁碟空間。</li>
<li>由於每個專案都有自己的VM，當切換到其他專案時，記得要先將目前Homestead <code>vagrant halt</code>關機，然後再將另一個專案的Homestead <code>vagrant up</code>開機。</li>
<li>由於每個專案都有自己的VM，所以測試用的專案可以隨時<code>vagrant destroy --force</code>掉，不會影響正式開發的Homestead。</li>
<li>實務上非常推薦這種使用方式，可以將不同專案的side effect降到最低。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/HomesteadPerProject_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[再也不用擔心專案A安裝的元件會影響到專案B了]]>
    
    </summary>
    
      <category term="Homestead" scheme="http://oomusou.io/tags/Homestead/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在OS X安裝Homestead?]]></title>
    <link href="http://oomusou.io/laravel/homestead/homestead-osx/"/>
    <id>http://oomusou.io/laravel/homestead/homestead-osx/</id>
    <published>2016-03-17T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>初學者因為Laravel環境難安裝而卡很久嗎?Laravel官方已經幫我們將整個環境用VM打包好，讓初學者可以不用擔心如何在OS X安裝PHP、Composer、Nginx、MySQL，就可快速地享受Laravel所帶來的便利。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.23<br>Homestead 0.4.2<br>VirtualBox for OS X 5.0.16<br>Vagrant for OS X 1.8.1<br>OS X 10.11.3</p>
<h2 id="簡介">簡介</h2><hr>
<p>Homestead是Laravel官方以Vagrant為基礎建立的VM，已經幫我們安裝好以下軟體 :</p>
<ul>
<li><strong>Ubuntu 14.04</strong> : 2014年所推出的Ubuntu LTS版本。</li>
<li><strong>PHP 7.0.3</strong> : PHP最新版，已經更新到PHP 7，符合Laravel 5.2對PHP版本要求，且所需extension已經裝好。</li>
<li><strong>Composer</strong>：PHP套件管理工具，會在每次Homestead啟動時自動更新。</li>
<li><strong>HHVM</strong> : Facebook對PHP的JIT compiler支援。</li>
<li><strong>Nginx</strong> : 效能較Apache優異的Web server。</li>
<li><strong>MySQL</strong> : 關聯式資料庫 (預設)。</li>
<li><strong>Postgres</strong> : 關聯式資料庫。</li>
<li><strong>Node.js</strong><ul>
<li><strong>Bower</strong> : CSS、JavaScript套件管理工具。</li>
<li><strong>Npm</strong> : Node.js套件管理工具。</li>
<li><strong>Grunt</strong> : JavaScript壓縮、測試、部署工具。</li>
<li><strong>Gulp</strong> : JavaScript環境管理工具。</li>
</ul>
</li>
<li><strong>Redis</strong> : 非關聯式的Key-Value資料庫。</li>
<li><strong>Memcached</strong> : 非關聯式的Key-Value資料庫。</li>
<li><strong>Beanstalkd</strong> : Job Queue Server。</li>
<li><strong>Laravel Envoy</strong> : Laravel官方提供的任務執行工具。</li>
<li><strong>Fabric + HipChat extension</strong> : log管理工具。</li>
<li><strong>Blackfire Profiler</strong> : 效能評估工具。</li>
</ul>
<p>這些工具當然可以自己慢慢裝，但需要時間，還可能遇到軟體相衝的問題，就算安裝完沒錯誤訊息，也不保證能正確執行Laravel。</p>
<p>Laravel官方已經將這些軟體都幫你安裝好、測試好並打包好，這就是Homestead。</p>
<h2 id="Why_Homestead?">Why Homestead?</h2><hr>
<ul>
<li>不再因為你的PHP缺少某個extension，而導致Laravel安裝失敗。</li>
<li>不再因為軟體相衝或port相衝，而使得Laravel執行錯誤。</li>
<li>不再因為要安裝與設定軟體，而浪費一整天的時間。</li>
<li>不再因為你換了一個作業系統，而必須重新打造整個Laravel環境。</li>
<li>不再因為團隊中每個人的環境不統一，而造成debug困難。</li>
</ul>
<p>Homestead是Laravel爸爸Taylor Otwell親手打造，也是Laravel開發測試時所使用的環境，若遇到bug時不用再懷疑是否環境有問題，因為你的環境與Taylor Otwell所使用的一樣。</p>
<p>也因為Homestead是官方所打包的環境，若有問題也方便與社群討論。</p>
<h2 id="Vagrant">Vagrant</h2><hr>
<p>既然Homestead使用的是VM技術，用的是VirtualBox，為什麼還要使用Vagrant呢？這是很多Homestead初學者的問題，包括我自己在內。</p>
<p>Vagrant是個用Ruby所寫的軟體，簡單的說，他的核心部分仍使用VirtualBox，Vagrant只能算是個VirtualBox管理工具。也就是說，你雖然需安裝VirtualBox，但安裝完後就再也碰不到它了，因為Vagrant已經全面接管VirtualBox，你所有的操作都在Vagrant上。</p>
<p>Vagrant包含2個部分 :</p>
<ol>
<li><strong>Vagrant Box</strong> : 將應用程式環境與作業系統打包在一起。</li>
<li><strong>Scripts</strong> : <ul>
<li><strong>Vagrantfile</strong> : 使用Ruby開發，是Homestead執行時，第一個被執行的程式，負責設定Homestead環境變數，並調用其他scripts執行。我們不用去修改，Homestead已經幫我們建好了。</li>
<li><strong>homestead.rb</strong> : 使用Ruby開發，Vagrantfile會調用<code>homestead.rb</code>，由<code>homestead.rb</code>去讀取<code>Homestead.yaml</code>，依其設定將VM provision起來。我們不用去修改，Homestead已經幫我們建好了。</li>
<li><strong>Homestead.yaml</strong> : 使用Ruby開發，用來設定我們自己的Homestead，如CPU用幾個? 記憶體開多大? shared folder路徑怎麼設定? 資料庫建立…等，這個檔案我們必須自己設定。</li>
<li><strong>after.sh</strong> : 使用Bash開發，當Homestead啟動之後，會執行<code>after.sh</code>內的內容，若我們希望Homestead啟動之後馬上啟動某些程式，可以寫在這裡。</li>
<li><strong>aliases</strong> : 使用Bash開發，可以在此設定Homestead內的Bash alias。</li>
</ul>
</li>
</ol>
<p>事實上還有很多scripts沒有提到，這裏只提到最重要的幾個scripts。</p>
<p>若還是對Vagrant很模糊沒關係，最後我們還會對Homestead啟動做更深入地解釋。</p>
<p>簡單的說，Homestead就是 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Homestead = VirtualBox + Vargrnt + Homestead Vagrant Box + Homestead Scripts。</div>
<h2 id="安裝流程">安裝流程</h2><hr>
<img src="/images/laravel/homestead/homestead-osx/home011.svg" width="280">
<p>接下來我們將一步一步地將Homestead安裝起來。</p>
<h3 id="安裝VirtualBox">安裝VirtualBox</h3><p>到<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">VirtualBox Download</a>下載VirtualBox for OS X hosts，不必下載Extension Pack，因為不會在VirtualBox下使用GUI模式。</p>
<p><strong>執行VirtualBox-5.0.16-105871-OSX.dmg</strong><br><img src="/images/laravel/homestead/homestead-osx/home000.png" alt=""></p>
<p>滑鼠點兩下<code>VirtualBox.pkg</code>圖示開始安裝。</p>
<p><strong>確認安裝</strong><br><img src="/images/laravel/homestead/homestead-osx/home001.png" alt=""></p>
<p>因為是pkg格式，必須手動確認是否執行，按<code>continue</code>繼續。</p>
<p><strong>歡迎畫面</strong><br><img src="/images/laravel/homestead/homestead-osx/home002.png" alt=""></p>
<p>按<code>continue</code>繼續。</p>
<p><strong>選取目標與安裝類型</strong><br><img src="/images/laravel/homestead/homestead-osx/home003.png" alt=""></p>
<p>按<code>Install</code>繼續。</p>
<p><strong>安裝成功</strong><br><img src="/images/laravel/homestead/homestead-osx/home004.png" alt=""></p>
<p>按<code>Close</code>結束安裝程式。</p>
<p><strong>執行VirtualBox</strong><br><img src="/images/laravel/homestead/homestead-osx/home005.png" alt=""></p>
<p>在<code>Application</code>下選擇<code>VirtualBox</code>，滑鼠點兩下執行。</p>
<p><strong>安裝完成</strong><br><img src="/images/laravel/homestead/homestead-osx/home006.png" alt=""></p>
<p>若安裝成功，將顯示<strong>Oracle VM VirtualBox Manager</strong>。</p>
<h3 id="安裝Vagrant">安裝Vagrant</h3><p>到<a href="http://www.vagrantup.com/downloads.html" target="_blank" rel="external">Vagrant Download</a>下載Vagrant for OSX。</p>
<p><strong>執行vagrant_1.8.1.dmg</strong><br><img src="/images/laravel/homestead/homestead-osx/home007.png" alt=""></p>
<p>滑鼠點兩下<code>Vagrant.pkg</code>圖示開始安裝。</p>
<p><strong>歡迎畫面</strong><br><img src="/images/laravel/homestead/homestead-osx/home008.png" alt=""></p>
<p>按<code>continue</code>繼續。</p>
<p><strong>選取目標與安裝類型</strong><br><img src="/images/laravel/homestead/homestead-osx/home009.png" alt=""></p>
<p>按<code>Install</code>繼續。</p>
<p><strong>安裝成功</strong><br><img src="/images/laravel/homestead/homestead-osx/home010.png" alt=""></p>
<p><strong>安裝完成</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ vagrant version</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home012.png" alt=""></p>
<p>若成功會顯示目前Vagrant版本資訊。</p>
<h3 id="下載Homestead">下載Homestead</h3><p>下載Homestead vagrant box。</p>
<p><strong>使用vagrant box add下載Homestead vagrant box</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home013.png" alt=""></p>
<p>選擇<code>1</code>：virtualbox格式</p>
<p><img src="/images/laravel/homestead/homestead-osx/home014.png" alt=""></p>
<p>大約需要10分鐘下載。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  為什麼我們要花10分鐘下載Homestead呢?</div>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd ~/.vagrant.d/boxes&#10;oomusou@mac:~/.vagrant.d/boxes$ ll</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/homestead/homestead-osx/home015.png" alt=""></p>
<p>在<code>~/.vagrant.d/boxes</code>目錄下了多了<code>laravel-VAGRANTSLASH-homestead</code>目錄。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/.vagrant.d/boxes$ cd laravel-VAGRANTSLASH-homestead/0.4.2/virtualbox&#10;oomusou@mac:~/.vagrant.d/boxes/laravel-VAGRANTSLASH-homestead/0.4.2/virtualbox$ ll</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/homestead/homestead-osx/home016.png" alt=""></p>
<p>其中<code>0.4.2</code>是Homestead的版本，若本機有下載多個Homestead版本，這邊就會有多個版本目錄。</p>
<p>我們看到了<code>box-disk1.vmdk</code>，這超過1GB的<code>box-disk1.vmdk</code>是VirtualBox的檔案格式，這也是為什麼我們要花10分鐘下載的原因。</p>
<h3 id="下載設定檔">下載設定檔</h3><p>下載Vagrantfile + Scripts。</p>
<p><strong>下載Homestead設定檔</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ git clone https://github.com/laravel/homestead.git Homestead</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home017.png" alt=""></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Homestead設定檔包括哪些東西呢?</div>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Homestead&#10;oomusou@mac:~/Homestead$ ll</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/homestead/homestead-osx/home018.png" alt=""></p>
<p>在<code>~/Homestead</code>目錄下，我們看到了一些檔案：</p>
<ul>
<li><strong>Vagrantfile</strong> : 事實上將來每次下<code>vagrant up</code>指令時，就是在找這個檔案，這是Vagrant Box啟動時第一個執行的檔案，Homestead已經幫我們客製化了。</li>
<li><strong>init.sh</strong> : 建立自己的<code>Homestead.yaml</code>、<code>after.sh</code>與<code>aliases</code>，稍後會用到。</li>
<li><strong>scripts目錄</strong> : Homestead自己會用到的scripts，如<code>homestead.rb</code>就在此目錄下。</li>
</ul>
<h3 id="設定SSH金鑰">設定SSH金鑰</h3><p>將來會使用SSH方式連進Homestead，所以要設定SSH金鑰。</p>
<p><strong>使用ssh-keygen建立SSH金鑰</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ ssh-keygen -t rsa -C &#34;oomusou@homestead&#34;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home019.png" alt=""></p>
<p><code>oomusou</code>為你的user名稱。</p>
<p><code>id_rsa</code>接受預設目錄即可。</p>
<p><code>passphrase</code>是設定密碼。</p>
<h3 id="設定Homestead-yaml">設定Homestead.yaml</h3><p>之前提到<code>Vagrantfile</code>會調用<code>homestead.rb</code>，由<code>homestead.rb</code>去讀取<code>Homestead.yaml</code>，依其設定將Homestead provision起來。</p>
<p><strong>使用init.sh建立Homestead.yaml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Homestead&#10;oomusou@mac:~/Homestead$ sh ./init.sh</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/homestead/homestead-osx/home020.png" alt=""></p>
<p><code>init.sh</code>會幫我們在<code>~/.homestead/</code>目錄建立<code>Homestead.yaml</code>。</p>
<p><img src="/images/laravel/homestead/homestead-osx/home021.png" alt=""></p>
<p>事實上，<code>init.sh</code>還幫我們建立了<code>after.sh</code>與<code>aliases</code>。 若我們想修改<code>after.sh</code>與<code>aliases</code>，就是在這裡修改。</p>
<p><strong>修改Homestead.yaml</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd .homestead&#10;oomusou@mac:~/.homestead$ vim Homestead.yaml</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home022.png" alt=""></p>
<p>這是Homestead唯一需要我們手動修改設定的地方，<code>homestead.rb</code>會依照<code>Homestead.yaml</code>的設定為我們的Homestead做provision。</p>
<p><img src="/images/laravel/homestead/homestead-osx/home023.png" alt=""></p>
<ul>
<li><p><strong>ip</strong> : 設定Homestead的IP，若IP沒有相衝，可以不用修改。</p>
</li>
<li><p><strong>memory</strong> : 單位為MB，預設開2GB，若你嫌這樣太耗記憶體，根據經驗，512MB就可以讓Homestead啟動，不過有些service會失敗，1GB以上service都會正常，不過因為記憶體較少，有時會因為swap memory到HDD/SSD導致效能較差。</p>
</li>
<li><p><strong>cpu</strong> : 維持預設1顆CPU即可。</p>
</li>
<li><p><strong>provider</strong> : 使用VirtualBox，不用修改。</p>
</li>
<li><p><strong>authorize</strong> : 設定SSH public key位置，若之前ssh-keygen使用預設位置建立，則不用修改。</p>
</li>
<li><p><strong>keys</strong> : 設定SSH private key位置，若之前ssh-keygen使用預設位置建立，則不用修改。</p>
</li>
<li><p><strong>folders</strong> : <code>Homestead.yaml</code>重要的設定，設定Mac本機與Homestead的對應路徑。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>事實上這就是VirtualBox的shared folder機制，我們知道VM最佳使用方式是環境灌在VM內，但專案放在本機，透過shared folder機制讓VM使用本機的專案，這樣的優點是儘管VM損毀開不了機，專案仍然不會受影響，因為專案是放在本機，只要再重新建立一個VM即可。</span></span></span></p>
<ul>
<li><strong>map</strong> : 設定Mac本機Laravel專案路徑，可自行修改。預設值是<code>~/Code</code>，目前接受預設值即可。</li>
<li><strong>to</strong> : 設定Homestead內Laravel專案路徑，可自行修改。目前接受預設值即可。</li>
</ul>
</li>
<li><p><strong>sites</strong> : <code>Homestead.yaml</code>重要的設定，讓你可以對Nginx設定網域主機名稱。</p>
<ul>
<li><p><strong>map</strong> : 網域主機名稱。預設為<code>homestead.app</code>，目前接受預設值即可。</p>
</li>
<li><p><strong>to</strong> : 此站台所對應的目錄名稱。預設為<code>/home/vagrant/Projects/Laravel/public</code>。因為Laravel的<code>index.php</code>放在<code>public</code>目錄下。目前接受預設值即可。</p>
</li>
</ul>
</li>
<li><p><strong>databases</strong> : <code>Homestead.yaml</code>重要的設定，可以在此設定資料庫名稱，由Homestead幫你自動建立。目前維持預設homestead即可。</p>
</li>
<li><p><strong>variables</strong> :  設定Lavavel全域變數，目前使用預設值即可</p>
</li>
</ul>
<p><strong>補建~/Code目錄</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/.homestead$ cd ..&#10;oomusou@mac:~$ mkdir Code</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home024.png" alt=""></p>
<p>因為剛才設定Mac本機Laravel專案路徑為<code>~/Code</code>，但這麼目錄並不存在，所以要補建目錄。</p>
<h3 id="修改hosts檔">修改hosts檔</h3><p>因為Homestead的IP為<code>192.168.10.10</code>，其網域主機名稱為<code>homestead.app</code>，要設定<code>hosts</code>將彼此對應起來。</p>
<p><strong>修改/etc/hosts</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ sudo vim /etc/hosts</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home025.png" alt=""></p>
<p>使用vim修改<code>hosts</code>。</p>
<p><strong>加入IP與網域主機名稱對應</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.10 homestead.app</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home026.png" alt=""></p>
<h3 id="啟動Homestead">啟動Homestead</h3><p><strong>使用vagrant up啟動Homestead</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Homestead&#10;oomusou@mac:~/Homestead$ vagrant up</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home027.png" alt=""></p>
<p>先cd進<code>Homestead</code>目錄，使用<code>vagrant up</code>指令啟動Homestead。</p>
<p>先進入<code>Homestead</code>目錄是必須的，凡Vagrant指令在執行時都會找<code>Vagrantfile</code>，而<code>Vangrantfile</code>就是放在<code>~/Homestead</code>目錄下。</p>
<p>Homestead啟動時還會上網檢查是不是最新版，並提醒你是否該更新。</p>
<p><img src="/images/laravel/homestead/homestead-osx/home028.png" alt=""></p>
<p>若此時打開VirtualBox，會發現有一個VM正在執行中，這也證明了Vagrant背後執行的是VirtualBox。</p>
<h3 id="使用SSH登入">使用SSH登入</h3><p><strong>使用vagrant ssh登入Homestead</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Homestead&#10;oomusou@mac:~/Homestead$ vagrant ssh</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home029.png" alt=""></p>
<p>如同<code>vagrant up</code>一樣，下任何vagrant指令都要在<code>~/Homestead</code>目錄下。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>為什麼不需要login呢？因為我們之前已經設定了SSH金鑰，homestead ssh會自動去讀取金鑰登入，所以不用login。</span></span></span></p>
<p>我們已經可以順利登入Ubuntu 14.04 LTS了。</p>
<p><strong>顯示shared folder</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~$ ll</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home030.png" alt=""></p>
<p>我們可以在home directory可以看到Mac本機的<code>~/Code</code>目錄。</p>
<h3 id="下載Laravel">下載Laravel</h3><p>在Homestead使用Composer下載Laravel。</p>
<p><strong>使用Composer建立Laravel專案</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~$ cd Code&#10;vagrant@homestead:~/Code$ composer create-project laravel/laravel Laravel --prefer-dist</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home031.png" alt=""></p>
<p>統一將專案放在<code>Code</code>目錄下，其中<code>Laravel</code>為你的專案目錄名稱。</p>
<p>Composer將會建立一個<code>Laravel</code>目錄，並將Laravel所需要的檔案透過網路下載。</p>
<p><strong>–prefer-dist</strong> : 此參數意思是下載用於distribution的穩定版本，而不是正在開發中的版本，對於應用來說，穩定版本較適當。</p>
<p>由於Composer是透過網路去下載Laravel，所以請先確定網路是通的。</p>
<h3 id="使用瀏覽器驗證">使用瀏覽器驗證</h3><p><strong>在瀏覽器輸入homestead.app</strong></p>
<p><img src="/images/laravel/homestead/homestead-osx/home032.png" alt=""></p>
<p>若能在瀏覽器看到Laravel 5，恭喜你，Homestead與Laravel環境已經大功告成了。</p>
<h2 id="新增站台">新增站台</h2><hr>
<p>實務上我們可能會有很多專案在Homestead跑，因此需要新增其他站台。</p>
<p><strong>修改Homestead.yaml</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: homestead.app</span><br><span class="line">      to: /home/vagrant/Code/Laravel/<span class="keyword">public</span></span><br><span class="line"></span><br><span class="line">    - map: blog.local</span><br><span class="line">      to: /home/vagrant/Code/blog/<span class="keyword">public</span> </span><br><span class="line"></span><br><span class="line">databases:</span><br><span class="line">    - homestead</span><br><span class="line">    - blog</span><br></pre></td></tr></table></figure>
<p>新增站台則新增<code>map</code>與<code>to</code>，如<code>blog.local</code>與其對應的路徑<code>/home/vagrant/Code/blog/public</code>。</p>
<p>新增資料庫則新增<code>databases</code>，如<code>blog</code>為新增的資料庫。</p>
<p><strong>修改hosts檔</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.10</span><span class="number">.10</span> blog.local</span><br></pre></td></tr></table></figure></p>
<p><strong>重新Provision</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/Homestead$ vagrant provision</span><br></pre></td></tr></table></figure></p>
<p>將自動根據<code>Homestead.yaml</code>的設定，重新啟動Homestead，並啟動新站台與建立<code>blog</code>資料庫。</p>
<h2 id="結束Homestead">結束Homestead</h2><hr>
<p>Homestead跑的就是Ubuntu，若我們想讓Ubuntu關機，也須依照正常程序關機。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~$ eixt&#10;oomusou@mac:~/Homestead$ vagrant halt</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/homestead/homestead-osx/home033.png" alt=""></p>
<p><code>exit</code>離開<code>vagrant ssh</code>。</p>
<p><code>vagrant halt</code>讓Homestead正常關機。</p>
<h2 id="刪除Homestead">刪除Homestead</h2><hr>
<p>若Homestead僅供測試用，想徹底刪除，請下以下指令 :<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/Homestead$ vagrant destroy --force</span><br></pre></td></tr></table></figure></p>
<h2 id="重建Homestead">重建Homestead</h2><hr>
<p>Homestead被刪除後，想重新建立，請下以下指令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/Homestead$ vagrant up</span><br></pre></td></tr></table></figure></p>
<h2 id="移除Homestead">移除Homestead</h2><hr>
<p><strong>移除</strong>與<strong>刪除</strong>是不一樣的，之前刪除Homestead，是將VirtualBox的Homestead VM刪除，也就是將<code>vagrant up</code>所建立的VM刪除，之後可以隨時再用<code>vagrant up</code>建立。</p>
<p>而移除Homestead是將之前使用 :</p>
<ol>
<li><code>vagrant box add laravel/homestead</code></li>
<li><code>git clone https://github.com/laravel/homestead.git Homestead</code></li>
<li><code>sh ./init.sh</code></li>
</ol>
<p>所下載與建立的檔案全部移除。</p>
<p>當完全不再使用Homestead，或Homestead Vagrant Box與Homestead scripts與設定檔壞掉，須重新下載與安裝設定Homestead時才需要這樣做。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>Virtual Box與Vagrant一般來說不會壞掉，所以不需重新安裝，若連Virtual Box與Vagrant都想移除，請參考其官網說明。</span></span></span></p>
<p>刪除以下3個目錄 :</p>
<ol>
<li><code>~/.vagrant.d</code></li>
<li><code>~/Homestead</code></li>
<li><code>~.homestead</code></li>
</ol>
<h2 id="Homestead啟動原理">Homestead啟動原理</h2><hr>
<img src="/images/laravel/homestead/homestead-osx/home034.svg" width="800">
<p>之前已經稍微講過Homestead的組成元素，事實上Homestead啟動時，是依以上步驟啟動。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  給OS X使用者的特別建議</div>
<p><img src="/images/laravel/homestead/homestead-osx/home035.png" alt=""></p>
<p>OS X使用者較習慣使用休眠，而不像Windows使用者每天關機，建議在OS X需要重新開機時，要手動<code>vagrant halt</code>將Homestead關機，因為直接關機，Homestead並沒有任何警告訊息，但下次OS X重開機後，若去執行VirtualBox，會發現Homestead已被<strong>不正常關機</strong>，雖然下<code>vagrant up</code>後還是可以使用，但這樣很容易造成VM損毀。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Homestead讓我們可以快速建置Laravel開發環境，且若VM因測試而損毀，也可以快速刪除再重建，非常方便。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>本文為Homestead的基礎，一個OS X裝一個共用的VM，若你想每個專案有自己的VM，詳細請參考<a href="/laravel/homestead/homestead-per-project/">如何一個專案使用一個Homestead?</a></span></span></span></li>
<li>Homestead雖然好用，但有一個致命傷 : <strong>非常耗電</strong>，尤其當你外出使用筆記型電腦時，會發現只要使用Homestead時，電池使用時間會減少一半，畢竟一顆電池要撐兩個作業系統同時運作。所以建議外出使用筆記型電腦時，若沒開發Laravel，一定要記得關閉Homestead。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在OS X享受Homestead的便利]]>
    
    </summary>
    
      <category term="Homestead" scheme="http://oomusou.io/tags/Homestead/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="OS X" scheme="http://oomusou.io/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何測試PHP原生函式?]]></title>
    <link href="http://oomusou.io/tdd/tdd-phpunit-native-function/"/>
    <id>http://oomusou.io/tdd/tdd-phpunit-native-function/</id>
    <published>2016-03-14T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>PHP雖然有了Laravel，但實務上還是常常會使用PHP原生函式。假如是Laravel，因為函式都封裝在class內，因此很容易使用Mockery將某個class的method加以mock，但若使用的是PHP原生函式，因為並不是包在class內，所以無從mock，實務上我們該如何測試PHP原生函式呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.22<br>PHPUnit 4.8.24<br>Mockery 0.9.4</p>
<h2 id="測試str_shuffle()">測試str_shuffle()</h2><hr>
<p>實務上想寫個password產生器，會使用到PHP原生函式<code>str_shuffle()</code>，但因為<code>str_shuffle()</code>每次回傳值並不一樣，因此無法做單元測試，希望能透過mockery對<code>str_shuffle()</code>做mock，但<code>str_shuffle()</code>是個function，並不隸屬任何class，因此不知道該如何mock。</p>
<h2 id="TDD">TDD</h2><hr>
<p>我們採用TDD方式開發，因此先寫Password產生器的測試程式。</p>
<p><strong>PasswordGeneratorServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/b19930cf293239c7140fc346df16537790a5e363" target="_blank" rel="external">新增PasswordGeneratorServiceTest.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/PasswordGeneratorServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Servives</span>\<span class="title">PasswordGeneratorService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(PasswordGeneratorService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$origin</span> = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">        <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">        <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第5行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorService */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;target = App::make(PasswordGeneratorService::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每次跑測試時，都會執行<code>setUp()</code>，因此適合在<code>setUp()</code>將待測物件準備好。</p>
<p>實務上建議使用<code>App::make()</code>物件，而不要使用<code>new</code>，因為若待測物件包含costructor依賴注入時，使用<code>new</code>必須一一準備constructor參數物件，非常麻煩，若使用<code>App::make()</code>，Laravel將會自動幫我們將constructor參數的物件注入，非常方便。</p>
<p><code>$target</code>的PHPDoc非常重要，因為目前PHP 7對field仍然沒有支援type hint，必須自行加上PHPDoc，PhpStorm才能得知field的型別。</p>
<p>14行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::tearDown();</span><br><span class="line">    <span class="variable">$this</span>-&gt;target = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每次跑完測試時，都會執行<code>tearDown()</code>，因此適合在<code>tearDown</code>將待測物件清為<code>null</code>。</p>
<p>23行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@test</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$origin</span> = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">    <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>實際的測試案例，為了更人性化描述測試案例的意義，可以直接使用<strong>中文</strong>為function名稱。</p>
<p>測試案例的命名，以白話描述測試案例為原則，不要以<strong>測試</strong> + <strong>函式名稱</strong>命名，如<code>testGenerate()</code>，這樣無法明確顯示該測試案例。</p>
<p>因為使用中文function名稱，所以要加在PHPDoc加上<code>@test</code>，PHPUnit才會認為這是測試程式。</p>
<p>依照<strong>3A原則</strong>執行單元測試 :</p>
<ol>
<li><p><strong>arrange</strong> : 準備測試資料，與測試期望值<code>$expected</code>。</p>
</li>
<li><p><strong>act</strong> : 實際執行待測物件的method，並獲得測試實際值<code>$actual</code>。</p>
</li>
<li><p><strong>assert</strong> : 實際比較<strong>測試期望值</strong>與<strong>測試實際值</strong>是否相等。</p>
</li>
</ol>
<p>執行測試，獲得第一個<span class="label label-danger">紅燈</span>，因為我們只寫了測試程式，還沒寫真正的程式。</p>
<p><strong>PasswordGeneratorService.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/1295716adc638d4c530dbb59cf44d09e14b0a87c" target="_blank" rel="external">新增PasswordGeneratorService.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/PasswordGeneratorService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Servives</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 產生密碼</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $origin</span><br><span class="line">     * <span class="doctag">@param</span> int $length</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span><span class="params">(string <span class="variable">$origin</span>, int <span class="variable">$length</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$target</span> = str_shuffle(<span class="variable">$origin</span>);</span><br><span class="line">        <span class="keyword">return</span> substr(<span class="variable">$target</span>, <span class="number">0</span>, <span class="variable">$length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第1個參數傳入欲shuffle的字串，第2個參數傳入密碼長度。</p>
<p>使用了<code>str_shuffle()</code>重整字串。</p>
<p>使用了<code>substr()</code>擷取字串長度。</p>
<p><strong>測試</strong><br><img src="/images/tdd/tdd-phpunit-native-function/native000.png" alt=""></p>
<p>得到<span class="label label-danger">紅燈</span>，因為期望值與實際值不同。</p>
<p><img src="/images/tdd/tdd-phpunit-native-function/native001.png" alt=""></p>
<p>再次測試，還是得到<span class="label label-danger">紅燈</span>，因為期望值與實際值不同。</p>
<p>注意兩次測試的結果，實際值皆不相同，因為<code>str_shuffle()</code>每次的結果都不同。</p>
<h2 id="封裝PHP原生函式">封裝PHP原生函式</h2><hr>
<p>對於<code>str_shffle()</code>這種每次執行結果都不同的函式，我們無法進行測試，因此需要對<code>str_shffle()</code>進行mock。</p>
<p>但<code>str_shuffle()</code>為function，無法進行mock，因此我們必須將<code>str_shuffle()</code>封裝在獨立的class內。</p>
<p><strong>PasswordGeneratorHelper.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/9d5f993e8499b6738af35056ed94139efa141c1d" target="_blank" rel="external">新增PasswordGeneratorHelper.php，對str_shuffle()封裝</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/PasswordGeneratorHelper.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Servives</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorHelper</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 將原生的str_shuffule()封裝</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $origin</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">str_shuffle</span><span class="params">(string <span class="variable">$origin</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str_shuffle(<span class="variable">$origin</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取一個完全同名的<code>str_shuffle()</code>，因為是完全封裝，所以只需呼叫PHP原生的<code>str_shuffle()</code>即可。</p>
<h2 id="注入Helper">注入Helper</h2><hr>
<p>將<code>PasswordGeneratorHelper</code>注入進<code>PasswordGeneratorService</code>，改使用封裝過的<code>str_shuffle()</code>。</p>
<p><strong>PasswordGeneratorService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/e77b8c0fdb4d92d4d96eff14f7c0e8647857d58d" target="_blank" rel="external">改使用PasswordGeneratorHelper的str_shuffle()</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/PasswordGeneratorService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Servives</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorHelper */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$passwordGeneratorHelper</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PasswordGeneratorService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PasswordGeneratorHelper $passwordGeneratorHelper</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PasswordGeneratorHelper <span class="variable">$passwordGeneratorHelper</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;passwordGeneratorHelper = <span class="variable">$passwordGeneratorHelper</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 產生密碼</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $origin</span><br><span class="line">     * <span class="doctag">@param</span> int $length</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span><span class="params">(string <span class="variable">$origin</span>, int <span class="variable">$length</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$target</span> = <span class="variable">$this</span>-&gt;passwordGeneratorHelper-&gt;str_shuffle(<span class="variable">$origin</span>);</span><br><span class="line">        <span class="keyword">return</span> substr(<span class="variable">$target</span>, <span class="number">0</span>, <span class="variable">$length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第5行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorHelper */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$passwordGeneratorHelper</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * PasswordGeneratorService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> PasswordGeneratorHelper $passwordGeneratorHelper</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PasswordGeneratorHelper <span class="variable">$passwordGeneratorHelper</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;passwordGeneratorHelper = <span class="variable">$passwordGeneratorHelper</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將<code>PasswordGeneratorHelper</code>注入。</p>
<p><code>$passwordGeneratorHelper</code>的PHPDoc非常重要，因為目前PHP 7對field仍然沒有支援type hint，必須自行加上PHPDoc，PhpStorm才能得知field型別。</p>
<p>17行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 產生密碼</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> string $origin</span><br><span class="line"> * <span class="doctag">@param</span> int $length</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span><span class="params">(string <span class="variable">$origin</span>, int <span class="variable">$length</span>)</span> : <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$this</span>-&gt;passwordGeneratorHelper-&gt;str_shuffle(<span class="variable">$origin</span>);</span><br><span class="line">    <span class="keyword">return</span> substr(<span class="variable">$target</span>, <span class="number">0</span>, <span class="variable">$length</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>改使用<code>PasswordGeneratorHelper</code>的<code>str_shuffle()</code>。</p>
<h2 id="Mockery">Mockery</h2><hr>
<p>將<code>str_shuffle()</code>包在class內之後，我們就能使用mockery來mock了。</p>
<p><strong>TestCase.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/d83ff85f19b1b3817cc19d36f49b6d7dcaba577a" target="_blank" rel="external">修改TestCase.php，建立initMock()</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>tests/TestCase.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Mockery</span>\<span class="title">MockInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCase</span> <span class="keyword">extends</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The base URL to use while testing the application.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$baseUrl</span> = <span class="string">'http://localhost'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates the application.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Foundation\Application</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createApplication</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$app</span>-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$app</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 初始化Mock物件</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $className</span><br><span class="line">     * <span class="doctag">@return</span> MockInterface</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initMock</span><span class="params">(string <span class="variable">$className</span>)</span> : <span class="title">MockInterface</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$mock</span> = Mockery::mock(<span class="variable">$className</span>);</span><br><span class="line">        App::instance(<span class="variable">$className</span>, <span class="variable">$mock</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$mock</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>26行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 初始化Mock物件</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> string $className</span><br><span class="line"> * <span class="doctag">@return</span> MockInterface</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initMock</span><span class="params">(string <span class="variable">$className</span>)</span> : <span class="title">MockInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$mock</span> = Mockery::mock(<span class="variable">$className</span>);</span><br><span class="line">    App::instance(<span class="variable">$className</span>, <span class="variable">$mock</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$mock</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因為實務上<code>initMock()</code>在很多測試案例都會用到，所以將其pull member up到<code>TestCase</code>。</p>
<p>使用<code>Mockery::mock()</code>建立新的mock物件，並傳回給測試程式的field。</p>
<p>使用<code>App::instance()</code>將原來的物件以mock物件取代。實務上使用<code>App::instance()</code>的機會並不多，大概就只有在mock會用到，一般常使用的是<code>App::bind()</code>、<code>App::make()</code>與<code>App::call()</code>。</p>
<p><strong>PasswordGeneratorServiceTest.php</strong><br><figure class="highlight php"><figcaption><span>tests/Services/PasswordGeneratorServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Servives</span>\<span class="title">PasswordGeneratorHelper</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Servives</span>\<span class="title">PasswordGeneratorService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Mockery</span>\<span class="title">Mock</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Mock  */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$mock</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;mock = <span class="variable">$this</span>-&gt;initMock(PasswordGeneratorHelper::class);</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(PasswordGeneratorService::class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;mock-&gt;shouldReceive(<span class="string">'str_shuffle'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;withAnyArgs()</span><br><span class="line">            -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">(string <span class="variable">$origin</span>)</span> : <span class="title">string</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$origin</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$origin</span> = <span class="string">'abc123XYZ'</span>;</span><br><span class="line">        <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">        <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>10行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> Mock  */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$mock</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;mock = <span class="variable">$this</span>-&gt;initMock(PasswordGeneratorHelper::class);</span><br><span class="line">    <span class="variable">$this</span>-&gt;target = App::make(PasswordGeneratorService::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新增<code>$mock</code> field，存放<code>initMock()</code>回傳的mock物件。</p>
<p><code>$mock</code>的PHPDoc非常重要，因為目前PHP 7對field仍然沒有支援type hint，必須自行加上PHPDoc，PhpStorm才能得知field的型別。</p>
<p>因為要將<code>PasswordGeneratorHelper</code>加以mock，因此將<code>PasswordGeneratorHelper::class</code>傳入<code>initMock()</code>。</p>
<p>27行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@test</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;mock-&gt;shouldReceive(<span class="string">'str_shuffle'</span>)</span><br><span class="line">        -&gt;once()</span><br><span class="line">        -&gt;withAnyArgs()</span><br><span class="line">        -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">(string <span class="variable">$origin</span>)</span> : <span class="title">string</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$origin</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$origin</span> = <span class="string">'abc123XYZ'</span>;</span><br><span class="line">    <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>shouldReceive()</code>來mock<code>str_shuffle()</code>。</p>
<p>這裡要特別強調的是<code>andReturnUsing()</code>，一般我們會使用<code>andReturn()</code>，直接傳入欲回傳的值，不過像<code>str_shuffle()</code>這類函式，我們不會直接mock其回傳值，只希望其回傳值<strong>可預測</strong>就好，<code>andReturnUsing()</code>允許我們傳進一個closure取代原本的<code>str_shuffle()</code>。</p>
<p>其實傳進去的closure也很單純，只是回傳原來的<code>$origin</code>而已，目的只是讓<code>str_shuffle()</code>具可預測性，讓我們可以寫測試。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  這樣不就沒測試到<strong>str_shuffle()</strong>了嗎?</div>
<p><code>str_shuffle()</code>是PHP的原生函式，正確性不用懷疑，因此不需要測試，我們只需確定<code>str_shuffle()</code>是否在程式中有被呼叫過，因此我們特別在<code>$mock</code>加上<code>once()</code>，要求mockery特別檢查<code>str_shuffle()</code>是否被執行過，若<code>str_shuffle()</code>沒被執行，或執行超過一次，PHPUnit會亮<span class="label label-danger">紅燈</span>。</p>
<p><img src="/images/tdd/tdd-phpunit-native-function/native002.png" alt=""></p>
<p>實際執行測試，PHPUnit會抱怨所mock的closure與原本<code>str_shuffle()</code>不相容而亮<span class="label label-danger">紅燈</span>。</p>
<p>原因是因為PHP 7雖然支援return type，不過closure尚未支援return type寫法，因此PHPUnit認為所mock的closure與原本的<code>str_shuffle()</code>型別並不相同。</p>
<p><strong>PasswordGeneratorHelper.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/ac9b1ae1a56d01ba15776ffa75c0e050336f9a20" target="_blank" rel="external">更新PasswordGeneratorHelper.php，不使用return type</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/PasswordGeneratorHelper.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Servives</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorHelper</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 將原生的str_shuffule()封裝</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $origin</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">str_shuffle</span><span class="params">(string <span class="variable">$origin</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str_shuffle(<span class="variable">$origin</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原本<code>str_shuffle()</code>放棄使用return type。</p>
<p><strong>PasswordGeneratorServiceTest.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/3a3851fbf3ca4ed0483008f0f8c5d2fc3477bc1e" target="_blank" rel="external">更新PasswordGeneratorServiceTest.php，closure不使用return type</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/PasswordGeneratorServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Servives</span>\<span class="title">PasswordGeneratorHelper</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Servives</span>\<span class="title">PasswordGeneratorService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Mockery</span>\<span class="title">Mock</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Mock  */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$mock</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;mock = <span class="variable">$this</span>-&gt;initMock(PasswordGeneratorHelper::class);</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(PasswordGeneratorService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;mock-&gt;shouldReceive(<span class="string">'str_shuffle'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;withAnyArgs()</span><br><span class="line">            -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">(string <span class="variable">$origin</span>)</span>  </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$origin</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$origin</span> = <span class="string">'abc123XYZ'</span>;</span><br><span class="line">        <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">        <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>26行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@test</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;mock-&gt;shouldReceive(<span class="string">'str_shuffle'</span>)</span><br><span class="line">        -&gt;once()</span><br><span class="line">        -&gt;withAnyArgs()</span><br><span class="line">        -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">(string <span class="variable">$origin</span>)</span>  </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$origin</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$origin</span> = <span class="string">'abc123XYZ'</span>;</span><br><span class="line">    <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>andReturnUsing()</code>傳入的closure，也放棄使用return type。</p>
<p><img src="/images/tdd/tdd-phpunit-native-function/native003.png" alt=""></p>
<p>再跑一次測試，就會得到<span class="label label-success">綠燈</span>了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>對於PHP原生函式，若其回傳結果每次都不一樣，或不想測試，可以將其包在<code>Helper</code>內，再利用<strong>依賴注入</strong>的方式取代PHP原生函式，最後再靠mockery去mock該<code>Helper</code>的method。</li>
<li>可直接在測試程式中使用<strong>中文</strong>替測試案例的method命名，可讀性更高。</li>
<li>Mockery的<code>andReturnUsing()</code>，允許我們直接傳入clousre去mock一個method。</li>
<li>PHP 7的closure尚未支援return type，因此若要使用closure去mock method，必須放棄使用return type。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52MockNativeFunction" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[透過Mockery與依賴注入對PHP原生函式做測試]]>
    
    </summary>
    
      <category term="Mockery" scheme="http://oomusou.io/tags/Mockery/"/>
    
      <category term="PHP" scheme="http://oomusou.io/tags/PHP/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在PhpStorm活用PHPDoc?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-ide-helper/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-ide-helper/</id>
    <published>2016-03-04T12:23:43.000Z</published>
    <updated>2016-04-04T07:58:33.000Z</updated>
    <content type="html"><![CDATA[<p>初學者使用PhpStorm開啟Laravel專案時，馬上會發現原來的程式碼出現一堆反白警告，事實上這些都是有意義的，只是初學者常常不知道怎麼處理，而忽略這些反白警告，除此之外，PhpStorm有強大的語法提示功能，讓你不用去死記物件有哪些field與method，只要用選的即可，可大幅增加開發效率，也不用擔心typo打錯。而PhpStorm威力的背後，就是基於<strong>PHPDoc</strong>。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.22<br>PhpStorm 10.0.3<br>Laravel IDE Helper 2.1.4</p>
<h2 id="使用PhpStorm開啟Laravel">使用PhpStorm開啟Laravel</h2><hr>
<p>第一次使用PhpStorm開啟Laravel時，原來平靜的程式碼在很多地方都出現了許多反白 :</p>
<h3 id="Route">Route</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide000.png" alt=""></p>
<p>PhpStorm抱怨<code>Route</code>是<code>Undefined class Route</code>。</p>
<h3 id="Validator">Validator</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide001.png" alt=""></p>
<p>在<code>AuthController</code>中，PhpStorm抱怨<code>Validator</code>是<code>Undefined class Validator</code>。</p>
<h3 id="Schema_Builder">Schema Builder</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide002.png" alt=""></p>
<p>在user的migration中，PhpStorm抱怨<code>Schema</code>是<code>Undefined class Schema</code>。</p>
<p>還抱怨了<code>unique()</code>是<code>Method not found</code>。</p>
<p>之所以會如此，root cause有兩個 :</p>
<ol>
<li><code>Route</code>、<code>Validator</code>與<code>Schema</code>使用了Laravel特有的<strong>Facade</strong>機制，導致PhpStorm無法解析。</li>
<li><code>unique()</code>使用了PHP獨有的<strong>Overloading</strong>機制，可以動態產生property與method，也因為是動態產生，所以PhpStorm無法解析。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>PHP的Overloading與一般物件導向語言所謂的Overloading不同，詳細請參考<a href="/php/php-cs/#Overload">PHP與C#語法快速導覽之Overloading</a></span></span></span></li>
</ol>
<h2 id="Laravel_IDE_Helper">Laravel IDE Helper</h2><hr>
<p>有了問題就要解決，我們先來解決第一個問題 : Laravel特有的Facade機制。</p>
<p><a href="https://github.com/barryvdh/laravel-ide-helper" target="_blank" rel="external">Laravel IDE Helper</a>讓PhpStorm看得懂Laravel Facade，還增加了許多其他的支援。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>Laravel IDE Helper作者Barry vd. Heuvel的另一個大作<a href="https://github.com/barryvdh/laravel-debugbar" target="_blank" rel="external">Laravel Debugbar</a>，詳細請參考<a href="/laravel/laravel-debugbar/">如何使用Laravel Debugbar?</a></span></span></span></p>
<h3 id="安裝">安裝</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require barryvdh/laravel-ide-helper --dev</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide003.png" alt=""></p>
<p>使用composer安裝Laravel IDE Helper，因為此套件只會在開發使用，可以加上<code>--dev</code>參數。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於<code>--dev</code>參數，詳細請參考<a href="/laravel/laravel-debugbar/#使用Composer安裝">如何使用Laravel Debugbar#使用Composer安裝</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require doctrine/dbal --dev</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide007.png" alt=""></p>
<p>Laravel IDE Helper會透過<a href="http://www.doctrine-project.org/projects/dbal.html" target="_blank" rel="external">doctrine/dbal</a>去抓table的schema，替model加上欄位註解。</p>
<h3 id="Service_Provider">Service Provider</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class,</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide004.png" alt=""></p>
<p>在<code>config/app.php</code>中加入<code>IdeHelperServiceProvider</code>。</p>
<h3 id="設定檔">設定檔</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan vendor:publish --provider=&#34;Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider&#34; --tag=config</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide008.png" alt=""></p>
<p>產生Laravel IDE Helper自己的設定檔，位在<code>config/ide-helper.php</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide009.png" alt=""></p>
<p>建議將<code>include_helpers</code>設定為true，讓Laravel IDE Helper幫我們建立helper function的註解。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide010.png" alt=""></p>
<p>Laravel 5預設將model放在<code>app</code>目錄下，若你有自己的model目錄，請修改此設定。</p>
<h3 id="資料庫連線">資料庫連線</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide015.png" alt=""></p>
<p>有些Facade與資料庫有關，先確定專案已經與資料庫順利連線。</p>
<h3 id="Facade">Facade</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan ide-helper:generate</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide005.png" alt=""></p>
<p>建立Laravel Facade的PHPDoc，產生了<code>_ide_helper.php</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide006.png" alt=""></p>
<p>可以發現在專案根目錄多了<code>_ide_helper.php</code>，我們找到了<code>Route</code> class與<code>get()</code>，發現多加了PHPDoc註解，讓PhpStorm知道<code>get()</code>的參數資訊與回傳型別，這提供了PhpStorm幫我們做語法檢查的根據。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide012.png" alt=""></p>
<p><code>Route</code>不再反白。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide013.png" alt=""></p>
<p><code>Validator</code>也不再反白。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide014.png" alt=""></p>
<p><code>Schema</code>也不再反白，不過<code>unique()</code>還是反白，稍後會解決。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  若將來透過composer update更新Laravel，是否還要重新產生_ide_helper.php呢?</div>
<h3 id="composer-json">composer.json</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">    <span class="string">"post-update-cmd"</span>: [</span><br><span class="line">        <span class="string">"php artisan clear-compiled"</span>,</span><br><span class="line">        <span class="string">"php artisan ide-helper:generate"</span>,</span><br><span class="line">        <span class="string">"php artisan optimize"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide011.png" alt=""></p>
<p>只要在<code>composer.json</code>的<code>post-update-cmd</code>改成如上圖所示，以後只要<code>composer update</code>更新Laravel，就會自動重新建立<code>_ide_helper.php</code>。</p>
<h3 id="Model">Model</h3><p><strong>資料庫欄位名稱</strong>是開發過程的另外一個痛，傳統都要另外一個視窗開著phpMyAdmin或Sequel Pro，一邊查詢資料庫欄位一邊寫程式，若PhpStorm能替我們對model的欄位名稱做<strong>語法提示</strong>，讓我們用選的，那就太好了。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan ide-helper:models</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide016.png" alt=""></p>
<p>Laravel IDE Helper提供兩種方式幫你建立model的PHPDoc，預設是產生一個<code>_ide_helper_models.php</code>，也可以直接將PHPDoc寫在原本的model檔內，我們打<code>yes</code>，選擇直接在model內建立PHPDoc。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>理論上選擇預設的<code>_ide_helper_models.php</code>也不是問題，不過因為在<code>_ide_helper_models.php</code>也定義了<code>User</code> class，所以在repository內<code>use User</code>時，會出現<code>Multiple definitions for class User</code>的警告，所以才選擇將PHPDoc直接建立在model內。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide017.png" alt=""></p>
<p>Laravel IDE Helper幫我們替<code>User</code> model建立了PHPDoc : </p>
<ol>
<li>所有的資料庫欄位名稱都加上了<code>@property</code>註解。</li>
<li>所有的資料庫欄位名稱的<code>where</code>都加上了<code>@method</code>註解。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>這些method都是Eloquent根據資料庫欄位，使用Overloading機制動態產生的method，因此PhpStorm無法自動抓到，必須手動寫PHPDoc的@method</span></span></span></li>
</ol>
<figure class="highlight php"><figcaption><span>app/Repositories/UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> User */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserRepository constructor.</span><br><span class="line">     * <span class="doctag">@param</span> User $user</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User <span class="variable">$user</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳第一位User</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> User</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFirstUser</span><span class="params">()</span> : <span class="title">User</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user-&gt;all()-&gt;first();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 回傳第一位User</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> User</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFirstUser</span><span class="params">()</span> : <span class="title">User</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user-&gt;all()-&gt;first();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們傳回第一筆<code>User</code> model。</p>
<figure class="highlight php"><figcaption><span>app/Services/UserService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">UserRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$userRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserRepository $userRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository <span class="variable">$userRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userRepository = <span class="variable">$userRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示第一筆user的姓名</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showFirstUser</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getFirstUser();</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$user</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19行<br><img src="/images/phpstorm/phpstorm-ide-helper/ide018.png" alt=""></p>
<p>輸入<code>$user</code>後，只要輸入<code>-&gt;</code>，就會出現資料庫欄位名稱讓你挑選，再也不用死記或靠其他工具查詢資料庫欄位名稱了。</p>
<h3 id="Service_Container">Service Container</h3><p>當我們使用service container，利用<code>App::make()</code>建立物件時，由於傳進去的是字串，因此PhpStorm根本不知道我們建立了什麼物件，但透過PhpStorm另外擴充的<strong>PhpStorm Advanced Metadata</strong>機制，讓我們在使用service container時，也能享受語法提示功能。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>關於PhpStorm Advanced Meta，請參考PhpStorm官網的<a href="https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Advanced+Metadata" target="_blank" rel="external">PhpStorm Advanced Metadata</a></span></span></span></p>
<p>不過這裡不用擔心，不需要會寫PhpStorm Advanced Metadata，因為Laravel IDE Helper幫大家寫好了。</p>
<p><strong>Strategy Pattern</strong><br><strong>routes.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/c9344cdc0264496dc906486ad54a8d384f77d178" target="_blank" rel="external">修改routes.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/show'</span>, <span class="string">'UserController@show'</span>);</span><br></pre></td></tr></table></figure></p>
<p>在routes.php加上URI與其對應的controller action。</p>
<p><strong>UserController.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/bd8024c814dfb1853f3ced6f16ac34cc79661070" target="_blank" rel="external">建立UserController.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">UserService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$userService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserService $userService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService <span class="variable">$userService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService = <span class="variable">$userService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第8行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> UserService */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$userService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserController constructor.</span><br><span class="line"> * <span class="doctag">@param</span> UserService $userService</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService <span class="variable">$userService</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userService = <span class="variable">$userService</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注入<code>UserService</code>。</p>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'admin'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>show()</code>呼叫<code>$this-&gt;userService</code>的<code>show()</code>，並將<code>admin</code>變數傳入。</p>
<p><strong>AbstractUser.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/2ad666a7c9e4ce9a6e1faa429c10a0f6e593d002" target="_blank" rel="external">建立AbstractUser.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/AbstractUser.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由<code>abstract class</code>定義<code>show()</code>，如此PhpStorm就能幫我們做語法提示與語法檢查了。</p>
<p><strong>Admin.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/28d1caa0ad9d2ad91a515f26ebb9677dc8c0ab3d" target="_blank" rel="external">建立Admin.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/Admin.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Admin</code>繼承<code>AbstractUser</code>，因為之前定義了<code>show()</code> abstract method，所以必須在此實作<code>show()</code>。</p>
<p><strong>Customer.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/3e86bbab2e1e14d3807cbe70d3a25d89cec17ea6" target="_blank" rel="external">建立Customer.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/Customer.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Customer</code>繼承<code>AbstractUser</code>，因為之前定義了<code>show()</code> abstract method，所以必須在此實作<code>show()</code>。</p>
<p><strong>UserService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/33b78da6b558e75a8c6791a49563966c6d42f695" target="_blank" rel="external">建立UserService.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/UserService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>\<span class="title">AbstractUser</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(string <span class="variable">$type</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        App::bind(AbstractUser::class, <span class="string">'App\Services\User\\'</span> . ucfirst(<span class="variable">$type</span>));</span><br><span class="line">        App::make(AbstractUser::class)-&gt;show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第10行<br><img src="/images/phpstorm/phpstorm-ide-helper/ide019.png" alt=""></p>
<p>透過<code>App::make()</code>產生的物件，PhpStorm並無法提供語法提示。</p>
<p><strong>產生PhpStorm Advanced Metadata</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/49f49b5a7c51e3a4a5af5c4609a866aa2e850860" target="_blank" rel="external">建立.phpstorm.meta.php</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan ide-helper:meta</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide020.png" alt=""></p>
<p>Laravel IDE Helper幫我們建立了PhpStorm Advanced Metadata，檔名為<code>.phpstorm.meta.php</code>。</p>
<p><strong>重新啟動PhpStorm</strong><br><img src="/images/phpstorm/phpstorm-ide-helper/ide021.png" alt=""></p>
<p>有了<code>.phpstorm.meta.php</code>，<code>App::make()</code>就會參考此檔，自動顯示語法提示。<span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>在<code>.phpstorm.meta.php</code>中定義了3種方式會啟動語法提示 : <code>ArrayAccess style</code>, <code>App::make()</code>與<code>app()</code>，其中Laravel IDE Helper在該檔中幫我們建立了很多class與interaface的<strong>別名</strong>，讓我們可以用更簡短的名稱使用service container。</span></span></span></p>
<h2 id="Laravel_Plugin">Laravel Plugin</h2><hr>
<p>我們還需要安裝<a href="https://github.com/Haehnchen/idea-php-laravel-plugin" target="_blank" rel="external">Laravel Plugin</a>，它包含了一些Laravel IDE Helper所沒有提供的語法提示功能。</p>
<h3 id="安裝-1">安裝</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide060.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Plugins</em></strong></p>
<p>輸入<code>Laravel</code>，按<code>Browse</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide061.png" alt=""></p>
<p>選擇<code>Laravel Plugin</code>，按<code>Install</code>安裝。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide062.png" alt=""></p>
<p>安裝完，按<code>Restart PhpStorm</code>重新啟動。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide063.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Other Settings -&gt; Laravel Plugin</em></strong></p>
<p>將<code>Enable plugin for this project</code>與<code>Use AutoPopop for completion</code>打勾。</p>
<p>再次重新啟動PhpStorm。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  這一步非常重要，很多人安裝完Laravel Plugin後，因為沒有Enable，導致Laravel Plugin從來沒有啟動過。</div>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  Laravel Plugin只要安裝一次即可，不過每次若開新Laravel專案，必須重新enable一次，否則Laravel Plugin不會啟動，這點很容易忽略。</div>
<h3 id="Controller">Controller</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide064.png" alt=""></p>
<p>在<code>routes.php</code>中，已經可以選擇controller與action。</p>
<h3 id="Route-1">Route</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide065.png" alt=""></p>
<p>在blade使用<code>route()</code>時，已經可以抓到在<code>routes.php</code>所定義的route別名。</p>
<h3 id="View">View</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide066.png" alt=""></p>
<p>在controller回傳view時，已經可以抓到在<code>resources/views</code>目錄下所定義的view。</p>
<p>除此之外，在blade中如<code>@include</code>也可以抓到其他blade。</p>
<h3 id="config::get()">config::get()</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide067.png" alt=""></p>
<p><code>config::get()</code>已經可以抓到array的key值了。</p>
<h2 id="Why_PHPDoc?">Why PHPDoc?</h2><hr>
<p>Laravel IDE Helper幫我們做了很多事情，讓PHP在PhpStorm可以如強型別語言一樣使用語法提示與語法檢查，但其黑魔法在哪裡呢?</p>
<p>如C#這種強型別語言，Visual Studio之所以能即時提供語法提示與語法檢查，因為當你在Visual Studio寫程式時，C# compiler就在背景默默地編譯，因此可以及時提供語法提示，且及時顯示語法檢查的警告，也因此Visual Studio需要更高檔的硬體支援。</p>
<p>但PHP沒有compiler，必須執行了才知道結果，所以PhpStorm所有的語法檢查與語法提示資訊都來自於PHPDoc，甚至可以說，<code>PhpStorm是在檢查你的PHPDoc，而不是在檢查PHP</code>。</p>
<p>Laravel IDE Helper幫我們做的，就是將Laravel部分的PHPDoc補齊。</p>
<p>接下來要談的，是你自己寫程式的部分，也就是Laravel IDE Helper沒有辦法幫你的部分，必須自己寫PHPDoc。<span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>若你對更多的PHPDoc指令有興趣，詳細請參考<a href="/phpstorm/phpstorm-phpdoc/">如何使用PHPDoc寫註解?</a></span></span></span></p>
<h2 id="自己寫的class">自己寫的class</h2><hr>
<h3 id="手動建立PHPDoc">手動建立PHPDoc</h3><ol>
<li><p>在PhpStorm輸入<code>/**</code>，然後按下&#8617;，PhpStorm會自動依據當時的游標的位置產生適當的PHPDoc blocks。</p>
</li>
<li><p>按熱鍵&#8984; + N，會產生<code>Generate</code>選單，選擇<code>PHPDoc Blocks</code>。<br><img src="/images/phpstorm/phpstorm-ide-helper/ide026.png" alt=""></p>
</li>
<li><p>在<code>適當時機</code>按熱鍵&#8997; + &#8617;，會出現<code>Generate PHPDoc for ...</code>。如剛建立完class, property或method時。<br><img src="/images/phpstorm/phpstorm-ide-helper/ide027.png" alt=""></p>
</li>
</ol>
<h3 id="Fields">Fields</h3><p><strong>語法</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> 型別 [變數名稱] [註解] */</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>型別</strong>可以是PHP原生型別，class，interface或trait。</li>
<li>假如下一行就是該變數，可以省略<strong>變數名稱</strong>。</li>
<li>可選擇性對該變數加上<strong>註解</strong>。</li>
</ul>
<p><strong>自動建立PHPDoc</strong><br>實務上建立field會有2種方式 :</p>
<ol>
<li>由constructor injection建立field。(如注入service, repository)</li>
<li>由setter與getter建立field。(如strategy, state, adpater,decorator pattern..設定物件)</li>
</ol>
<p>PhpStorm都提供了快速的方式自動建立PHPDoc。</p>
<p><strong>由Constructor Injection建立Field</strong><br><img src="/images/phpstorm/phpstorm-ide-helper/ide028.png" alt=""></p>
<p>新建立了<code>PostService</code>，按熱鍵&#8963; + N，顯示Generate視窗，選擇<code>Constructor...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide029.png" alt=""></p>
<p>PhpStorm替我們自動產生了constructor框架，我們想藉由constructor注入<code>UserService</code>，輸入<code>UserSer</code>就可以發現PhpStorm的語法提示已經出現了<code>UserService</code>，按&#8617;選擇之。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide030.png" alt=""></p>
<p>在constructor注入了<code>$userService</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide031.png" alt=""></p>
<p>在<code>$userService</code>之後按熱鍵&#8997; + &#8617;，顯示<code>Show Intention Actions</code>視窗，選擇<code>Update PHPDoc Comment</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide032.png" alt=""></p>
<p>由於在constructor的parameter已經有了type hint，因此產生的PHPDoc也自動加上了<code>UserService</code>型別。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide033.png" alt=""></p>
<p>在<code>$userService</code>之後按熱鍵&#8997; + &#8617;，顯示<code>Show Intention Actions</code>視窗，選擇<code>Initialize fields</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide034.png" alt=""></p>
<p>選擇要建立field的constructor parameter。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide035.png" alt=""></p>
<p>PhpStorm不只幫我們在constructor內補上code，還一併幫我們將field建好，而且PHPDoc也一併建立完成，還自動加上了型別。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  藉由PhpStorm這種流程建立field，不僅完全不需要打字，而且連PHPDoc也一併自動寫好，非常方便。</div>
<p><strong>由Setter與Getter建立Field</strong><br><img src="/images/phpstorm/phpstorm-ide-helper/ide036.png" alt=""></p>
<p>還有另外一類field是使用setter/getter建立，這種field就必須先手動建立field。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide037.png" alt=""></p>
<p>新建立了<code>PostService</code>，按熱鍵&#8963; + N，顯示Generate視窗，選擇<code>PHPDoc Blocks...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide038.png" alt=""></p>
<p>選擇要建立PHPDoc的field。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide039.png" alt=""></p>
<p>PhpStorm自動幫我們產生了<code>@var</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide040.png" alt=""></p>
<p>輸入<code>Pay</code>就可以發現PhpStorm的語法提示已經出現了<code>PaymentInterface</code>，按&#8617;選擇之。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide041.png" alt=""></p>
<p>加上了<code>PaymentInterface</code>型別。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide042.png" alt=""></p>
<p>按熱鍵&#8963; + N，顯示Generate視窗，選擇<code>Getters and Setters...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide043.png" alt=""></p>
<p>選擇要建立getter與setter的field。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide044.png" alt=""></p>
<p>PhpStorm自動幫我們建立了<code>$paymentService</code>的getter與setter。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  藉由PhpStorm這種流程建立field，僅需手動建立field，補上型別後，剩下的getter與setter都可自動建立，非常方便。</div>
<p><strong>Adapter Pattern</strong><br>實務上在接金流時，由於各家SDK所開的API都不一樣，導致我們處理上的困難，因此我們會使用adapter pattern，將各家API抽象化成相同的API，方便service處理。</p>
<p><strong>PayPalSDK.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/a3fd6f8ef9d28457f6012c89797309a54ebf01ef" target="_blank" rel="external">新增PayPalSDK.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/PayPalSDK.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayPalSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'PayPal pay '</span> . <span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在此為了講解方便，我們使用<code>PayPalSDK</code>模擬PayPal的付款API，其API為<code>pay()</code>。</p>
<p><strong>AliPaySDK.php</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/5d68b3a21bef2354704569be241d64568434f6b1" target="_blank" rel="external">新增AliPaySDK.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/AliPaySDK.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPaySDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> $amount</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bill</span><span class="params">(<span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'AliPay bill '</span> . <span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在此為了講解方便，我們使用<code>AliPalSDK</code>模擬支付寶的付款API，其API為<code>bill()</code>。</p>
<figure class="highlight php"><figcaption><span>app/Services/Payment/PaymentService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 設定第三方支付機構</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $paymentName</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPayment</span><span class="params">(string <span class="variable">$paymentName</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但我們原本<code>PaymentService</code>，API為<code>setPayment()</code>與<code>checkout()</code>，其中<code>setPayment()</code>為設定第三方支付機構，而<code>checkout()</code>為實際付款。</p>
<p>可以發現我們service定義的<code>checkout()</code>與PayPal的<code>pay()</code>與支付寶的<code>bill()</code>都不合，因此我們需要adapter pattern做一個轉接動作。</p>
<p><strong>PaymentInterface.php</strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/7eed09a13a2425e36b4f76c56efa4edd6f7aa4c7" target="_blank" rel="external">新增PaymentInterface.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/PaymentInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PaymentInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 使用金流付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>定義了<code>PaymentInterface</code>，為我們原本<code>PaymentService</code>所用的<code>checkout()</code>。</p>
<p><strong>PayPal.php</strong><span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/a8624e1185ed77e9480736eb27003ed32ae1e0aa" target="_blank" rel="external">新增PayPal.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/PayPal.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayPal</span> <span class="keyword">implements</span> <span class="title">PaymentInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PayPalSDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$payPalSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PayPal constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PayPalSDK $payPalSDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PayPalSDK <span class="variable">$payPalSDK</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;payPalSDK = <span class="variable">$payPalSDK</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 使用金流付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;payPalSDK-&gt;pay(<span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>PayPal</code>扮演adapter的角色，所以必須實現<code>PaymentInterface</code>的<code>checkout()</code>。</p>
<p>將扮演adaptee角色的<code>PayPalSDK</code>注入進來。</p>
<p>17行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 使用金流付款</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> int $amount</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;payPalSDK-&gt;pay(<span class="variable">$amount</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將<code>checkout()</code>轉換成<code>PayPalSDK</code>的<code>pay()</code>。</p>
<p><strong>AliPay.php</strong><span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/aa8ea09a7025bc9a11131238e3926ccea33cfdfb" target="_blank" rel="external">新增AliPay.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/PayPal.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">implements</span> <span class="title">PaymentInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AliPaySDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$aliPaySDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AliPay constructor.</span><br><span class="line">     * <span class="doctag">@param</span> AliPaySDK $aliPaySDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AliPaySDK <span class="variable">$aliPaySDK</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliPaySDK = <span class="variable">$aliPaySDK</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 使用金流付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliPaySDK-&gt;bill(<span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>AliPay</code>扮演adapter的角色，所以必須實現<code>PaymentInterface</code>的<code>checkout()</code>。</p>
<p>將扮演adaptee角色的<code>AliPaySDK</code>注入進來。</p>
<p>17行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 使用金流付款</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> int $amount</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;aliPaySDK-&gt;bill(<span class="variable">$amount</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將<code>checkout()</code>轉換成<code>AliPaySDK</code>的<code>pay()</code>。</p>
<p><strong>PaymentEnum.php</strong><span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/0afd8b3efddc40da45a110256420279a478ed183" target="_blank" rel="external">新增PaymentEnum.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/PaymentEnum.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentEnum</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> PayPal = <span class="string">'PayPal'</span>;</span><br><span class="line">    <span class="keyword">const</span> AliPay = <span class="string">'AliPay'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>PaymentService</code>的<code>setPayment()</code>要求我們傳字串，但由於將來會將此字串直接做<code>App::bind()</code>，為了減少人為typo，我們希望能提供類似強型別語言的<code>enum</code>，在傳入字串時只要用選的就好，不需直接打字。</p>
<p>不過由於PHP沒有提供<code>enum</code>，我們只能使用<code>abstract class</code> + <code>const</code>模擬類似<code>enum</code>的機制。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  PHP模擬的enum，與強型別語言enum的差別在於 : 強型別語言可以在輸入字串使用enum當型別，但PHP還是只能使用string當型別，因此無法如強型別語言透過enum幫你檢查所輸入的資料是否型別正確，不過最少在輸入字串時可以避免typo。</div>
<p><strong>UserController.php</strong><span class="margin-note-marker"><sup>22</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">22</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/b6b229ecd131230c27a6ab3555945063ffbfe6ba" target="_blank" rel="external">修改UserController.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">PaymentEnum</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PaymentService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">UserService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserService  */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$userService</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PaymentService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$paymentService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserService $userService</span><br><span class="line">     * <span class="doctag">@param</span> PaymentService $paymentService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService <span class="variable">$userService</span>, PaymentService <span class="variable">$paymentService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService = <span class="variable">$userService</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;paymentService = <span class="variable">$paymentService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'Admin'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;paymentService-&gt;setPayment(PaymentEnum::AliPay);</span><br><span class="line">        <span class="variable">$this</span>-&gt;paymentService-&gt;checkout(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將<code>PaymentService</code>也注入進來。</p>
<p>26行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'Admin'</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;paymentService-&gt;setPayment(PaymentEnum::AliPay);</span><br><span class="line">    <span class="variable">$this</span>-&gt;paymentService-&gt;checkout(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>$this-&gt;paymentService-&gt;setPayment()</code>設定要用什麼第三方支付機構，這裡使用了<code>PaymentEnum</code>來輸入字串，可以避免人為typo，且程式可讀性也更佳。</p>
<p>無論使用任何第三方支付，都使用相同的<code>$this-&gt;paymentService-&gt;checkout()</code>，若將來有新的第三方支付方式，只需新增class實現<code>PaymentInterface</code>即可，也不用修改<code>UserController</code>，，達到<strong>開放封閉原則</strong>的要求。</p>
<p><strong>PaymentService.php</strong><span class="margin-note-marker"><sup>23</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">23</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/19124db625a5f531a1ab748c8b93e4be4fc28655" target="_blank" rel="external">新增PaymentService.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PaymentService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">PaymentInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PaymentInterface */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$payment</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 設定第三方支付機構</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $paymentName</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPayment</span><span class="params">(string <span class="variable">$paymentName</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        App::bind(PaymentInterface::class, <span class="string">'App\Services\Payment\\'</span> . <span class="variable">$paymentName</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;payment = App::make(PaymentInterface::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;payment-&gt;checkout(<span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>11行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 設定第三方支付機構</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> string $paymentName</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPayment</span><span class="params">(string <span class="variable">$paymentName</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    App::bind(PaymentInterface::class, <span class="string">'App\Services\Payment\\'</span> . <span class="variable">$paymentName</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;payment = App::make(PaymentInterface::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將傳進的<code>$paymentName</code>字串，直接做<code>App::bind()</code>。</p>
<p>使用<code>App::make()</code>將剛剛bind的<code>PaymentInterface</code>建立成物件。</p>
<p>22行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 付款</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> int $amount</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;payment-&gt;checkout(<span class="variable">$amount</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於都實現<code>PaymentInterface</code>，所以只要使用統一個<code>checkout()</code>即可，不用擔心是什麼SDK，就算將來有新的第三方支付SDK，在<code>PaymentService</code>也不用修改，達到<strong>開放封閉原則</strong>的要求。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide022.png" alt=""></p>
<p>回到本文PHPDoc的重點，<code>$this-&gt;payment</code>因為有出現<code>checkout()</code>的語法提示，是因為第10行替<code>private $payment</code>加了<code>@var</code>註解，描述了<code>$payment</code>的型別為<code>PaymentInterface</code>，引此才能出現<code>checkout()</code>的語法提示。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide023.png" alt=""></p>
<p>若將<code>private $payment</code>的PHPDoc拿掉，我們發現PhpStorm將不再出現<code>checkout()</code>語法提示，因為PhpStorm不知道<code>$payment</code>的型別，因此無從顯示語法提示。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  這個範例除了示範adpater pattern外，也告訴我們使用<strong>@var</strong>替field描述型別的重要性，使用PHPDoc去描述field型別後，PhpStorm就能幫我們替field顯示語法提示，避免typo，也增加開發效率。</div>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  目前PHP 7的field還是沒有type hint，所以field的<strong>@var</strong>是唯一讓PhpStorm得知field型別的管道，非常重要。</div>
<h3 id="Method">Method</h3><p><strong>語法</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span><br><span class="line"> * <span class="doctag">@param</span> 型別 變數名稱 [註解] </span><br><span class="line"> * <span class="doctag">@return</span> 型別 [註解]</span><br><span class="line"> * <span class="doctag">@throws</span> 型別 [註解]</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>@param</code>為傳入參數，<code>@return</code>為回傳值，<code>@throws</code>為exception。</li>
<li><strong>型別</strong>可以是PHP原生型別，class，interface或trait。</li>
<li><code>@param</code>一定要加上<strong>變數名稱</strong>。</li>
<li>可選擇性加上<strong>註解</strong>。</li>
<li>若不傳回值，為<code>@return void</code></li>
</ul>
<p><strong>自動建立PHPDoc</strong><br>實務上建立method會有3種方式 :</p>
<ol>
<li>自行由<code>pubf</code>建立method。</li>
<li>由熱鍵&#8963; + I去實踐<code>abstract class</code>或<code>interface</code>的method。</li>
<li>由<code>extend abstract class</code>或<code>implements interface</code>建立method。</li>
</ol>
<p><strong>自行由pubf建立method</strong><br><img src="/images/phpstorm/phpstorm-ide-helper/ide045.png" alt=""></p>
<p>輸入<code>pubf</code>，按&#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide046.png" alt=""></p>
<p>產生<code>public function</code>框架。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide047.png" alt=""></p>
<p>自行輸入method名稱，輸入參數型別與名稱，與回傳型別，最後按熱鍵&#8997; + &#8617;，顯示<code>Generate PHPDoc for function</code>，按&#8617;繼續。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide048.png" alt=""></p>
<p>PhpStorm會自動幫你加上PHPDoc，包含<code>@param</code>與<code>@return</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide049.png" alt=""></p>
<p>在PHPDoc第一行加上人看得懂的method註解，描述此method的主要功能，中英文皆可。</p>
<p><strong>由熱鍵&#8963; + I去實踐abstract class或interface的method</strong></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide050.png" alt=""></p>
<p>使用<code>extends</code>繼承<code>abstract class</code>。<span class="margin-note-marker"><sup>24</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">24</span>這裡<code>OrderService</code>去繼承<code>AbstractUser</code><strong>完全不合理</strong>，純粹是為了demo方便。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide051.png" alt=""></p>
<p>按熱鍵&#8963; + I，選擇要實作的method。</p>
<p>要將<code>Add PhHPDoc</code>與<code>Copy from base class</code>打勾。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide052.png" alt=""></p>
<p>PhpStorm除了會幫我們建立method框架外，連PHPDoc也幫我複製過來了。</p>
<p><strong>由extend abstract class或implements interface建立method</strong></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide053.png" alt=""></p>
<p>使用<code>implements</code>去實現<code>interface</code>。<span class="margin-note-marker"><sup>25</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">25</span>這裡<code>OrderService</code>去實現<code>PaymentInterface</code><strong>完全不合理</strong>，純粹是為了demo方便。</span></span></span></p>
<p>按熱鍵&#8997; + &#8617;，顯示<code>Add method stubs</code>，按&#8617;繼續。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide054.png" alt=""></p>
<p>PhpStorm除了會幫我們建立method框架外，連PHPDoc也幫我複製過來了。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  在duck type時代，<strong>@param</strong>與<strong>@return</strong>是唯一讓PhpStorm得知method參數與回傳值型別的管道，非常重要，不過在PHP有type hint與PHP 7有return type之後，<strong>@param</strong>與<strong>@return</strong>沒之前重要，目前PhpStorm已經可以自行透過type hint與return type得知變數型別。</div>
<h2 id="Overloading">Overloading</h2><hr>
<h3 id="Property">Property</h3><p><strong>語法</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span><br><span class="line"> * <span class="doctag">@property</span> 型別 變數名稱 [註解] </span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
<p>若你有使用<code>__get()</code>與<code>__set()</code>動態產生property話，由於是動態產生，PhpStorm無從得知property名稱與其型別，必須依賴<code>@property</code>描述。<span class="margin-note-marker"><sup>26</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">26</span>關於property overloading更詳細的描述，請參考<a href="/php/php-cs/#Property_Overloading">PHP與C#語法快速導覽#Property Overloading</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/User.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * App\User</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@property</span> integer $id</span><br><span class="line"> * <span class="doctag">@property</span> string $name</span><br><span class="line"> * <span class="doctag">@property</span> string $email</span><br><span class="line"> * <span class="doctag">@property</span> string $password</span><br><span class="line"> * <span class="doctag">@property</span> string $remember_token</span><br><span class="line"> * <span class="doctag">@property</span> \Carbon\Carbon $created_at</span><br><span class="line"> * <span class="doctag">@property</span> \Carbon\Carbon $updated_at</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereId($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereName($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereEmail($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User wherePassword($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereRememberToken($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereCreatedAt($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereUpdatedAt($value)</span><br><span class="line"> * <span class="doctag">@mixin</span> \Eloquent</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes that are mass assignable.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [</span><br><span class="line">        <span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes excluded from the model's JSON form.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hidden</span> = [</span><br><span class="line">        <span class="string">'password'</span>, <span class="string">'remember_token'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>典型的應用就是Eloquent的model，會根據資料庫欄位動態產生property，Laravel IDE Helper就是利用<code>@property</code>幫我們描述欄位與型別。<span class="margin-note-marker"><sup>27</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">27</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/fd538464f84e4a6c552d933f6882c445be21255e" target="_blank" rel="external">在User.php加入@propery與@method註解</a></span></span></span></p>
<h3 id="Method-1">Method</h3><p><strong>語法</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span><br><span class="line"> * <span class="doctag">@method</span> 回傳型別 函式名稱 ([參數型別] 參數名稱)</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
<p>若你有使用<code>__call()</code>與<code>__callStatic()</code>動態產生method話，由於是動態產生，PhpStorm無從得知method名稱、參數與回傳型別，必須依賴<code>@method</code>描述。<span class="margin-note-marker"><sup>28</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">28</span>關於method overloading更詳細的描述，請參考<a href="/php/php-cs/#Method_Overloading">PHP與C#語法快速導覽#Method Overloading</a></span></span></span></p>
<p>之前的<code>User</code> model也看到了<code>@method</code>的使用。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide055.png" alt=""></p>
<p>在之前講migration之處，我們還留了一個未解的反白<code>unique()</code>，其實不只有<code>unique()</code>，一些常用的如<code>nullable()</code>、<code>unsigned()</code>與<code>index()</code>都會反白。</p>
<p>原因就是Laravel使用了method overloading的機制寫這些fluent method，所以PhpStorm無法得知，且目前Laravel IDE Helper也沒幫我們處理，必須自己解決。</p>
<figure class="highlight php"><figcaption><span>_migration_helper.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Support</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@method</span> Fluent first()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent after($column)</span><br><span class="line"> * <span class="doctag">@method</span> Fluent change()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent nullable()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent unsigned()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent unique()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent index()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent primary()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent default($value)</span><br><span class="line"> * <span class="doctag">@method</span> Fluent onUpdate($value)</span><br><span class="line"> * <span class="doctag">@method</span> Fluent onDelete($value)</span><br><span class="line"> * <span class="doctag">@method</span> Fluent references($value)</span><br><span class="line"> * <span class="doctag">@method</span> Fluent on($value)</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fluent</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>自己建立<code>_migration_helper.php</code>放在專案的跟目錄下，使用<code>@method</code>描述這些Laravel IDE Helper沒描述的method。<span class="margin-note-marker"><sup>29</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">29</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/9354d389b0c9a9de62208836e29c011f7dc3eaf1" target="_blank" rel="external">新增_migration_helper.php</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide056.png" alt=""></p>
<p><code>unique()</code>就不再反白了，以後<code>nullable()</code>、<code>unsigned()</code>與<code>index()</code>在PhpStorm也都有了語法提示。</p>
<h2 id="Collection">Collection</h2><hr>
<p>Collection是我在Laravel又愛又恨的東西，愛的是collection所提供的method遠比PHP原生array優雅強大，我幾乎完全使用collection取代PHP原生array，恨的是collection與array一樣，我無法得知collection內每個element的型別，因此在<code>foreach()</code>時，PhpStorm無法對collection內物件的property與method做語法提示。</p>
<figure class="highlight php"><figcaption><span>app\Repositories\UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> User */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserRepository constructor.</span><br><span class="line">     * <span class="doctag">@param</span> User $user</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User <span class="variable">$user</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 傳回所有User</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllUsers</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user-&gt;all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一個典型的repository應用，repository負責資料庫邏輯，在<code>getAllUsers()</code>傳回<code>Collection</code>。<span class="margin-note-marker"><sup>30</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">30</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/2edefa5286d4d8461c3985da0e3463b30e492f0e" target="_blank" rel="external">新增UserRepository.php</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide057.png" alt=""></p>
<p>一個典型的service應用，注入repository後，從<code>UserRepository</code>的<code>getAllUsers()</code>獲得collection，要<code>foreach()</code>時，發現PhpStorm無法對<code>User</code> model的資料庫欄位名稱做語法提示。</p>
<p>之前辛辛苦苦使用Laravel IDE Helper替<code>User</code> model加了PHPDoc，結果在使用collection之後，竟然完全用不上。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide058.png" alt=""></p>
<p>很多人的做法，是在<code>foreach()</code>之內補一行<code>/** @var User $user*/</code>描述<code>$user</code>型別，這樣雖然可以另<code>$user</code>出現資料庫欄位的語法提示，但缺點是這種inline PHPDoc很醜，且每次<code>foreach()</code>都要加一次很麻煩。</p>
<p>比較好的方式是將PHPDoc加在UserRepository的<code>@return</code>內。</p>
<figure class="highlight php"><figcaption><span>app\Repositories\UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> User */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserRepository constructor.</span><br><span class="line">     * <span class="doctag">@param</span> User $user</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User <span class="variable">$user</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 傳回所有User</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> Collection|User[]</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllUsers</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user-&gt;all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span><br><span class="line">  * 傳回所有User</span><br><span class="line">  *</span><br><span class="line">  * <span class="doctag">@return</span> Collection|User[]</span><br><span class="line">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllUsers</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user-&gt;all();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>@return</code>內除了<code>Collection</code>外，還加上了<code>User[]</code>，這是模仿Java array的宣告方式，目的是告訴PhpStorm這個物件除了是collection，其每個item內的型別是<code>User</code>，因為描述了兩種型別資訊，中間要加上<code>|</code>符號。<span class="margin-note-marker"><sup>31</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">31</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/cf21d33d14fc3d11ef22de657e49162ca72f4aaf" target="_blank" rel="external">UserRepostory.php加上User[]註解</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide059.png" alt=""></p>
<p>再也不用每個<code>foreach()</code>都補上inline PHPDoc，就可以讓PhpStorm對collection內的model做資料庫欄位名稱的語法提示。<span class="margin-note-marker"><sup>32</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">32</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/cb8eda4a462a75185fb8a457f3440abbe730fd8a" target="_blank" rel="external">新增UserService.php</a></span></span></span></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Laravel IDE Helper + Laravel Plugin幫我們補上了大部分Laravel部分的PHPDoc，但自己寫的class，則有賴自己使用PHPDoc。</li>
<li>隨著PHP 7對type hint的支援更加完整，PHPDoc的重要性沒以往重要，不過對於field，collection與overloading，目前還是得依賴PHPDoc，PhpStorm才能達到較滿意的語法提示與語法檢查功能。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52ServiceContainerMeta" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[利用PHPDoc發揮PhpStorm的威力]]>
    
    </summary>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="PHPDoc" scheme="http://oomusou.io/tags/PHPDoc/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用PhpStorm實現Move Assignments to Paramters?]]></title>
    <link href="http://oomusou.io/refactor/refactor-remove-assignments-to-parameters/"/>
    <id>http://oomusou.io/refactor/refactor-remove-assignments-to-parameters/</id>
    <published>2016-03-02T06:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>若我們直接對參數做修改，會使得將來的<strong>Extract Method</strong>難度更高，因此在執行<strong>Extract Method</strong>之前，我們常常會執行<strong>Move Assignment to Parameters</strong>，先將參數指定給<strong>暫存變數</strong>，然後將後續的程式全部改成修改此<strong>暫存變數</strong>。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>PhpStorm 10.0.3</p>
<h2 id="定義">定義</h2><hr>
<p>在程式中對參數的值進行修改 =&gt; <strong>以一個暫時變數取代該參數</strong>。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">discount</span><span class="params">(int <span class="variable">$inputVal</span>, int <span class="variable">$quantity</span>, int <span class="variable">$yearToDate</span>)</span> : <span class="title">int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$inputVal</span> &gt; <span class="number">50</span>)  &#123;</span><br><span class="line">        <span class="variable">$inputVal</span> -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重構成<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">discount</span><span class="params">(int <span class="variable">$inputVal</span>, int <span class="variable">$quantity</span>, int <span class="variable">$yearToDate</span>)</span> : <span class="title">int</span> </span>&#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$inputVal</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$inputVal</span> &gt; <span class="number">50</span>)  &#123;</span><br><span class="line">        <span class="variable">$result</span> -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="目的">目的</h2><hr>
<ol>
<li>提升程式的可讀性，參數只用來代表<strong>傳進來的資料</strong>。</li>
<li>不要混用<code>pass by value</code>與<code>pass by reference</code>的資料處理方式。</li>
<li>保持參數不變，方便<strong>Extract Method</strong>進行。</li>
</ol>
<h2 id="重構前的程式碼">重構前的程式碼</h2><hr>
<p>在<a href="http://www.tenlong.com.tw/items/9861547533?item_id=45657" target="_blank" rel="external">重構 : 改善既有程式的設計 (二版)</a>的範例程式，改寫成PHP後的程式碼如下 : <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RemoveAssginmentToParameters/commit/c909bdf6c3e83142e9e236e4212edbdd7f9b6e20" target="_blank" rel="external">重構前的程式</a></span></span></span><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $inputVal</span><br><span class="line">     * <span class="doctag">@param</span> int $quantity</span><br><span class="line">     * <span class="doctag">@param</span> int $yearToDate</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">discount</span><span class="params">(int <span class="variable">$inputVal</span>, int <span class="variable">$quantity</span>, int <span class="variable">$yearToDate</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$inputVal</span> &gt; <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$quantity</span> &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$yearToDate</span> &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$inputVal</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們看到<code>$inputVal</code>為參數，但在12行、16行、20行卻對<code>$inputVal</code>去做修改。</p>
<p>因此我們想使用<strong>Remove Assignments to Parameters</strong>對<code>$inputVal</code>做重構。</p>
<h2 id="Move_Assignments_to_Parameters">Move Assignments to Parameters</h2><hr>
<h3 id="新增暫時變數">新增暫時變數</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $inputVal</span><br><span class="line">     * <span class="doctag">@param</span> int $quantity</span><br><span class="line">     * <span class="doctag">@param</span> int $yearToDate</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">discount</span><span class="params">(int <span class="variable">$inputVal</span>, int <span class="variable">$quantity</span>, int <span class="variable">$yearToDate</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$inputVal</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$inputVal</span> &gt; <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$quantity</span> &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$yearToDate</span> &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$inputVal</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="variable">$inputVal</span>;</span><br></pre></td></tr></table></figure></p>
<p>為了不讓程式直接修改參數<code>$inputVal</code>，我們新增了暫時變數<code>$result</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RemoveAssginmentToParameters/commit/4c5eb086073ea4221eda4b0a579d9491c65fbbdc" target="_blank" rel="external">新增臨時變數</a></span></span></span></p>
<h3 id="修改暫存變數">修改暫存變數</h3><p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove000.png" alt=""></p>
<p>我們知道20行、24行、28行與31行的<code>$inputVal</code>都要改成<code>$result</code>，很可惜目前PhpStorm的重構，並無法直接支援<strong>Remove Assignments to Parameters</strong>。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>若直接根據<code>$inputVal</code>執行<strong>Rename</strong>，會將所有的<code>$inputVal</code>都改成<code>$result</code>，可惜這也不是我們所要的。</span></span></span></p>
<p>以下介紹兩種方法 :</p>
<h4 id="手動重構">手動重構</h4><p>按住&#8997;，將所有你想重構的變數<strong>後面</strong>用滑鼠點一下，如上圖20行、24行、28行與31行之後都出現了<strong>游標</strong>閃爍。<br><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove001.png" alt=""></p>
<p>之後按&#8998;，會發現這4個<code>$inputVal</code>已經可連動刪除了。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove002.png" alt=""></p>
<p>可一次只將4個<code>$inputVal</code>改成<code>$result</code>。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RemoveAssginmentToParameters/commit/ea90ba169ce66e53eef4936d3a48a0ba4f05076c" target="_blank" rel="external">修改暫存變數</a></span></span></span></p>
<h4 id="半自動重構">半自動重構</h4><p>若要重構的變數很多，可能無法立刻判斷要重構哪些變數，可以由PhpStorm幫我們搜尋，我們再判斷此變數是否必須重構。<br><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove003.png" alt=""></p>
<p>用滑鼠點一下<strong>第一個</strong>與預期重構變數<strong>同名</strong>的變數，可以是要重構的變數，也可以是不要重構的變數。</p>
<p>若此變數<strong>正是</strong>欲重構的變數，則按&#8963; + G，表示選擇了此變數。</p>
<p>若此變數<strong>不是</strong>欲重構的變數，則按&#8984; + G，表示繼續搜尋與此變數同名的變數。</p>
<p>因為第一個<code>$inputVal</code>並非要重構的變數，因此按&#8984; + G繼續搜尋下一個變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove004.png" alt=""></p>
<p>此<code>$inputVal</code>也不是我們要重構的變數，因此按&#8984; + G繼續搜尋下一個變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove005.png" alt=""></p>
<p>此<code>$inputVal</code>為我們要重構的變數，因此按&#8963; + G選擇了此變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove006.png" alt=""></p>
<p>按&#8963; + G之後，預設會一併選擇下一個變數，若此變數不是你要重構的變數，一樣按&#8984; + G跳過，若要選擇此變數則按&#8963; + G選擇了此變數。</p>
<p>此<code>$inputVal</code>為我們要重構的變數，因此按&#8963; + G選擇了此變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove007.png" alt=""></p>
<p>此<code>$inputVal</code>為我們要重構的變數，因此按&#8963; + G選擇了此變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove008.png" alt=""></p>
<p>如此我們就選擇了4個我們要重構的變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove009.png" alt=""></p>
<p>一併將4個<code>$inputVal</code>都改成<code>$result</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm雖然已經內建很多重構功能，不過有些重構還是無法直接完成，需靠一些技巧。</li>
<li>&#8997; + 滑鼠點擊，可手動選擇要重構的變數。</li>
<li>&#8984; + G與&#8963; + G，可半自動選擇要重構的變數。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52RemoveAssginmentToParameters" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[PhpStorm無法直接實現此重構，需搭配一些技巧]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用變數建立object?]]></title>
    <link href="http://oomusou.io/php/php-variable-object/"/>
    <id>http://oomusou.io/php/php-variable-object/</id>
    <published>2016-02-29T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>傳統我們會使用<code>if else</code>判斷，建立不同的物件，但由於JavaScript與PHP動態語言的特性，我們可以將要建立的物件的<strong>class名稱</strong>以<strong>變數</strong>表示，直接以該變數建立物件。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 5<br>PHP 7.0<br>Laravel 5.2.22</p>
<h2 id="JavaScript">JavaScript</h2><hr>
<h3 id="if_else">if else</h3><p>傳統若要根據不同的變數值，建立不同的物件，我們會使用<code>if else</code>方式 :<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/VariableObject/commit/1d4e69d35a44a02d22a5bb60b8f33573cd6aaa2a" target="_blank" rel="external">JavaScript:傳統使用if else建立object</a></span></span></span></p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Admin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">'admin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type == <span class="string">'admin'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> Admin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> Customer();</span><br><span class="line">&#125;</span><br><span class="line">user.show()</span><br></pre></td></tr></table></figure>
<p>15行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (type == <span class="string">'admin'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> Admin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> Customer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>if else</code>去判斷變數值，建立不同物件。</p>
<h3 id="Variable">Variable</h3><p>若將class名稱使用變數表示，則不需要<code>if else</code>判斷 : <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/VariableObject/commit/0a4a1219d0f5285e88507795e90538ee740ca643" target="_blank" rel="external">JavaScript:動態使用變數建立object</a></span></span></span></p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Admin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">'admin'</span>;</span><br><span class="line"><span class="keyword">var</span> className = (type == <span class="string">'admin'</span>) ? <span class="string">'Admin'</span> : <span class="string">'Customer'</span>;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">this</span>[className];</span><br><span class="line">user.show()</span><br></pre></td></tr></table></figure>
<p>14行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> className = (type == <span class="string">'admin'</span>) ? <span class="string">'Admin'</span> : <span class="string">'Customer'</span>;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">this</span>[className];</span><br></pre></td></tr></table></figure></p>
<p>判斷<code>type</code>，並將要建立物件的class名稱存入<code>className</code>變數。</p>
<p>在JavaScript，若要建立物件，有以下3種方式 :</p>
<ol>
<li>new object.method </li>
<li>new object[‘method’] : 其中’method’是<strong>字串</strong>。</li>
<li>new object[method] : 其中method是<strong>變數</strong>。</li>
</ol>
<p>因為第3種方式，我們可以將class名稱以變數方式傳入<code>[]</code>。</p>
<h2 id="PHP">PHP</h2><hr>
<p>PHP也可以達到類似JavaScript的功能。</p>
<h3 id="if_else-1">if else</h3><p>傳統若要根據不同的變數值，建立不同的物件，我們會使用<code>if else</code>方式 :<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/VariableObject/commit/fc5a27608b246fd1648b78204e815ac50eed1906" target="_blank" rel="external">PHP:傳統使用if else建立object</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span> = <span class="string">'admin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$type</span> == <span class="string">'admin'</span>) &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> Admin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> Customer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span>-&gt;show();</span><br></pre></td></tr></table></figure>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$type</span> == <span class="string">'admin'</span>) &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> Admin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> Customer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>if else</code>去判斷變數值，建立不同物件。</p>
<h3 id="Variable-1">Variable</h3><p>若將class名稱使用變數表示，則不需要<code>if else</code>判斷 : <span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/VariableObject/commit/0e06cb6748d7355137e5ca061b221b7edf4f5fa3" target="_blank" rel="external">PHP:動態使用變數建立object</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span> = <span class="string">'admin'</span>;</span><br><span class="line"><span class="variable">$className</span> = (<span class="variable">$type</span> == <span class="string">'admin'</span>) ? <span class="string">'Admin'</span> : <span class="string">'Customer'</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="variable">$className</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;show();</span><br></pre></td></tr></table></figure>
<p>18行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$className</span> = (<span class="variable">$type</span> == <span class="string">'admin'</span>) ? <span class="string">'Admin'</span> : <span class="string">'Customer'</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="variable">$className</span>;</span><br></pre></td></tr></table></figure></p>
<p>判斷<code>$type</code>，並將要建立物件的class名稱存入<code>$className</code>變數。</p>
<p>在PHP，允許我們<code>new</code>之後直接加上變數建立物件。</p>
<h3 id="Type_Hint">Type Hint</h3><p>談到這裡，雖然我們已經可以在JavaScript與PHP使用變數來建立物件，由於class名稱是<strong>字串</strong>，我們甚至可以將class名稱存在<strong>設定檔</strong>內，如<code>config/app.php</code>，將來若因為需求改變，需改變建立物件的class名稱時，只需修改設定檔即可，並透過<code>config::get()</code>讀取class名稱，原來程式碼完全不用修改，也算是達到<strong>開放封閉原則</strong>的要求。</p>
<p>不過這種方式有個致命傷，就是那個<code>show()</code>函式並沒有硬性規定(如interface或abstract class)，也就是動態語言所謂的<strong>duck type</strong>，也因為並沒有任何機制規定<code>show()</code>，只有程式設計師自己知道必須要有<code>show()</code>，也因此PhpStorm將無法幫你對<code>show()</code>做<strong>語法提示</strong>與<strong>語法檢查</strong>。</p>
<p>但隨著PHP的Java化之後(type hint + service container)，PHP成為唯一一個同時擁有duck type與strong type的程式語言，尤其PHP 7之後的type hint更加完整(scalar type hint + return type)，若搭配service container，將可解決之前<code>show()</code>的問題。</p>
<p><strong>routes.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/ea791292335418ff874e5403bedc69d18adca430" target="_blank" rel="external">修改routes.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Http/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/show'</span>, <span class="string">'UserController@show'</span>);</span><br></pre></td></tr></table></figure>
<p>在routes.php加上URI與其對應的controller action。</p>
<p><strong>UserController.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/f9dc64beb3983b2c2fd4aa24c630c6f3756237e3" target="_blank" rel="external">建立UserController.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">UserService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$userService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserService $userService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService <span class="variable">$userService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService = <span class="variable">$userService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第8行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> UserService */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$userService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserController constructor.</span><br><span class="line"> * <span class="doctag">@param</span> UserService $userService</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService <span class="variable">$userService</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userService = <span class="variable">$userService</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注入<code>UserService</code>。</p>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'admin'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>show()</code>呼叫<code>$this-&gt;userService</code>的<code>show()</code>，並將<code>admin</code>變數傳入。</p>
<p><strong>UserService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/7cffa929a1b9f7a07ad90faceda9a304ecd45e99" target="_blank" rel="external">建立UserService.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/UserService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>\<span class="title">UserFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserFactory */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$userFactory</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserFactory $userFactory</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserFactory <span class="variable">$userFactory</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userFactory = <span class="variable">$userFactory</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(string <span class="variable">$type</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable">$this</span>-&gt;userFactory-&gt;create(<span class="variable">$type</span>);</span><br><span class="line">        <span class="variable">$user</span>-&gt;show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第7行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** <span class="doctag">@var</span> UserFactory */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$userFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> UserFactory $userFactory</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserFactory <span class="variable">$userFactory</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userFactory = <span class="variable">$userFactory</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注入<code>UserFactory</code>，專門負責建立<code>Admin</code>或<code>Customer</code>物件。</p>
<p>19行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(string <span class="variable">$type</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$this</span>-&gt;userFactory-&gt;create(<span class="variable">$type</span>);</span><br><span class="line">    <span class="variable">$user</span>-&gt;show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>$this-&gt;userFactory</code>的<code>create()</code>建立物件，將<code>$type</code>變數傳入，由<code>UserFactory</code>決定要建立哪個物件。</p>
<p>無論建立什麼物件，都使用相同的<code>show()</code>，這就是物件導向的<strong>多型</strong>。</p>
<p><strong>AbstractUser.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/da4f54692febda4937d98834e3b2b68da219f152" target="_blank" rel="external">建立AbstractUser.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/AbstractUser.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由<code>abstract class</code>定義<code>show()</code>，如此PhpStorm就能幫我們做語法提示與語法檢查了。</p>
<p><strong>Admin.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/0f22afecf4be28d6102f3b86e0e5382a10ab0182" target="_blank" rel="external">建立Admin.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/Admin.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Admin</code>繼承<code>AbstractUser</code>，因為之前定義了<code>show()</code> abstract method，所以必須在此實作<code>show()</code>。</p>
<p><strong>Customer.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/3e86bbab2e1e14d3807cbe70d3a25d89cec17ea6" target="_blank" rel="external">建立Customer.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/Customer.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Customer</code>繼承<code>AbstractUser</code>，因為之前定義了<code>show()</code> abstract method，所以必須在此實作<code>show()</code>。</p>
<p><strong>UserFactory</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/e2edbb3492b6d49b5e0a19186e28a142d4426b45" target="_blank" rel="external">建立UserFactory.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/UserFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $type</span><br><span class="line">     * <span class="doctag">@return</span> AbstractUser</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(string <span class="variable">$type</span>)</span> : <span class="title">AbstractUser</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        App::bind(AbstractUser::class, <span class="string">'App\Services\User\\'</span> . ucfirst(<span class="variable">$type</span>));</span><br><span class="line">        <span class="keyword">return</span> App::make(AbstractUser::class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重點在此，使用了<code>App::bind()</code>，將abstract class與concrete class綁定，其中concrete class的class名稱為變數。</p>
<p>然後再使用<code>App::make()</code>建立綁定後的物件。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上PHP建議先考慮使用type hint的strong type，這種方式PhpStorm支援較好，但是duck type也不是不能用，可以當成<strong>泛型</strong>使用，也就是當你不想考慮其型別時，就不要加上type hint，故意模糊其型別。</li>
<li>在PHP與Laravel，透過<code>App::bind()</code>與<code>App::make()</code>也可以使用變數建立object，還額外得到type hint與PhpStorm的支援。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a>上找到。</p>
<ol>
<li><a href="https://github.com/oomusou/VariableObject/" target="_blank" rel="external">JavaScript與PHP使用變數建立物件</a></li>
<li><a href="https://github.com/oomusou/Laravel52ServiceContainer" target="_blank" rel="external">PHP與Laravel使用Service Container建立物件</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[使用變數建立object取代if else]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://oomusou.io/tags/JavaScript/"/>
    
      <category term="PHP" scheme="http://oomusou.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用變數執行method?]]></title>
    <link href="http://oomusou.io/javascript/javascript-variable-method/"/>
    <id>http://oomusou.io/javascript/javascript-variable-method/</id>
    <published>2016-02-28T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>傳統我們會使用<code>if else</code>判斷，執行不同的method，但由於JavaScript與PHP動態語言的特性，我們可以將要執行的method名稱以<strong>變數</strong>表時，直接以該變數執行method。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 5<br>PHP 7.0</p>
<h2 id="JavaScript">JavaScript</h2><hr>
<h3 id="if_else">if else</h3><p>傳統若要根據不同的property值，執行不同method，我們會使用<code>if else</code>方式 :<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/VariableMethod/commit/6940be98f2c632a73d14d6e09fe80d11970d60d4" target="_blank" rel="external">JavaScript:傳統使用if else切換method</a></span></span></span></p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">showed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.showed = showed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.toggleShow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="keyword">this</span>.showed) &#123;</span><br><span class="line">            <span class="keyword">this</span>.show();</span><br><span class="line">    	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.hide();</span><br><span class="line">    	&#125; </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'User show'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.hide = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	print(<span class="string">'User hide'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="literal">false</span>);</span><br><span class="line">user.toggleShow();</span><br></pre></td></tr></table></figure>
<p>第4行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.toggleShow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.showed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.hide();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>if else</code>去判斷property值，執行不同method。</p>
<h3 id="Variable">Variable</h3><p>若將method名稱使用變數表示，則不需使用<code>if else</code>判斷 :<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/VariableMethod/commit/d40603aa1dd6de09c88da004ae54942cdbdf4076" target="_blank" rel="external">JavaScript:動態使用變數切換method</a></span></span></span></p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">showed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.showed = showed;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.toggleShow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> method = (<span class="keyword">this</span>.showed) ? <span class="string">'show'</span> : <span class="string">'hide'</span>;</span><br><span class="line">        <span class="keyword">this</span>[method]();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'User show'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.hide = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'User hide'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="literal">false</span>);</span><br><span class="line">user.toggleShow();</span><br></pre></td></tr></table></figure>
<p>第4行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.toggleShow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> method = (<span class="keyword">this</span>.showed) ? <span class="string">'show'</span> : <span class="string">'hide'</span>;</span><br><span class="line">    <span class="keyword">this</span>[method]();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>判斷<code>this.showed</code>，並將要執行的method名稱存入<code>method</code>變數。</p>
<p>在JavaScript，若要執行物件的method，有以下3種方式 :</p>
<ol>
<li>object.method </li>
<li>object[‘method’] : 其中’method’是<strong>字串</strong>。</li>
<li>object[method] : 其中method是<strong>變數</strong>。</li>
</ol>
<p>因為第3種方式，我們可以將method名稱以變數方式傳入<code>[]</code>。</p>
<h2 id="PHP">PHP</h2><hr>
<p>PHP也可以達到類似JavaScript的功能。</p>
<h3 id="if_else-1">if else</h3><p>傳統若要根據不同的field值，執行不同method，我們會使用<code>if else</code>方式 :<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/VariableMethod/commit/23f3aed07bc6f922585592e84123712b4795fbf0" target="_blank" rel="external">PHP:傳統使用if else切換method</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$showed</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__constructor</span><span class="params">(bool <span class="variable">$showed</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;showed = showed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleShow</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;showed) &#123;</span><br><span class="line">            <span class="variable">$$this</span>-&gt;show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'User show'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hide</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'User hide'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> User(<span class="keyword">false</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;toggleShow();</span><br></pre></td></tr></table></figure>
<p>第10行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleShow</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;showed) &#123;</span><br><span class="line">        <span class="variable">$$this</span>-&gt;show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>if else</code>去判斷field值，執行不同method。</p>
<h3 id="Variable-1">Variable</h3><p>若將method名稱使用變數表示，則不需使用<code>if else</code>判斷 :<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/VariableMethod/commit/2e549e01e79398dd6977d4f4fde189837667c42c" target="_blank" rel="external">PHP:動態使用變數切換method</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$showed</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__constructor</span><span class="params">(bool <span class="variable">$showed</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;showed = showed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleShow</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$method</span> = (<span class="variable">$this</span>-&gt;showed) ? <span class="string">'show'</span> : <span class="string">'hide'</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'User show'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hide</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'User hide'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> User(<span class="keyword">false</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;toggleShow();</span><br></pre></td></tr></table></figure>
<p>第10行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleShow</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$method</span> = (<span class="variable">$this</span>-&gt;showed) ? <span class="string">'show'</span> : <span class="string">'hide'</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>判斷<code>$this-&gt;showed</code>，並將要執行的method名稱存入<code>$method</code>變數。</p>
<p>在PHP，允許我們在<code>-&gt;</code>之後直接加上<strong>變數</strong>，可以是field或method，若是method，還要加上<code>()</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>JavaScript與PHP都允許我們將欲執行的method名稱以變數表示。</li>
<li>因為method名稱是<strong>字串</strong>，所以我們可以將method名稱存在<strong>設定檔</strong>內，如<code>config/app.php</code>，將來若因為需求改變，須改變執行的method時，只需修改設定檔即可，並透過<code>config::get()</code>讀取method名稱，原來程式碼完全不用修改，達到<strong>開放封閉原則</strong>的要求。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/VariableMethod" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用變數執行method取代if else]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://oomusou.io/tags/JavaScript/"/>
    
      <category term="PHP" scheme="http://oomusou.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用PhpStorm實現TDD、重構與偵錯?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-tdd-refactor/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-tdd-refactor/</id>
    <published>2016-01-14T12:23:43.000Z</published>
    <updated>2016-03-22T14:31:42.000Z</updated>
    <content type="html"><![CDATA[<p>TDD要求我們先寫測試，雖然會在專案一開始多花一點時間，但只要我們選對工具，就可將花在<strong>測試</strong>、<strong>重構</strong>與<strong>偵錯</strong>的時間再省回來，讓我們雖然輸在起跑點，卻可贏在決勝點。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>OS X 10.11.2<br>PHP 7.0.0<br>Laravel 5.1.28<br>PhpStorm 10.0.3</p>
<h2 id="物件導向">物件導向</h2><hr>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/xwin000.jpg" alt=""></p>
<p>假如今天PM開的需求，就是希望我們做出一台<strong>X戰機</strong>，我們當然可以完全手刻出符合Spec的X戰機，但只要需求一變，需要我們<strong>改</strong>功能，<strong>加</strong>功能時，我們就很頭大了。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/xwin001.jpg" alt=""></p>
<p>因此我們需要將X戰機<strong>樂高化</strong>，<strong>改</strong>功能只要<strong>換</strong>樂高積木，<strong>加</strong>功能只要<strong>加</strong>樂高積木即可。</p>
<p><strong>物件導向</strong>簡單的說就是<strong>樂高導向</strong>，每個<strong>樂高積木</strong>就是<code>class</code>，樂高積木的<strong>規格</strong>就是<code>interface</code>或<code>abstract class</code>，只要符合規格的積木，我們都可以<strong>換掉</strong>或<strong>加上去</strong>。</p>
<h3 id="SOLID">SOLID</h3><p>程式語言提供了各種物件導向程式的<strong>語法</strong>，倒底要怎樣寫才是符合物件導向精神的程式呢?</p>
<p><strong>SOLID原則</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>詳細請參考大澤木小鐵的<a href="http://slides.com/jaceju/design-patterns-by-examples#/" target="_blank" rel="external">從實例學習設計模式 威力加強版 使用PHP</a></span></span></span></p>
<ol>
<li><strong>S</strong> : <strong>Single Responsibility Principle</strong> (單一職責原則)</li>
<li><strong>O</strong> : <strong>Open Closed Principle</strong> (開放封閉原則)</li>
<li><strong>L</strong> : <strong>Liskov Substitution Principle</strong> (里氏替換原則)，<strong>Least Knowledge Principle</strong> (最小知識原則)</li>
<li><strong>I</strong> : <strong>Interface Segregation Principle</strong> (介面隔離原則)</li>
<li><strong>D</strong> : <strong> Dependency Inversion Principle</strong> (依賴反轉原則)</li>
</ol>
<p>Laravel的作者Taylor Otwell曾有一段話 : <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>詳細請參考<a href="http://blog.turn.tw/?p=957" target="_blank" rel="external">Laravel之父 : 學習出色的Design Pattern</a></span></span></span></p>
<blockquote><p>如果有人想成為更棒的PHP工程師，你會怎麼建議？</p>
<p>學習出色的Design Pattern。這不只適用在PHP。你可以在任何程式語言使用這些pattern。尤其是SOLID。把這五個徹底學好，它會把你帶到新的境界，我每次寫code幾乎都在想這五個。</p>
<footer><strong>Taylor Otwell</strong></footer></blockquote>
<p>除了Design Pattern，重點在於更根本的<strong>SOLID</strong>，這5點才是物件導向的心法。</p>
<h3 id="設計模式">設計模式</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/dp.jpg" alt=""></p>
<p><strong>設計模式</strong>其實就是大神們留下來<strong>好的</strong>物件導向<strong>設計範本</strong>。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span><a href="http://www.tenlong.com.tw/items/9572054112?item_id=997944" target="_blank" rel="external">物件導向設計模式-可再利用物件導向軟體之要素</a></span></span></span></p>
<p>優點 : </p>
<ol>
<li><strong>具體方案</strong> : 至少是個具體的物件導向設計方式，不再流於抽象概念。</li>
<li><strong>用得巧就很棒</strong> : 只要在<strong>適當的場合</strong>，使用<strong>適當的模式</strong>，就會非常漂亮。</li>
</ol>
<p>缺點 :</p>
<ol>
<li><strong>學習門檻高</strong> : 理解設計模式已經<strong>不容易</strong>，要套用在實務上<strong>更難</strong>，很依賴<strong>天份</strong>。</li>
<li><strong>容易over design</strong> : 初學者容易一開始就套大量<strong>設計模式</strong>，導致系統提前<strong>過於複雜</strong>。</li>
</ol>
<h3 id="重構">重構</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor.jpg" alt=""></p>
<p>將既有的程式<strong>整形</strong>成符合物件導向精神的程式。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span><a href="http://www.tenlong.com.tw/items/9861547533?item_id=45657" target="_blank" rel="external">重構 : 改善既有程式的設計 (二版)</a></span></span></span></p>
<p>優點 :</p>
<ol>
<li><strong>學習門檻較低</strong> : 重構招式較平易近人，容易學習。</li>
<li><strong>可套用在legacy code</strong> : 不再只有新的專案才能物件導向。</li>
</ol>
<p>缺點 :</p>
<ol>
<li><strong>需要依賴測試做保障</strong> : 重構需要頻繁的測試，也需要測試保證重構沒有出錯。</li>
</ol>
<h3 id="TDD">TDD</h3><p>既然<strong>重構</strong>需要<strong>測試</strong>，到底要<strong>先</strong>寫測試，還是<strong>後</strong>寫測試呢?</p>
<p><strong>TDD</strong>的全名為<strong>Test Driven Development</strong> (測試驅動開發) 顛覆大家以往的習慣，強調<code>先寫測試，再寫程式</code>，整個流程是 :</p>
<img src="/images/phpstorm/phpstorm-tdd-refactor/solid000.svg" width="750">
<p>優點 :</p>
<ol>
<li><strong>提供重構堅固的屏障</strong> : 有寫測試，我們才敢放膽重構。</li>
<li><strong>避免over design</strong> : 只為<span class="label label-danger">紅燈</span>變成<span class="label label-success">綠燈</span>寫程式，不會寫出額外的程式。</li>
<li><strong>Top Down思維</strong> : 因為測試先寫，會以<strong>測試好寫</strong>的角度去寫程式， 會比較接近使用者，也符合物件導向的精神。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>詳細請參考<a href="/tdd/tdd-solid/">使用TDD實踐SOLID</a></span></span></span></li>
<li><strong>偵錯快速</strong> : 將來要debug時，只要一跑測試，就可以快速找到錯誤所在。</li>
</ol>
<p>缺點 :</p>
<ol>
<li><strong>先寫測試，一開始會多花一點時間</strong> : 所以我們要找更強的工具幫我們將時間省回來。</li>
<li><strong>需要學習如何寫測試</strong> : 寫測試有不少技巧，如<strong>3A原則</strong>、<strong>Mock物件</strong>、<strong>依賴注入</strong>、<strong>Assertion</strong>…。</li>
</ol>
<h2 id="設定環境">設定環境</h2><hr>
<h3 id="建立Laravel專案">建立Laravel專案</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ composer create-project laravel/laravel Laravel51Refactor_demo 5.1 --prefer-dist</span><br></pre></td></tr></table></figure>
<p>在命令列下<code>composer create-project</code>指令建立Laravel專案。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/f8cf3f177f855569ba9f80dfa4941975ec58a116" target="_blank" rel="external">composer create-project</a></span></span></span></p>
<h3 id="安裝Laravel_Elixir">安裝Laravel Elixir</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ npm install</span><br></pre></td></tr></table></figure>
<p>由於我們會使用Laravel Elixir在背後自動執行測試，因此要使用<code>npm install</code>。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/817a91c43ee3ee113dd5474fbed1995d25003de8" target="_blank" rel="external">npm install</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp</span><br></pre></td></tr></table></figure>
<p>執行<code>gulp</code>之後，若能出現如下圖的<code>Sass Compiled</code>，表示Laravel Elixir已經安裝成功。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>Laravel Elixir是否能安裝成功，取決幾個因素：Node.js、Gulp與Laravel Elixir之間的版本相依，詳細請參考<a href="/laravel/elixir/elixir-nodejs/">如何在OS X安裝Laravel前端開發環境?</a></span></span></span><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor011.png" alt=""></p>
<h3 id="使用PhpStorm開啟">使用PhpStorm開啟</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor000.png" alt=""></p>
<p>啟動PhpStorm。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor001.png" alt=""></p>
<p>選擇剛建立的專案目錄。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor002.png" alt=""></p>
<p>一開始<code>indexing</code>雖稍微久一點，但只要做一次即可。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>PhpStorm會對整個專案的檔案做index，以加速將來檔案的搜尋。</span></span></span></p>
<h3 id="設定Namespace_Roots">設定Namespace Roots</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor003.png" alt=""></p>
<p>第一次開啟專案，PhpStorm會跳出<code>Detect PSR-0 namespaces roots</code>要求你設定。選擇<code>Settings | Directories</code>。<span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>理論上選擇<code>automatically</code>也可以，不過由於之前下了<code>npm install</code>之後，將大量node packages安裝在<code>node_modules</code>目錄下，若由PhpStorm自動去偵測目錄，將花較長時間，因此在此採用手動設定，詳細請參考<a href="/phpstorm/phpstorm-new-laravel-project/">如何使用PhpStorm建立Laravel專案?</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor004.png" alt=""></p>
<p>設定<code>Sources</code>目錄。</p>
<p>由於Laravel預設的namespace目錄是從<code>app</code>目錄開始，因此選擇<code>app</code>目錄，按下<code>Sources</code>，右側會出現藍色<code>Sources Folders : app</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor005.png" alt=""></p>
<p>設定<strong>namespace名稱</strong>。</p>
<p>按下<code>P</code>，設定prefix。</p>
<p>根據PSR-4，我們可以有很多namespace root，因此可以對目錄設定prefix，將<code>app</code>目錄的prefix設定為<code>App</code>。<span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>這個步驟非常重要，設定好namespace root後，將來只要建立class，PhpStorm都會幫你管理namespace，不用再對namespace操心。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor006.png" alt=""></p>
<p>設定<code>Resource Root</code>目錄。</p>
<p>Laravel預設將前端的asset放在<code>resources</code>目錄，選擇<code>resources</code>，按下<code>Resource Root</code>，右側會出現紫色<code>Resource roots : resources</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor007.png" alt=""></p>
<p>設定<code>Tests</code>目錄。</p>
<p>Laravel預設將<strong>測試</strong>程式放在<code>tests</code>目錄，選擇<code>tests</code>，按下<code>Tests</code>，右側會出現綠色<code>Test Source Folders : tests</code>。</p>
<h3 id="設定PHP_Interpreter">設定PHP Interpreter</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor009.png" alt=""></p>
<p>PhpStorm允許我們直接在IDE內執行<strong>測試</strong>與<strong>偵錯</strong>，因此我們必須告訴PhpStorm，我們使用PHP的版本，以及PHP interpreter位置。<span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>詳細請參考<a href="/phpstorm/phpstorm-debug-testing/">如何使用PhpStorm測試與除錯?</a></span></span></span></p>
<h3 id="設定PHPUnit">設定PHPUnit</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor010.png" alt=""></p>
<p>PhpStorm允許我們直接在IDE內跑<strong>單元測試</strong>，因此我們必須告訴PhpStorm，PHPUnit的autoloader與<code>phpunit.xml</code>設定檔位置。<span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>詳細請參考<a href="/phpstorm/phpstorm-debug-testing/">如何使用PhpStorm測試與除錯?</a></span></span></span></p>
<h3 id="測試Gulp_TDD">測試Gulp TDD</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor012.png" alt=""></p>
<p>一開始已經使用<code>npm install</code>安裝了Laravel Elixir，為了要使Elixir能自動在背景執行PHPUnit，只要我們一存檔就執行測試，需修改<code>gulpfile.js</code>，加上<code>.phpUnit();</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor013.png" alt=""></p>
<p>在命令列執行<code>gulp tdd</code>，啟動Laravel Elixir在背景執行PHPUnit。<span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>在PhpStorm可按熱鍵：&#8997; + F12，可在下方顯示terminal直接輸入指令。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor014.png" alt=""></p>
<p>開啟<code>tests/ExampleTest.php</code>，這是Laravel所提供預設的測試，用來測試Laravel預設的首頁是否有<code>Laravel 5</code>字串。</p>
<p>將<code>5</code>改成<code>4</code>，存檔後就會在右上角顯示<span class="label label-danger">紅燈</span>，顯示測試錯誤。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor015.png" alt=""></p>
<p>若從<code>4</code>改成<code>5</code>，存檔後就會在右上角顯示<span class="label label-success">綠燈</span>，顯示測試成功。</p>
<p>若<span class="label label-danger">紅燈</span>與<span class="label label-success">綠燈</span>都能出現，表示<strong>Gulp TDD</strong>正常。</p>
<h2 id="TDD-1">TDD</h2><hr>
<h3 id="Spec">Spec</h3><p>計算一位顧客所有訂單的金額。<span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>本範例改編自<a href="http://www.books.com.tw/products/0010411649" target="_blank" rel="external">重構：改善既有程式的設計</a>的第一章範例，原書使用Java，經簡化後改成PHP版本。</span></span></span></p>
<table>
<thead>
<tr>
<th style="text-align:left">影片種類</th>
<th style="text-align:left">租期</th>
<th style="text-align:left">租金</th>
<th style="text-align:left">逾期費</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">普通片</td>
<td style="text-align:left">7天</td>
<td style="text-align:left">100</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">新片</td>
<td style="text-align:left">3天</td>
<td style="text-align:left">150</td>
<td style="text-align:left">30</td>
</tr>
<tr>
<td style="text-align:left">兒童片</td>
<td style="text-align:left">7天</td>
<td style="text-align:left">40</td>
<td style="text-align:left">10</td>
</tr>
</tbody>
</table>
<h3 id="測試案例">測試案例</h3><ol>
<li><p>普通片1支，10天<span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>寫測試的第一步，就是要將spec寫成<strong>測試案例</strong>，也就是實際的input與output結果，如此才能根據input與output判斷測試結果是否正確。</span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  100 + (10-7) * 10 = 130</div>
</li>
<li><p>新片1支，5天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  150 + (5-3) * 30 = 210</div>
</li>
<li><p>兒童片1支，8天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  40 + (8-7) * 10 = 50</div>
</li>
</ol>
<h3 id="設定Domain目錄">設定Domain目錄</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor016.png" alt=""></p>
<p>我們會將所有的class放在自己的<strong>Domain目錄</strong>下，或稱為<strong>Business Layer</strong>。<span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>詳細請參考<a href="/laravel/laravel-architecture/">Laravel的中大型專案架構</a></span></span></span></p>
<p>首先，在<code>app</code>目錄下建立<code>VideoRental</code>子目錄。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor017.png" alt=""></p>
<p>輸入<code>VideoRental</code>。<span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>在左側選擇<code>app</code>目錄，按下&#8963; + Ｎ，出現下拉選單，選擇<code>Directory</code>建立新目錄。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor018.png" alt=""></p>
<p>由於新目錄會有自己的namespace名稱，因此要修改<code>composer.json</code>的<code>psr-4</code>設定，加上<code>VideoRental</code>與其目錄。</p>
<p>執行<code>composer dumpautoload</code>建立新的autoload檔案。<span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>這一步一定要做，否則PHP會找不到我們自己建立的class，詳細請參考<a href="/laravel/laravel-architecture/">Laravel的中大型專案架構</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor019.png" alt=""></p>
<p>在PhpStorm設定<code>VideoRental</code> namespace。<span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>這一步一定要做，如此PhpStorm才會知道新的<code>VideoRental</code> namespace，將來建立新class時，才可以選的到此namespace。<br><strong><em>PhpStorm -&gt; Preferences… -&gt; Project:xxx -&gt; Directories</em></strong></span></span></span></p>
<p>選擇<code>app/VideoRental</code>目錄，按下<code>Sources</code>，右側會出現藍色<code>Sources Folders : app/VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor020.png" alt=""></p>
<p>按下<code>P</code>，設定namespace名稱。</p>
<p>將<code>app/VideoRental</code>目錄的prefix設定為<code>VideoRental</code>。<span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/d3b9a9a1b9733045a42685cd28682b955367f731" target="_blank" rel="external">新增domain目錄</a></span></span></span></p>
<h3 id="第一個測試">第一個測試</h3><p>接下來會介紹3種測試方式。</p>
<p>第一種測試方式 : <strong>使用Gulp TDD</strong></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor021.png" alt=""></p>
<p>在命令列使用<code>php artisan make:test</code>建立測試class，預設會繼承<code>tests</code>目錄下的<code>TestCase</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor040.png" alt=""></p>
<p>在命令列執行<code>gulp tdd</code>，讓Laravel Elixir在背後執行PHPUnit，將來只要我們一存檔就會自動執行測試。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor022.png" alt=""></p>
<p>建立<strong>PHPUnit Test Method</strong>。<span class="margin-note-marker"><sup>22</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">22</span>在寫測試的class內，按熱鍵 : &#8963; + N，會出現<code>Generate</code>選單，選擇<code>PHPUnit Test Method</code>，可幫我們自動建立test method。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor023.png" alt=""></p>
<p>PhpStorm自動幫我們建立以<code>test</code>為開頭的test method。<span class="margin-note-marker"><sup>23</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">23</span>PHPUnit預設會將2種method視為test method，一種是以<code>test</code>為開頭的method，一種是在PHPDoc註解加上<code>@test</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor024.png" alt=""></p>
<p>更改test method名稱，以最能描述<strong>測試案例</strong>的<code>口語命名</code>，不用遵循PSR-2。<span class="margin-note-marker"><sup>24</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">24</span>詳細請參考<a href="/php/php-psr2/">PSR-2 PHP Coding Style</a></span></span></span></p>
<p>在test method內加上<strong>arrange</strong>，<strong>act</strong>, <strong>assert</strong>，以<strong>3A</strong>原則寫測試。<span class="margin-note-marker"><sup>25</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">25</span>因為每個test method都需要3A原則當架構，建議可以自行加入PhpStorm的<strong>Live Template</strong></span></span></span></p>
<p><strong>3A原則</strong><br><strong>Arrange</strong></p>
<ul>
<li>建立物件 (待測物件，相依物件，Mock物件）。</li>
<li>建立假資料。</li>
<li>設定<strong>期望值</strong>。</li>
</ul>
<p><strong>Act</strong></p>
<ul>
<li>實際執行待測物件的method，獲得<strong>實際值</strong>。</li>
</ul>
<p><strong>Assert</strong></p>
<ul>
<li>使用PHPUnit提供的assertion，測試<strong>期望值</strong>與<strong>實際值</strong>是否相等。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor025.png" alt=""></p>
<p>依<strong>3A原則</strong>為骨架，依次將測試補上。<span class="margin-note-marker"><sup>26</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">26</span>實務上第一個會將<code>act</code>先補上，也就是先決定要測試哪一個method。</span></span></span></p>
<p>先寫測試讓我們會以<strong>測試好寫</strong>為前提設計，會幫助我們以<strong>使用者需求</strong>的<strong>抽象化角度</strong>去思考架構。</p>
<p><strong>Arrange</strong><br>因為我們的需求是：<code>計算一位顧客所有訂單的金額</code>，且<strong>金額</strong>會隨著<strong>電影</strong>種類而不同，因此最基本，我們會有<code>Movie</code>、<code>Order</code>與<code>Customer</code>三個class，且一位顧客會有多筆訂單，因此會有<code>addOrder()</code>提供新增訂單。<span class="margin-note-marker"><sup>27</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">27</span>此時<code>Movie</code>、<code>Order</code>、<code>Customer</code>、<code>addOrder</code>與<code>calculateTotalPrice()</code>都還沒建立，因此在PhpStorm會<strong>反白</strong>，這不用擔心，因為我們現在是<strong>先寫測試</strong>，以<strong>Top Down</strong>的方式去思考，不用擔心這些class與method還沒建立，只要先思考<code>這樣子我們測試最好寫</code>就好了，這是<strong>TDD</strong>很重要的心法。</span></span></span></p>
<p>將<strong>測試案例</strong>的<strong>期望值</strong>寫入<code>$expected</code>。</p>
<p><strong>Act</strong><br>實際測試<code>Customer</code>的<code>calculateTotalPrice()</code>，獲得<strong>實際值</strong><code>$actual</code>。</p>
<p><strong>Assert</strong><br>使用PHPUnit的<code>assertEquals()</code>驗證<strong>期望值</strong>與<strong>實際值</strong>是否相同。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  該自己用if else寫測試嗎？</div>
<p>這裡當然可以自己用PHP寫 <code>if ($expected == $actual)</code>判斷，不過因為牽涉到人為的邏輯判斷，當測試錯誤時，很難確定到底是測試有問題，還是我們自己寫的PHP邏輯有問題，所以在測試中<strong>不應該</strong>寫邏輯，而<strong>應該</strong>使用PHPUnit的<code>assertion</code><span class="margin-note-marker"><sup>28</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">28</span>PHPUnit提供很多assertion method，詳細請參考<a href="https://phpunit.de/manual/current/en/appendixes.assertions.html" target="_blank" rel="external">PHPUnit Assertions</a></span></span></span>，因為PHPUnit已經被<code>測試過</code>了，當測試結果有錯時，不用再懷疑是不是測試寫錯，一定是我們的程式寫錯了。</p>
<p>存檔後，會出現第一個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Class Movie not found</code>。<span class="margin-note-marker"><sup>29</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">29</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/1909e6038030b1d00050c3cadfd4224429d0521c" target="_blank" rel="external">第一個測試 : 第一個紅燈</a></span></span></span></p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  The Three Rules of TDD No.1</div>
<blockquote><p>You are not allowed to write any production code unless it is to make a failing unit test pass.</p>
<footer><strong>Uncle Bob</strong><cite>&nbsp;-The Three Rules of TDD</cite></footer></blockquote>
<p>白話就是：你必須先寫測試亮<span class="label label-danger">紅燈</span>之後，才可以寫程式。<span class="margin-note-marker"><sup>30</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">30</span><a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd" target="_blank" rel="external">The Three Rules of TDD</a></span></span></span></p>
<p>目的：</p>
<ol>
<li>先亮<span class="label label-danger">紅燈</span>，表示你已經<strong>先寫了測試</strong>，只是因為沒寫程式所以紅燈。</li>
<li>先亮<span class="label label-danger">紅燈</span>，表示你之前寫的程式沒有<strong>over design</strong>。</li>
</ol>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor026.png" alt=""></p>
<p>測試錯誤訊息告訴我們 : <code>Class Movie not found</code>。因為我們還沒建立<code>Movie</code>。</p>
<p>直接在PhpStorm內建立<code>Movie</code>。<span class="margin-note-marker"><sup>31</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">31</span>將滑鼠游標放在<code>Movie</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Create class</code>，按下可自動建立<code>Movie</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor027.png" alt=""></p>
<p>出現<strong>Create New PHP Class</strong>對話框，選擇目錄在<code>app/VideoRental</code>下，並選擇namespace : <code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor028.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>Movie</code>。</p>
<p>存檔後出現第二個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Class Order not found</code>。<span class="margin-note-marker"><sup>32</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">32</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/0588af6e93320f6b4d5ee79664378d8afb1196b9" target="_blank" rel="external">第一個測試 : 第二個紅燈</a></span></span></span></p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  The Three Rules of TDD No.2</div>
<blockquote><p>You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.</p>
<footer><strong>Uncle Bob</strong><cite>&nbsp;-The Three Rules of TDD</cite></footer></blockquote>
<p>白話就是：測試出現<span class="label label-danger">紅燈</span>之後，你就必須先改程式將<span class="label label-danger">紅燈</span>變成<span class="label label-success">綠燈</span>，而不是寫其他的測試製造更多的<strong>紅燈</strong>。<span class="margin-note-marker"><sup>33</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">33</span><a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd" target="_blank" rel="external">The Three Rules of TDD</a></span></span></span></p>
<p>目的 : </p>
<ol>
<li>將程式<strong>聚焦</strong>在目前的需求，方便程式解決目前的<span class="label label-danger">紅燈</span>。</li>
<li>不會一開始就將架構想的太複雜，造成over design，而枉費我們分拆測試範例。<span class="margin-note-marker"><sup>34</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">34</span>詳細請參考<a href="https://www.facebook.com/91agile" target="_blank" rel="external">91哥</a>的<a href="https://www.dotblogs.com.tw/hatelove/2015/12/14/explanation-the-three-laws-of-tdd" target="_blank" rel="external">The Three Laws of TDD - 從紅燈變綠燈的過程</a></span></span></span></li>
</ol>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor033.png" alt=""></p>
<p>測試錯誤訊息告訴我們 : <code>Order not found</code>。因為我們還沒建立<code>Order</code>。</p>
<p>直接在PhpStorm內建立<code>Order</code>。<span class="margin-note-marker"><sup>35</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">35</span>將滑鼠游標放在<code>Order</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Create class</code>，按下可自動建立<code>Order</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor029.png" alt=""></p>
<p>出現<strong>Create New PHP Class</strong>對話框，選擇目錄在<code>app/VideoRental</code>下，並選擇namespace : <code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor030.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>Order</code>。</p>
<p>存檔後出現第三個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Class Customer not found</code>。<span class="margin-note-marker"><sup>36</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">36</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/a7d01365221e77eaa6c1e667635313534eb18712" target="_blank" rel="external">第一個測試 : 第三個紅燈</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  不要因為在測試時看到<strong>紅燈</strong>而沮喪</div>
<p>事實上TDD的開發流程本來就是先有<span class="label label-danger">紅燈</span>才去寫程式，這也是TDD能解決<strong>over design</strong>的關鍵，因為測試案例的<strong>紅燈</strong>來自於<strong>需求</strong>，由<span class="label label-danger">紅燈</span>變成<span class="label label-success">綠燈</span>就是<strong>解決需求</strong>，若沒有<span class="label label-danger">紅燈</span>而直接<span class="label label-success">綠燈</span>，就表示程式有<strong>over design</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor034.png" alt=""></p>
<p>測試錯誤訊息告訴我們 : <code>Class Customer not found</code>。因為我們還沒建立<code>Customer</code>。</p>
<p>直接在PhpStorm內建立<code>Customer</code>。<span class="margin-note-marker"><sup>37</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">37</span>將滑鼠游標放在<code>Customer</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Create class</code>，按下可自動建立<code>Customer</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor031.png" alt=""></p>
<p>出現<strong>Create New PHP Class</strong>對話框，選擇目錄在<code>app/VideoRental</code>下，並選擇namespace : <code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor032.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>Customer</code>。</p>
<p>存檔後出現第四個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Call to undefined method VideoRental\Customer::addOrder()</code>。<span class="margin-note-marker"><sup>38</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">38</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/e67cd66246e4feae03a3c81d6134bfb9b00ec0e1" target="_blank" rel="external">第一個測試 : 第四個紅燈</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor035.png" alt=""></p>
<p>測試錯誤訊息告訴我們 : <code>Call to undefined method VideoRental\Customer::addOrder()</code>。因為我們還沒建立<code>addOrder()</code>。</p>
<p>直接在PhpStorm內建立<code>addOrder()</code>。<span class="margin-note-marker"><sup>39</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">39</span>將滑鼠游標放在<code>addOrder()</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method</code>，按下可自動建立<code>addOrder()</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor036.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>addOrder()</code>。</p>
<p>存檔後出現第五個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Call to undefined method VideoRental\Customer::calculateTotalPrice()</code>。<span class="margin-note-marker"><sup>40</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">40</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/22b2252f197b760834a8d0271339ec9212e85a78" target="_blank" rel="external">第一個測試 : 第五個紅燈</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor037.png" alt=""></p>
<p>測試錯誤訊息告訴我們 : <code>Call to undefined method VideoRental\Customer::calculateTotalPrice()</code>。因為我們還沒建立<code>calculateTotalPrice()</code>。</p>
<p>直接在PhpStorm內建立<code>calculateTotalPrice()</code>。<span class="margin-note-marker"><sup>41</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">41</span>將滑鼠游標放在<code>calculateTotalPrice()</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method</code>，按下可自動建立<code>calculateTotalPrice()</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor038.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>calculateTotalPrice()</code>。</p>
<p>存檔後出現第六個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Failed asserting that null matches expected 130</code>。<span class="margin-note-marker"><sup>42</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">42</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/6dcf3d7d431828ddc9f19a5c02d8c38ceedbac94" target="_blank" rel="external">第一個測試 : 第六個紅燈</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor039.png" alt=""></p>
<p>既然測試要求<code>130</code>，我們就直接很<strong>無恥</strong>的回傳<code>130</code>。</p>
<p>這樣我們就獲得了第一個測試的第一個綠燈。<span class="margin-note-marker"><sup>43</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">43</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/ba302b5ba8d122276bf532cd72acb303e25b1e59" target="_blank" rel="external">第一個測試 : 第一個綠燈</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  直接使用return也太無恥了吧!!</div>
<p>第一個測試為了剛好符合第一個測試案例的需求，我們可以先<strong>無恥</strong>的使用return方式，反正接下來的測試案例我們自然會重構。</p>
<h3 id="第二個測試">第二個測試</h3><p>第二種測試方式 : <strong>在命令列執行<code>vendor/bin/phpunit</code></strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor041.png" alt=""></p>
<p>將第一個測試<code>test_order_1_regular_movie_with_10_days()</code>複製貼上，改成第二個測試<code>test_order_1_new_release_movie_with_5_days()</code>。<span class="margin-note-marker"><sup>44</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">44</span>不用擔心在test code使用<strong>複製貼上</strong>，test code不用擔心duplicated code問題，只有production code才必須考慮。</span></span></span></p>
<p>先在命令列使用&#8963; + C結束<code>gulp tdd</code>，然後執行<code>vendor/bin/phpunit</code>執行測試。</p>
<p>實務上可以在PHPDoc加上<code>@group</code>標籤為test method分類，如誰寫的測試，哪一個class的測試，方便<code>vendor/bin/phpunit</code>執行時只跑該group。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor042.png" alt=""></p>
<p>執行測試後，出現第二個測試案例的第一個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Failed asserting that 130 matches expected 210</code>。<span class="margin-note-marker"><sup>45</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">45</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/7a58b7e2bfbee5b34e3e02d4f585596b132ba190" target="_blank" rel="external">第二個測試 : 第一個紅燈</a></span></span></span></p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  別忘了Uncle Bob的叮嚀，每個測試案例都要先出現第一個<span class="label label-danger">紅燈</span>，若一開始就出現<span class="label label-success">綠燈</span>，表示你之前程式有over design了。</div>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor043.png" alt=""></p>
<p>之前我們只新增了<code>addOrder()</code>，並還沒有填入程式。</p>
<p>宣告一個<code>$orders</code>陣列，並將<code>$order</code>push進<code>$orders</code>。<span class="margin-note-marker"><sup>46</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">46</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/980f01a9538f7dc35ee86bcc1a159ab2831c68de" target="_blank" rel="external">第二個測試 : 補齊Customer-&gt;addOrder()</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor044.png" alt=""></p>
<p>由於將來<code>calculateTotalPrice()</code>也要使用<code>$orders</code>陣列，因此我們想將<code>$orders</code>從method內的變數變成class的field。<span class="margin-note-marker"><sup>47</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">47</span>將滑鼠游標放在<code>$orders</code>之後，按&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Extract Field…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor045.png" alt=""></p>
<p>出現兩種重構方式，選擇第一種 : <code>$orders</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor047.png" alt=""></p>
<p>出現<strong>Introduce field</strong>對話框，預設field已經幫我們填入<code>orders</code>。</p>
<p>可以自行選擇<code>Initialize in</code>與<code>Visibility</code>的方式。</p>
<p>這裡我們選擇<code>Field declaration</code>，也就是會直接在field宣告時初始化陣列。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor048.png" alt=""></p>
<p>如我們所願，宣告成<code>protected $orders = []</code>。</p>
<p>並且push部分也自動改成field。<span class="margin-note-marker"><sup>48</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">48</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/c8c9e8d1d360e2fa3ae8db127479eed8f8164de3" target="_blank" rel="external">第二個測試：Customer-&gt;addOrder()將$orders重構成field</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor049.png" alt=""></p>
<p>由於需求是<code>計算一位顧客所有訂單的金額</code>，所以勢必有<code>$totalPrice</code>變數負責累加，然後需要一個<code>foreach</code>將整個<code>$orders</code>loop一次，計算每種影片種類的金額。</p>
<p>以Top Down的方式思考，由於我們現在是在<code>Order</code> class，所以必須透過<code>getMovie()</code>傳回<code>Movie</code>物件，並透過其<code>getType()</code> method傳回<strong>影片種類</strong>，然後將計費方式的演算法寫在裡面。<span class="margin-note-marker"><sup>49</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">49</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/ade44e32f10da6f2b77d3a0ffb391396fb376d5f" target="_blank" rel="external">第二個測試 : 補齊Customer-&gt;calculateTotalPrice()的Regular計算方式</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor050.png" alt=""></p>
<p>執行測試後，出現第二個測試案例的第二個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Call to undefined method VideoRental\Order::getMovie()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor051.png" alt=""></p>
<p>錯誤訊息告訴我們 : <code>Call to undefined method VideoRental\Order::getMovie()</code>，因為我們還沒建立<code>getMovie()</code>。</p>
<p>直接在PhpStorm內建立<code>getMovie()</code>。<span class="margin-note-marker"><sup>50</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">50</span>將滑鼠游標放在<code>getMovie()</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method</code>，按下可自動建立<code>getMovie()</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor052.png" alt=""></p>
<p>出現<code>Can not find target class for modification</code>的錯誤訊息，因為PhpStorm無法得知<code>$order</code>變數的型別，因此不知道要將<code>getMovie()</code>建立在哪一個class。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor053.png" alt=""></p>
<p>加上註解描述<code>$order</code>的型別為<code>Order</code>。<span class="margin-note-marker"><sup>51</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">51</span>這種寫法雖然可行，但不是最漂亮的寫法，最漂亮的寫法應該是直接在field註解型別，也就使在<code>protected $order = []</code>之前直接<code>@var Order[]</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor054.png" alt=""></p>
<p>之後PhpStorm就會自動在<code>Order</code>建立<code>getMovie()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor055.png" alt=""></p>
<p>由於<code>getMovie()</code>的<code>$movie</code>來自於field，因此在constructor先將參數補全。</p>
<p>由於我們對constructor加了參數，因此出現了<code>Argument PHPDoc missing</code>的警告。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor056.png" alt=""></p>
<p>使用PhpStorm幫我們補齊PHPDoc。<span class="margin-note-marker"><sup>52</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">52</span>將滑鼠游標放在<code>int $days</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Update PHPDoc Comment</code>，按下可自動將參數新增至PHPDoc。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor057.png" alt=""></p>
<p>PhpStorm幫我們將新的參數註解加入了PHPDoc，將原來的參數註解改成<code>@internal</code>，這顯然是多餘的。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor058.png" alt=""></p>
<p>刪除多餘的<code>@internal</code>註解。<br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor059.png" alt=""></p>
<p>使用PhpStorm幫我們建立field。<span class="margin-note-marker"><sup>53</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">53</span>將滑鼠游標放在<code>int $days</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Initialize fields</code>，按下可自動將constructor參數新增成field。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor060.png" alt=""></p>
<p>選擇所要建立field的參數。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor061.png" alt=""></p>
<p>PhpStorm自動幫我們宣告field，並在contructor自動加上初始化的程式。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor062.png" alt=""></p>
<p>回到<code>getMovie()</code>，除了加上<code>return $this-&gt;movie</code>之外，還補上了回傳型別<code>Movie</code>。</p>
<p>使用PhpStorm自動幫我們加上<code>getMovie()</code>註解。<span class="margin-note-marker"><sup>54</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">54</span>將滑鼠游標放在<code>Movie</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Generate PHPDoc for function</code>，按下可自動替<code>getMovie()</code>產生註解。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor063.png" alt=""></p>
<p>在註解第一行加上人看得懂的註解。<span class="margin-note-marker"><sup>55</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">55</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/afe5ea8ecea60a562875e2a61a6ba4b93fbd8603" target="_blank" rel="external">第二個測試 : 補齊Order-&gt;getMovie()</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor064.png" alt=""></p>
<p> 執行測試後，出現第二個測試案例的第三個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Call to undefined method ViderRental\Movie::getType()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor066.png" alt=""></p>
<p>錯誤訊息告訴我們 : <code>Call to undefined method ViderRental\Movie::getType()</code>，因為我們還沒建立<code>getType()</code>。</p>
<p>直接在PhpStorm內建立<code>getType()</code>。<span class="margin-note-marker"><sup>56</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">56</span>將滑鼠游標放在<code>getType()</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method</code>，按下可自動建立<code>getType()</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor065.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>getType()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor067.png" alt=""></p>
<p>由於<code>getType()</code>的<code>$type</code>來自於field，因此在constructor先將參數補全。</p>
<p>由於我們對constructor加了參數，因此出現<code>Argument PHPDoc missing</code>的警告。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor068.png" alt=""></p>
<p>使用PhpStorm幫我們補齊PHPDoc。<span class="margin-note-marker"><sup>57</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">57</span>將滑鼠游標放在<code>$type</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Update PHPDoc Comment</code>，按下可自動將參數新增至PHPDoc。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor069.png" alt=""></p>
<p>PhpStorm幫我們將新的參數註解加入了PHPDoc，將原來的參數改成<code>@internal</code>，這顯然是多餘的。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor070.png" alt=""></p>
<p>刪除多餘的<code>@internal</code>註解。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor071.png" alt=""></p>
<p>使用PhpStorm幫我們建立field。<span class="margin-note-marker"><sup>58</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">58</span>將滑鼠游標放在<code>string $type</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Initialize fields</code>，按下可自動將constructor參數新增成field。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor072.png" alt=""></p>
<p>選擇所要建立field的參數。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor073.png" alt=""></p>
<p>PhpStorm自動幫我們宣告field，並在contructor自動加上初始化的程式。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor074.png" alt=""></p>
<p>回到<code>getType()</code>，補上了回傳型別<code>string</code>。</p>
<p>使用PhpStorm自動幫我們加上<code>getType()</code>註解。<span class="margin-note-marker"><sup>59</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">59</span>將滑鼠游標放在<code>string</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Generate PHPDoc for function</code>，按下可自動替<code>getType()</code>產生註解。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor075.png" alt=""></p>
<p>加上<code>return $this-&gt;type</code>。</p>
<p>在註解第一行加上人看得懂的註解。<span class="margin-note-marker"><sup>60</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">60</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/86e838dc3e42ae07cdc645b37b71c76367a1cdff" target="_blank" rel="external">第二個測試：補齊Order-&gt;getType()</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor076.png" alt=""></p>
<p>執行測試後，出現第二個測試案例的第四個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Call to undefined method VideoRental\Order::getDays()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor077.png" alt=""></p>
<p>錯誤訊息告訴我們 : <code>Call to undefined method VideoRental\Order::getDays()</code>，因為我們還沒建立<code>getDays()</code>。</p>
<p>直接在PhpStorm內建立<code>getDays()</code>。<span class="margin-note-marker"><sup>61</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">61</span>將滑鼠游標放在<code>getDays()</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method</code>，按下可自動建立<code>getDays()</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor078.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>getDays()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor079.png" alt=""></p>
<p>之前已經建立好<code>$days</code> field，所以可以直接<code>return $this-&gt;days</code>，並加上註解。<span class="margin-note-marker"><sup>62</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">62</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/cbf036f75148c94bf87618687451b3ba820ad3db" target="_blank" rel="external">第二個測試：補齊Order-&gt;getDays()</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor080.png" alt=""></p>
<p>執行測試後，出現第二個測試案例的第五個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Failed asserting that 0 matches expected 210</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor081.png" alt=""></p>
<p>錯誤訊息告訴我們 : <code>Failed asserting that 0 matches expected 210</code>，因為我們還沒寫<code>NewRelease</code>的計費方式的演算法。</p>
<p>補上<code>NewRelease</code>的計費方式演算法。</p>
<p>這樣我們就獲得了第二個測試的第一個綠燈。<span class="margin-note-marker"><sup>63</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">63</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/c41afb2986be6d4b67090426a7755da646472ec8" target="_blank" rel="external">第二個測試 : 第一個綠燈</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  其實Children的計費方式也蠻接近的，我就順便elseif將Children補上好了!!</div>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  The Three Rules of TDD No.3</div>
<blockquote><p>You are not allowed to write any more production code than is sufficient to pass the one failing unit test.</p>
<footer><strong>Uncle Bob</strong><cite>&nbsp;-The Three Rules of TDD</cite></footer></blockquote>
<p>白話就是：若沒有<strong>測試案例</strong>，就不要自作聰明去寫程式。<span class="margin-note-marker"><sup>64</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">64</span><a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd" target="_blank" rel="external">The Three Rules of TDD</a></span></span></span></p>
<p>目的 : </p>
<ol>
<li>避免<strong>over design</strong>，導致系統提早無謂的複雜。</li>
<li>將來若有新的測試案例，到時候再<strong>重構</strong>就好，不用現在去擔心。</li>
</ol>
<h3 id="第三個測試">第三個測試</h3><p>第三種測試方式 : <strong>直接在PhpStorm測試</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor082.png" alt=""></p>
<p>將第一個測試<code>test_order_1_regular_movie_with_10_days()</code>複製貼上，改成第三個測試<code>test_order_1_children_movie_with_8_days()</code>。<span class="margin-note-marker"><sup>65</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">65</span>不用擔心在test code使用<strong>複製貼上</strong>，test code不用擔心duplicated code問題，只有production code才必須考慮。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor083.png" alt=""></p>
<p>直接在PhpStorm執行測試。<span class="margin-note-marker"><sup>66</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">66</span>在左側選擇<code>CustomerTest.php</code>，按熱鍵&#8963; + &#8679; + R。</span></span></span></p>
<p>我們發現前兩個測試案例都是<span class="label label-success">綠燈</span>，只有第三個測試案例是<span class="label label-danger">紅燈</span>。</p>
<p>這是第三個測試案例的第一個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Failed asserting that 130 matches expected 210</code>。<span class="margin-note-marker"><sup>67</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">67</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/a041e0d318e7f7e7d16689662ac22bc0d1221977" target="_blank" rel="external">第三個測試 : 第一個紅燈</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor084.png" alt=""></p>
<p>錯誤訊息告訴我們 : <code>Failed asserting that 130 matches expected 210</code>，因為我們還沒寫<code>Childer</code>的計費方式演算法。</p>
<p>補上<code>Children</code>的計費方式演算法。</p>
<p>這樣我們就獲得了第三個測試案例的第一個<span class="label label-success">綠燈</span>。<span class="margin-note-marker"><sup>68</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">68</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/0b76208d1e94bbe1347fbf92166735c0b6692941" target="_blank" rel="external">第三個測試 : 第一個綠燈</a></span></span></span></p>
<h2 id="重構-1">重構</h2><hr>
<p>3個測試案例都通過，代表程式基本上已經符合Spec要求，可以即時交付程式。</p>
<p>但是符合Spec的程式並不代表這是<strong>好的程式</strong>，一個好的程式至少要符合5個要求：</p>
<ol>
<li>容易維護。</li>
<li>容易新增功能。</li>
<li>容易重複使用。</li>
<li>容易寫測試。</li>
<li>容易上Git，不易與其他人發生衝突。</li>
</ol>
<p>若更簡單的說，就是要符合<strong>SOLID</strong>原則的程式，才算是好程式。</p>
<p>接下來我們將使用<strong>重構</strong>，將目前的程式調整成符合<strong>SOLID</strong>原則的好程式。</p>
<h3 id="if_else改成switch">if else改成switch</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor168.png" alt=""></p>
<p>在<code>Customer</code>的<code>calculateTotalPrice()</code>，有個<code>if...elseif</code>，因為都是判斷<code>$order-&gt;getMovie()-&gt;getType()</code>，將<code>if...elseif</code>改成<code>switch</code>，會讓程式碼比較容易閱讀。<span class="margin-note-marker"><sup>69</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">69</span>這並不是<strong>重構</strong>這本書所談的重構手法，不過<code>switch</code>的確比<code>if...elseif</code>容易閱讀，所以實務上也常常會將<code>if...elseif</code>重構成<code>switch</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor085.png" alt=""></p>
<p>重構成<code>switch</code>之後，馬上跑測試，確認<strong>重構</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>70</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">70</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/17a116a80867482da508d9c8a2c015b269bd3eaf" target="_blank" rel="external">重構 : if else改switch</a></span></span></span></p>
<h3 id="Extract_Method">Extract Method</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor086.png" alt=""></p>
<p>改成<code>switch</code>之後，雖然程式碼已經比較容易閱讀了，但是在<code>calculateTotalPrice()</code>內還是顯得很臃腫，因此想使用<strong>重構</strong>的<strong>Extract Method</strong>將此<code>switch</code>重構成一個<code>method</code>。<span class="margin-note-marker"><sup>71</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">71</span>使用滑鼠選擇想要重構的程式碼，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Extract Method…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor087.png" alt=""></p>
<p>出現<strong>Extract Method</strong>對話框，輸入重構後method名稱與選擇Visibility。</p>
<p>還可以選擇回傳值的處理方式，可以是<code>return</code>，也可以是<code>pass by reference</code>。</p>
<p>最後對於<code>switch</code>的處理方式，可以選擇在<code>case</code>內直接<code>return</code>，還是最後一起<code>return</code>，這裡選擇每個<code>case</code>內直接<code>return</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor088.png" alt=""></p>
<p>重構之後，PhpStorm會自動幫你建立<code>calculatePrice()</code>，且原來程式也幫你自動呼叫<code>calculatePrice()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor089.png" alt=""></p>
<p>馬上跑測試，確認PhpStorm的<strong>Extract Method</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>72</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">72</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/c7ec6a41092a59c4c9b283c3859a08c8fb7900c0" target="_blank" rel="external">重構 : Extract Method (switch -&gt; Customer-&gt;calculatePrice())</a></span></span></span></p>
<h3 id="Inline">Inline</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor090.png" alt=""></p>
<p>經過<strong>Extract Method</strong>重構之後，我們發現<code>$price</code>這個暫存變數沒有存在的價值了。可使用<strong>重構</strong>的<strong>Inlilne</strong>將此暫存變數移除。<span class="margin-note-marker"><sup>73</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">73</span>將滑鼠游標放在<code>$price</code>之後，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Inline…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor091.png" alt=""></p>
<p>PhpStorm會詢問你是否將所有的<code>$price</code>變數都inline。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor092.png" alt=""></p>
<p>Inline之後，程式就變成我們所預期的只有一行。</p>
<p>馬上跑測試，確認PhpStorm的<strong>Inline</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>74</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">74</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/7847894ea3ee56999834ff20c27d67cd05efac5c" target="_blank" rel="external">重構 : Inline</a></span></span></span></p>
<h3 id="Move_Method">Move Method</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor169.png" alt=""></p>
<p>經過重構產生的<code>calculatePrice()</code>，但程式內卻一直使用<code>$order</code>物件的method，看起來<code>calculatePrice()</code>不應該放在<code>Customer</code>內，而應該放在<code>Order</code>內。<br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor093.png" alt=""></p>
<p>使用<strong>重構</strong>的<strong>Move Method</strong>將<code>calculatePrice()</code>從<code>Customer</code>搬到<code>Order</code>內。<span class="margin-note-marker"><sup>75</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">75</span>將滑鼠游標放在<code>calculatePrice</code>之後，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Move…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor094.png" alt=""></p>
<p>出現<code>Move non-static method is not supported</code>錯誤訊息，也就是PhpStorm目前只能支援將對<code>static method</code>進行<strong>重構</strong>的<strong>Move Method</strong>，而一般<code>method</code>不支援。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor095.png" alt=""></p>
<p>因為PhpStorm目前僅支援<code>static method</code>的<strong>Move Method</strong>，因此先暫時將<code>calculatePrice()</code>改成<code>static method</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor096.png" alt=""></p>
<p>重新對<code>calculatePrice()</code>執行<strong>重構</strong>的<strong>Move Method</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor097.png" alt=""></p>
<p>出現<strong>Move Static Member</strong>對話框，因為我們要將<code>calculatePrice()</code>搬到<code>Order</code>，要連namespace一起輸入。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor098.png" alt=""></p>
<p>重構之後，因為<code>calculatePrice()</code>已經變成<code>static method</code>，原來的<code>calculateTotalPrice()</code>內是使用<code>$this-&gt;calculatePrice($order)</code>，已經被PhpStorm重構成<code>Order::calculatePrice($order)</code>。</p>
<p>但這顯然不是我們要的。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor099.png" alt=""></p>
<p>將<code>Order::</code>改成<code>$order-&gt;</code>。<span class="margin-note-marker"><sup>76</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">76</span>加上註解描述<code>$order</code>的型別為<code>Order</code>這種寫法雖然可行，但不是最漂亮的寫法，最漂亮的寫法應該是直接在field註解型別，也就使在<code>protected $order = []</code>之前直接<code>@var Order[]</code>，之後所有的<code>foreach</code>內都不用再加上註釋。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor100.png" alt=""></p>
<p>PhpStorm雖然已經幫我們把<code>calculatePrice()</code>搬到<code>Order</code>，但顯然<code>static</code>是多餘的，且因為已經在<code>Order</code>，所以不需再傳入<code>$order</code>了。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor101.png" alt=""></p>
<p>將<code>static</code>刪除。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor102.png" alt=""></p>
<p>因為已經搬到<code>Order</code>，所以如<code>getMovie()</code>與<code>getDays()</code>都不在需要<code>$order</code>，而是需要改成<code>$this</code>。</p>
<p>使用<strong>重構</strong>的<strong>Rename</strong>，將<code>$order</code>改成<code>$this</code>。<span class="margin-note-marker"><sup>77</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">77</span>將滑鼠游標放在<code>$order</code>之後，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Rename…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor103.png" alt=""></p>
<p>將全部的<code>$order</code>都改成<code>$this</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor104.png" alt=""></p>
<p>剛才我們只是借用<strong>重構</strong>的<strong>Rename</strong>將<code>$order</code>改成<code>$this</code>，事實上<code>calculatePrice()</code>根本不需要任何參數，將<code>Order $this</code>刪除。</p>
<p>馬上跑測試，確認PhpStorm的<strong>Rename</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>78</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">78</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/05adad763fc534f81400880f8bbf98168e90bf66" target="_blank" rel="external">重構 : Move Method : Order-&gt;calculatePrice()</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor105.png" alt=""></p>
<p>在剛剛重構產生的<code>Order</code>的<code>calculatePrice()</code>內，我們發現<code>switch</code>竟然是去判斷<code>Movie</code>的<code>getType()</code>，這是不合理的，似乎暗示著應該將這個<code>switch</code>判斷搬到<code>Movie</code>內。<span class="margin-note-marker"><sup>79</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">79</span>使用滑鼠選擇想要重構的程式碼，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Extract Method…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor106.png" alt=""></p>
<p>出現<strong>Extract Method</strong>對話框，原本我們是想將此<code>switch</code>重構成<code>Movie</code>的<code>calculatePrice()</code>，但PhpStorm的<strong>Extract Method</strong>無法跨class，我們只好先<strong>Extract Method</strong>在<code>Order</code>內，然後再使用<strong>Move Method</strong>搬到<code>Movie</code>。</p>
<p>因為同一個class不能存在兩個<code>calculatePrice()</code>，因此先取名為<code>MovieCalculatePrice()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor107.png" alt=""></p>
<p>使用<strong>Move Method</strong>將<code>MovieCalculatePrice()</code>搬到<code>Movie</code>。</p>
<p>因為目前PhpStorm只支援<code>static method</code>的<strong>Movie Method</strong>，因此先改成<code>static</code>。<span class="margin-note-marker"><sup>80</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">80</span>將滑鼠游標放在<code>MovieCalculatePrice</code>之後，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Move…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor108.png" alt=""></p>
<p>出現<strong>Move Static Member</strong>對話框，因為我們要將<code>MovieCalculatePrice()</code>搬到<code>Movie</code>，要連namespace一起輸入。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor109.png" alt=""></p>
<p>重構之後，因為<code>MovieCalculatePrice()</code>已經變成<code>static method</code>，原來的<code>calculatePrice()</code>內是使用<code>$this-&gt;MovieCalculatePrice()</code>，已經被PhpStorm重構成<code>Movie::MovieCalculatePrice()</code>。</p>
<p>但這顯然不是我們要的。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor110.png" alt=""></p>
<p>將<code>Movie::MovieCalculatePrice()</code>改成<code>$this-&gt;getMovie()-&gt;calculatePrice()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor111.png" alt=""></p>
<p>PhpStorm雖然已經幫我們把<code>MovieCalculatePrice()</code>搬到<code>Movie</code>，但顯然<code>static</code>是多餘的。</p>
<p>且<code>$this-&gt;getMovie()</code>也不需要了，因為已經在<code>Movie</code>內，改用<code>$this</code>就好。</p>
<p><code>$this-&gt;getDays()</code>則比較麻煩，因為這原本是<code>Order-&gt;getDays()</code>，現在搬到Movie之後，勢必要靠參數從<code>Order</code>傳進來。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor112.png" alt=""></p>
<p>將<code>static</code>刪除。</p>
<p>將<code>$this-&gt;getMovie()</code>改成<code>$this</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor113.png" alt=""></p>
<p>我們是希望將<code>$this-&gt;getDays()</code>能<strong>Extract Parameter</strong>，不過目前在PhpStorm無法將一個method直接<strong>Extract Parameter</strong>，需要透過一些技巧。</p>
<p>先使用PhpStorm將<code>$this-&gt;getDays()</code>透過<strong>Extract Variable</strong>成變數。<span class="margin-note-marker"><sup>81</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">81</span>選擇<code>$this-&gt;getDays()</code>，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Extract Variable…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor114.png" alt=""></p>
<p>出現<strong>Introduce variable</strong>對話框，我們希望重構成<code>$days</code>變數。</p>
<p>將<code>Replace all occurrences</code>打勾，我們打算將全部的<code>$this-&gt;getDays()</code>都取代。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor115.png" alt=""></p>
<p>我們看到<code>$this-&gt;getDays()</code>已經全部被<code>$days</code>所取代。</p>
<p>但<code>$days = $this-&gt;getDays()</code>顯然是多餘的。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor116.png" alt=""></p>
<p>將<code>$days = $this-&gt;getDays()</code>刪除。</p>
<p>加上<code>int $days</code>參數，並加上註解。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor117.png" alt=""></p>
<p>由於多了<code>int $days</code>參數，因此在<code>Order-&gt;calculatePrice()</code>要多傳<code>$this-&gt;getDays()</code>進來。</p>
<p>馬上跑測試，確認PhpStorm沒將程式改壞掉。<span class="margin-note-marker"><sup>82</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">82</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/24c5b86e246690a8d6717974ab3dd3a9a4bef43d" target="_blank" rel="external">重構 : Move Method : Movie-&gt;calculatePrice()</a></span></span></span></p>
<h3 id="Replace_Type_Code_with_State/Stratgey">Replace Type Code with State/Stratgey</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor170.png" alt=""></p>
<p>在<strong>重構</strong>的技巧中，有一招叫做<strong>Replace Type Code with State/Strategy</strong>，簡單的說，當你的程式會使用<code>switch</code>對同一個變數去做判斷時，可以改用物件導向的<strong>多型</strong>來處理，或者更白話的說，改用<strong>設計模式</strong>的<strong>State模式</strong>或<strong>Strategy模式</strong>去處理。</p>
<p>這樣的好處是會使你的程式符合<strong>SOLID</strong>的<strong>開放封閉原則</strong>，將來若新的需求要新增，將不用去改原來程式的<code>switch</code>，只要去新增class即可。<span class="margin-note-marker"><sup>83</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">83</span><strong>開放封閉原則</strong> : 軟體中的類別、函式對於擴展是開放的，對於修改是封閉的。</span></span></span></p>
<h3 id="Self_Encapsulate_Field">Self Encapsulate Field</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor118.png" alt=""></p>
<p>我們即將重構成<strong>State模式</strong>，因為<strong>State模式</strong>會將變化抽象化成一個<strong>物件</strong>，也就是需要將原本的字串，如<code>Regular</code>、<code>NewRelease</code>、<code>Children</code>最後抽象化成<strong>物件</strong>，因此<strong>重構</strong>教我們要使用<strong>Replace Type Code with State/Strategy</strong>前，先執行另一招重構 : <strong>Self Encapsulate Field</strong>。</p>
<p><strong>Self Encapsulate Field</strong>簡單的說，就是將field全部改用<code>setter</code>的方式寫入，這樣我們就可以在<code>setter</code>內將<strong>字串</strong>抽象化成<strong>物件</strong>。<span class="margin-note-marker"><sup>84</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">84</span>將滑鼠游標放在<code>$type</code>之後，按熱鍵&#8984; + N，會出現<code>Generate</code>選單，選擇<code>Setters</code>，可幫我們自動建立<code>$type</code>的setter。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor119.png" alt=""></p>
<p>選擇所要建立setter的field。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor120.png" alt=""></p>
<p>PhpStorm自動幫我們加上<code>$type</code>的setter : <code>setType()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor121.png" alt=""></p>
<p>將setType()的參數加上type hint。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor122.png" alt=""></p>
<p>建立setter只是<strong>Self Encapsulate Field</strong>的第一步，接下來就將程式所有地方改用setter去寫入<code>$type</code> field。<span class="margin-note-marker"><sup>85</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">85</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/3f0729de0f88c44dc4679e780809421eb5369072" target="_blank" rel="external">重構 : Self Encapsulate Field</a></span></span></span></p>
<h3 id="將變化封裝在class">將變化封裝在class</h3><p><strong>State模式</strong>會將變化封裝在class內，也就是以物件導向的<strong>多型</strong>取代<code>switch</code>，無論將來怎麼變化，對使用者看起來都是相同的<code>abstract class</code>。</p>
<p><strong>建立Abstract Class</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor123.png" alt=""></p>
<p>在<code>VideoRental</code>目錄下建立<code>AbstractMovieType</code>。<span class="margin-note-marker"><sup>86</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">86</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor124.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>AbstractMovieType</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor125.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>AbstractMovieType</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor126.png" alt=""></p>
<p>因為我們要建立的是abstract class，所以在class前面加上<code>abstract</code>。</p>
<p>另外定義一個abstract method : <code>calculatePrice()</code>。<span class="margin-note-marker"><sup>87</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">87</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/6c746df7b7486505520b9b8f9e7cfe9d07577b46" target="_blank" rel="external">重構 : 建立AbstractMovieType</a></span></span></span></p>
<p><strong>建立RegularMovieType Class</strong></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor127.png" alt=""></p>
<p>接著我們要將各種影片類型的計費方式，封裝在class內。</p>
<p>新增<code>RegularMovieType</code>，負責<strong>普通片</strong>的計費方式。<span class="margin-note-marker"><sup>88</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">88</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor128.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>RegularMovieType</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor129.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>RegularMovieType</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor130.png" alt=""></p>
<p>繼承<code>AbstractMovieType</code>，使用PhpStorm幫我們建立abstract class所定義的method。<span class="margin-note-marker"><sup>89</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">89</span>將滑鼠游標放在<code>AbstractMovieType</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method stubs</code>，按下可自動根據所繼承的<code>abstract class</code>建立method。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor131.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>calculatePrice()</code>，連註解也會一併建立。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor132.png" alt=""></p>
<p>將原本在<code>Movie-&gt;calculatePrice()</code>內的<strong>普通片</strong>計費方式<strong>剪下</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor133.png" alt=""></p>
<p>貼到<code>RegularMovieType</code>的<code>calculatePrice()</code>內。</p>
<p>直接將<code>$price</code>的初始值指定為<code>100</code>即可。<span class="margin-note-marker"><sup>90</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">90</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/19bdc0e9380da49ca6d90f54e3f2c4d0490cbe2e" target="_blank" rel="external">重構 : 建立RegularMovieType</a></span></span></span></p>
<p><strong>建立NewReleaseMovieType Class</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor134.png" alt=""></p>
<p>新增<code>NewReleaseMovieType</code>，負責<strong>新片</strong>的計費方式。<span class="margin-note-marker"><sup>91</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">91</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor135.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>NewReleaseMovieType</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor136.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>NewReleaseMovieType</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor137.png" alt=""></p>
<p>繼承<code>AbstractMovieType</code>，使用PhpStorm幫我們建立abstract class所定義的method。<span class="margin-note-marker"><sup>92</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">92</span>將滑鼠游標放在<code>AbstractMovieType</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method stubs</code>，按下可自動根據所繼承的<code>abstract class</code>建立method。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor138.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>calculatePrice()</code>，連註解也會一併建立。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor139.png" alt=""></p>
<p>將原本在<code>Movie-&gt;calculatePrice()</code>內的<strong>新片</strong>計費方式<strong>剪下</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor140.png" alt=""></p>
<p>貼到<code>NewReleaseMovieType</code>的<code>calculatePrice()</code>內。</p>
<p>直接將<code>$price</code>的初始值指定為<code>150</code>即可。<span class="margin-note-marker"><sup>93</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">93</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/ebf4d2057d46625018058426d9cf2b03c21151fc" target="_blank" rel="external">重構 : 建立NewReleaseMovieType</a></span></span></span></p>
<p><strong>建立ChildrenMovieType Class</strong></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor141.png" alt=""></p>
<p>新增<code>ChildrenMovieType</code>，負責<strong>兒童片</strong>的計費方式。<span class="margin-note-marker"><sup>94</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">94</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor142.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>ChildrenMovieType</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor143.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>ChildrenMovieType</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor144.png" alt=""></p>
<p>繼承<code>AbstractMovieType</code>，使用PhpStorm幫我們建立abstract class所定義的method。<span class="margin-note-marker"><sup>95</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">95</span>將滑鼠游標放在<code>AbstractMovieType</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method stubs</code>，按下可自動根據所繼承的<code>abstract class</code>建立method。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor145.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>calculatePrice()</code>，連註解也會一併建立。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor146.png" alt=""></p>
<p>將原本在<code>Movie-&gt;calculatePrice()</code>內的<strong>兒童片</strong>計費方式<strong>剪下</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor147.png" alt=""></p>
<p>貼到<code>ChildrenMovieType</code>的<code>calculatePrice()</code>內。</p>
<p>直接將<code>$price</code>的初始值指定為<code>40</code>即可。<span class="margin-note-marker"><sup>96</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">96</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/12b737c2e5c9cd4c98557aa01fdff20b84663bc5" target="_blank" rel="external">重構 : 建立ChildrenMovieType</a></span></span></span></p>
<p><strong>重構setType()</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor148.png" alt=""></p>
<p>之前的<code>setType()</code>只是單純的<code>$type</code> field的setter，不過使用<strong>State模式</strong>之後，<code>setType()</code>的角色就有了改變，不再只是單存的setter，而是要建立適當的<code>AbstractMovieType</code>物件。</p>
<p>將<code>calculatePrice()</code>剩下的<code>switch</code><strong>剪下</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor149.png" alt=""></p>
<p>貼到<code>setType()</code>內。</p>
<p>將<code>$this-&gt;getType()</code>改成<code>$type</code>。</p>
<p>將<code>$this-&gt;type</code>改<code>new</code>我們剛剛建立，用來封裝<strong>計費方式</strong>的物件。</p>
<p><code>private $type</code>的PHPDoc註解型別，也從原來的<code>string</code>改成<code>AbstractMovieType</code>。</p>
<p><strong>重構getType()</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor150.png" alt=""></p>
<p>因為<code>$type</code> field的型別已經從原本的<code>string</code>改成<code>AbstractMovieType</code>，因此<code>getType()</code>的回傳型別與PHPDoc註解也要更新。</p>
<p><strong>重構calculatePrice()</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor151.png" alt=""></p>
<p>由於<code>setType()</code>已經幫我們切換<strong>計費方式</strong>物件，據<strong>SOLID</strong>的<strong>里氏替換原則</strong>，且這些物件都是繼承於<code>AbstractMovieType</code>，根我們可以直接呼叫子類別的<code>calculatePrice()</code>。</p>
<p>馬上跑測試，確認<strong>重構</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>97</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">97</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/2febe67cb64bf893de17ac2e0c2ea99ca2c99de2" target="_blank" rel="external">重構 : Movie-&gt;setType(), getType()與calculatePrice()</a></span></span></span></p>
<h3 id="Replace_Constructor_with_Factory_Method">Replace Constructor with Factory Method</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor152.png" alt=""></p>
<p>在<strong>重構</strong>的技巧中，有一招叫做<strong>Replace Constructor with Factory Method</strong>，簡單的說，當你使用<code>new</code>去建立物件時，就直接相依了該物件，我們可將<code>new</code>物件的邏輯封裝在<strong>Simple Factory模式</strong>內，如此我們就只相依<strong>工廠物件</strong>，而不會直將相依於<strong>計費方式</strong>物件。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor153.png" alt=""></p>
<p>新增<code>MovieTypeFactory</code>，負責建立<strong>計費方式</strong>物件。<span class="margin-note-marker"><sup>98</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">98</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor154.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>MovieTypeFactory</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor155.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>MovieTypeFactory</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor156.png" alt=""></p>
<p>建立<code>create()</code>，並宣告成static。</p>
<p>將原本在<code>Movie-&gt;setType()</code>的程式全部貼到<code>create()</code>內。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor157.png" alt=""></p>
<p><code>create()</code>加上<code>string $type</code>參數，並加上回傳型別<code>AbstractMovieType</code>。</p>
<p>因為<code>create()</code>功能就是在建立物件，所以全部改成<code>return</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor158.png" alt=""></p>
<p>原本<code>Movie-&gt;setType()</code>，改由<code>MovieFactory::create()</code>來建立<strong>計費方式</strong>物件。</p>
<p>如此<code>Movie</code>將不再直接相依於每個<strong>計費物件</strong>，只相依於<code>MovieTypeFactory</code>。</p>
<p>馬上跑測試，確認<strong>重構</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>99</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">99</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/265b345f75793f67e0e044b2b004fbe04a97934a" target="_blank" rel="external">重構 : Simple Factory</a></span></span></span></p>
<h3 id="Replace_Conditional_with_Polymorphism">Replace Conditional with Polymorphism</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor159.png" alt=""></p>
<p>在<strong>重構</strong>技巧中，有一招叫做<strong>Replace Conditional with Polymorphism</strong>，簡單的說，就是要使用物件導向的<strong>多型</strong>來取代<code>switch</code>，達到<strong>SOLID</strong>的<strong>開放封閉原則</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor160.png" alt=""></p>
<p>使用Laravel的service container，利用<code>App::bind()</code>將<code>AbstractMovieType</code>與實際的<strong>計費方式</strong>連結。</p>
<p>使用<code>App::make()</code>建立<code>AbstractMovieType</code>型別的物件。</p>
<p>也就是說，只要<strong>計費方式</strong>物件改變，<code>App::bind()</code>會重新與<code>AbstractMovieType</code>連結，但對於<code>App::make()</code>來說，都是建立<code>AbstractMovieType</code>型別的物件，這就是物件導向的<strong>多型</strong>。<span class="margin-note-marker"><sup>100</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">100</span>詳細請參考<a href="/laravel/laravel-service-provider/">深入探討Service Provider</a></span></span></span></p>
<p>馬上跑測試，確認<strong>重構</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>101</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">101</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/182e7025e5fff605dc99419de774f2c72cd719be" target="_blank" rel="external">重構 : 多型App::bind()</a></span></span></span></p>
<h3 id="開放封閉原則">開放封閉原則</h3><table>
<thead>
<tr>
<th style="text-align:left">影片種類</th>
<th style="text-align:left">租期</th>
<th style="text-align:left">租金</th>
<th style="text-align:left">逾期費</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">普通片</td>
<td style="text-align:left">7天</td>
<td style="text-align:left">100</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">新片</td>
<td style="text-align:left">3天</td>
<td style="text-align:left">150</td>
<td style="text-align:left">30</td>
</tr>
<tr>
<td style="text-align:left">兒童片</td>
<td style="text-align:left">7天</td>
<td style="text-align:left">40</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">國片</td>
<td style="text-align:left">10天</td>
<td style="text-align:left">80</td>
<td style="text-align:left">10</td>
</tr>
</tbody>
</table>
<div class="alert alert-info"><i class="fa fa-info"></i>  現在需求改變，為了鼓勵<strong>國片</strong>，決定<strong>調降租金</strong>，並且<strong>延長租期</strong>。</div>
<p><strong> 測試案例 </strong></p>
<ol>
<li><p>普通片1支，10天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  100 + (10-7) * 10 = 130</div>
</li>
<li><p>新片1支，5天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  150 + (5-3) * 30 = 210</div>
</li>
<li><p>兒童片1支，8天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  40 + (8-7) * 10 = 50</div>
</li>
<li><p>國片1支，12天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  80 + (12-10) * 10 = 100</div>
</li>
</ol>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor161.png" alt=""></p>
<p>新增<strong>國片</strong>測試案例，得到第一個<span class="label label-danger">紅燈</span>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor162.png" alt=""></p>
<p>新增<code>TaiwanMovieType</code>，負責<strong>國片</strong>的計費方式。<span class="margin-note-marker"><sup>102</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">102</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor163.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>TaiwanMovieType</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor164.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>TaiwanMovieType</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor165.png" alt=""></p>
<p>繼承<code>AbstractMovieType</code>，使用PhpStorm幫我們建立abstract class所定義的method。<span class="margin-note-marker"><sup>103</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">103</span>將滑鼠游標放在<code>AbstractMovieType</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method stubs</code>，按下可自動根據所繼承的<code>abstract class</code>建立method。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor166.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>calculatePrice()</code>，連註解也會一併建立。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor167.png" alt=""></p>
<p>補上<strong>國片</strong>的<strong>計費方式</strong>。</p>
<p>馬上跑測試，確認新增的<strong>國片</strong>測試案例是否正常。<span class="margin-note-marker"><sup>104</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">104</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/fd60eb1e598c37d2c4fac0f1eb48fc7fa42fa528" target="_blank" rel="external">重構 : 開放封閉原則</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  若使用原本<strong>switch</strong>的方式，無論<strong>switch</strong>寫在哪裡，只要新增功能，就一定要去改<strong>switch</strong>，這就違反了<strong>SOLID</strong>的<strong>開放封閉原則</strong>，若使用物件導向的<strong>多型</strong>之後，若新增功能，只要新增class，繼承abstract class即可，原來的程式完全不用修改，完全達到<strong>開放封閉原則</strong>的要求。</div>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  我們做了哪些重構?</div>
<ol>
<li><strong>Extract Method</strong> : 將原本很長的函式利用<strong>Extract Method</strong>拆解成數個小小的method。</li>
<li><strong>Move Method</strong> : 利用<strong>Move Method</strong>將method搬到它適合的class內。</li>
<li><strong>使用多型取代switch</strong> : 若程式內有<code>switch</code>，考慮使用物件導向<strong>多型</strong>的<strong>State模式</strong>或<strong>Strategy模式</strong>取代，達成<strong>SOLID</strong>的<strong>開放封閉原則</strong>。</li>
</ol>
<h2 id="偵錯">偵錯</h2><hr>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor171.png" alt=""></p>
<p>假設在<strong>國片</strong>的<strong>計費方式</strong>，故意將<strong>逾期費用</strong><code>10</code>元改成<code>5</code>元，我們該如何找到這個bug呢?</p>
<h3 id="使用測試案例偵錯">使用測試案例偵錯</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor172.png" alt=""></p>
<p>執行測試，發現錯在<code>test_order_1_taiwan_movie_with_12_days()</code>這個測試案例，且期望值是100，而實際值是90。</p>
<p>且由於每個測試案例是針對單一class的method，我們可以很快的鎖定問題是出在<code>Customer-&gt;calculatePrice()</code>的錯誤。</p>
<h3 id="使用PhpStorm偵錯">使用PhpStorm偵錯</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor173.png" alt=""></p>
<p>PhpStorm允許我們直接在PHP內下中斷點，假如你知道問題在哪裡，可以直接在該class的method內下中斷點，若完全沒有頭緒，可以在<code>act</code>之處下中斷點，最少在執行target的method前會停下來。<span class="margin-note-marker"><sup>105</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">105</span>在欲中斷的程式之處按熱鍵 : &#8984; + F8，可<strong>設定</strong>或<strong>取消</strong>中斷點。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor174.png" alt=""></p>
<p>啟動<strong>偵錯</strong>模式。<span class="margin-note-marker"><sup>106</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">106</span>在欲啟動<strong>偵錯</strong>的測試案例內，按熱鍵 : &#8963; + &#8679; + D啟動偵錯模式，程式會停在剛剛建立的<strong>中斷點</strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor175.png" alt=""></p>
<p>Step Into進<code>Customer-&gt;calculateTotalPrice()</code>。<span class="margin-note-marker"><sup>107</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">107</span>Step Into : 熱鍵 : F7<br>Step Over : 熱鍵 : F8<br>Step Out : 熱鍵 : &#8679; + F8</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor176.png" alt=""></p>
<p>找到root cause在<code>TaiwanMovieType</code>的<code>calculatePrice()</code>的18行有問題。</p>
<h2 id="學習資源">學習資源</h2><hr>
<ul>
<li>測試 : <a href="https://laracasts.com/series/phpunit-testing-in-laravel" target="_blank" rel="external">PHPUnit Testing with Laravel</a></li>
</ul>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor177.png" alt=""></p>
<ul>
<li>重構 : <a href="http://www.tenlong.com.tw/items/9861547533?item_id=45657" target="_blank" rel="external">重構 : 改善既有程式的設計 (二版)</a></li>
</ul>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor.jpg" alt=""></p>
<ul>
<li>設計模式 : <a href="http://www.tenlong.com.tw/items/9866761797?item_id=45056" target="_blank" rel="external">大話設計模式</a></li>
</ul>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/dp_easy.jpg" alt=""></p>
<h2 id="學習方式">學習方式</h2><hr>
<img src="/images/phpstorm/phpstorm-tdd-refactor/roadmap.svg" width="750">
<ul>
<li>直接由<strong>設計模式</strong>學習物件導向的學習曲線較為陡峭，很吃天份，失敗機率較高。</li>
<li>學習<strong>測試</strong>與<strong>重構</strong>達成<strong>設計模式</strong>的學習曲線較為平緩，適合常人，成功機率較高。</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>好程式不是<strong>設計</strong>出來的，而是<strong>重構</strong>出來的。</li>
<li>重構一定要搭配測試。TDD讓我們以<strong>Top Down</strong>方式，以需求出發，幫助我們抽象化思考，不用太早就去思考細節，可以更容易設計出符合SOLID的物件導向程式。</li>
<li>測試重構會多花一點時間，因此我們要選擇更強悍的工具將時間省回來。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel51Refactor_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用正確的工具將會事半功倍]]>
    
    </summary>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
</feed>
