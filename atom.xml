<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2016-03-22T14:03:51.000Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何根據Checkbox選取與否決定Button的Enable?]]></title>
    <link href="http://oomusou.io/vuejs/vuejs-checkbox-button-disable/"/>
    <id>http://oomusou.io/vuejs/vuejs-checkbox-button-disable/</id>
    <published>2016-03-21T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>實務上GUI常需要做一些防呆，如勾選了<strong>I agree</strong>的之後，button才能enable，否則為disable；又如若完全沒有選擇任何產品時，button為disable，只要選擇了一個以上的產品，button為enable，這在Vue.js是否有不同的作法呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Vue.js 1.0.18</p>
<h2 id="單一Checkbox">單一Checkbox</h2><hr>
<p></p><p data-height="120" data-theme-id="0" data-slug-hash="mVNVrL" data-default-tab="result" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/mVNVrL/" target="_blank" rel="external">Vue.js Checkbox and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>預設button為disable，當勾選了<code>I Agree</code>之後，button變成enable。</p>
<p></p><p data-height="200" data-theme-id="0" data-slug-hash="mVNVrL" data-default-tab="html" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/mVNVrL/" target="_blank" rel="external">Vue.js Checkbox and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>HTML很簡單，只有checkbox與button。</p>
<p>要給Vue.js管理的<code>&lt;div&gt;</code>，要加上<code>id</code>。</p>
<p>checkbox使用了<code>v-model</code>與<code>checked</code>做data binding，<code>v-model</code>為Vue.js自己的directive。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>凡<code>v-</code>開頭的屬性皆為Vue.js所提供的directive。</span></span></span></p>
<p>button直接將<code>disable</code>屬性與<code>checked</code>做data binding，<code>:</code>為Vue.js所擴充的符號，表示將HTML屬性做data binding。</p>
<ul>
<li>當勾選了checkbox時，checked為1，也就是true，加了<code>!</code>為false，為<code>disabled=false</code>，也就是enable。</li>
<li>當不勾選checkbox時，checked為0，也就是false，加了<code>!</code>為true，為<code>disabled=true</code>，也就是disable。</li>
</ul>
<p></p><p data-height="200" data-theme-id="0" data-slug-hash="mVNVrL" data-default-tab="js" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/mVNVrL/" target="_blank" rel="external">Vue.js Checkbox and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p><code>el</code>指定Vue.js所掌管的<code>&lt;div&gt;</code>區塊的<code>id</code>。</p>
<p><code>data</code>列出了<code>checked</code>變數，也就是要做data binding的變數。</p>
<h2 id="多個Checkbox">多個Checkbox</h2><hr>
<p></p><p data-height="180" data-theme-id="0" data-slug-hash="LNWOmq" data-default-tab="result" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/LNWOmq/" target="_blank" rel="external">Vue.js Checkboxs and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>預設button為disable，當勾選任意checkbox後，button變成enable，若沒勾選任checkbox，則button又變為disable。</p>
<p></p><p data-height="310" data-theme-id="0" data-slug-hash="LNWOmq" data-default-tab="html" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/LNWOmq/" target="_blank" rel="external">Vue.js Checkboxs and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>HTML很簡單，只有多個checkbox與button。</p>
<p>3個checkbox的<code>v-model</code>都與相同的<code>checked</code>做data binding，不過此時<code>checked</code>為陣列。</p>
<p>button直接將<code>disable</code>屬性與<code>checked</code>做data binding。</p>
<ul>
<li>當勾選了多個checkbox時，checked陣列的length大於0，為true，加了<code>!</code>為false，為<code>disabled=false</code>，也就是enable。</li>
<li>當沒勾選任何checkbox時，checked陣列的length等於0，為false，加了<code>!</code>為true，為<code>disabled=true</code>，也就是disable。</li>
</ul>
<p></p><p data-height="200" data-theme-id="0" data-slug-hash="LNWOmq" data-default-tab="js" data-user="oomusou" class="codepen">See the Pen <a href="http://codepen.io/oomusou/pen/LNWOmq/" target="_blank" rel="external">Vue.js Checkboxs and Enable Button</a> by oomusou (<a href="http://codepen.io/oomusou" target="_blank" rel="external">@oomusou</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>JavaScript非常精簡，與單一checkbox的差別只有<code>false</code>改成<code>[]</code>，完全不用寫任何邏輯判斷，也不用處理任何event。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Vue.js的思維與jQuery不同，寫jQuery需要思考的是<strong>event</strong>，但寫Vue.js需思考的是<strong>data</strong>，透過data binding，我們可以將邏輯放在處理data，而不是如jQuery是在處理DOM，因此Vue.js的程式非常精簡。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="http://codepen.io/oomusou/" target="_blank" rel="external">CodePen</a>上找到。</p>
<ul>
<li><a href="http://codepen.io/oomusou/pen/mVNVrL" target="_blank" rel="external">單一Checkbox</a></li>
<li><a href="http://codepen.io/oomusou/pen/LNWOmq" target="_blank" rel="external">多個Checkbox</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[以Data Binding的方式使用Vue.js]]>
    
    </summary>
    
      <category term="Vue.js" scheme="http://oomusou.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何一個專案使用一個Homestead?]]></title>
    <link href="http://oomusou.io/laravel/homestead/homestead-per-project/"/>
    <id>http://oomusou.io/laravel/homestead/homestead-per-project/</id>
    <published>2016-03-20T01:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>傳統上都是在系統只安裝一個Homestead，然後每個專案設定不同站台，各專案共用同一個資料庫。這種方式大體上也沒什麼問題，但有時若想測試一些東西，如安裝Facebook的XHProf + XHGUI，將這些測試用的東西安裝在開發用的Homestead似乎不妥，因此最理想的方式是每個專案有自己的Homestead，各專案可以安裝自己所需的元件，而不影響其他專案。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.23<br>Homestead 0.4.2<br>OS X 10.11.3</p>
<h2 id="Prerequisite">Prerequisite</h2><hr>
<p>在OS X已經成功安裝好Homestead。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>詳細請參考<a href="/laravel/homestead/homestead-osx/">如何在OS X安裝Homestead?</a></span></span></span></p>
<h2 id="安裝laravel/homestead套件">安裝laravel/homestead套件</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require laravel/homestead --dev</span><br></pre></td></tr></table></figure>
<p>在專案目錄下安裝<code>laravel/homestead</code>套件，這是Laravel官方的套件，不過目前並沒有放進Laravel 5.2內，需另外自行安裝。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using version ^3.0 for laravel/homestead&#10;./composer.json has been updated&#10;Loading composer repositories with package information&#10;Updating dependencies (including require-dev)&#10;  - Installing laravel/homestead (v3.0.2)&#10;    Downloading: 100%&#10;&#10;Writing lock file&#10;Generating autoload files&#10;&#62; php artisan clear-compiled&#10;&#62; php artisan optimize&#10;Generating optimized class loader</span><br></pre></td></tr></table></figure>
<h2 id="建立Homestead設定檔">建立Homestead設定檔</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php vendor/bin/homestead make</span><br></pre></td></tr></table></figure>
<p>在目前目錄下建立<code>Vagrantfile</code>與<code>Homestead.yaml</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Homestead Installed!</span><br></pre></td></tr></table></figure>
<p>傳統我們還可能需要修改<code>Homestead.yaml</code>的shared folder，但因為Homestead目前只用在一個專案，所以預設值都已經設定好了，不必修改。</p>
<h2 id="啟動Homestead">啟動Homestead</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ vagrant up</span><br></pre></td></tr></table></figure>
<p>接著Homestead就正常啟動了，剩下的用法跟你之前熟悉的Homestead完全一樣。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  由於Homestead會在~/VirtualBox VMs目錄下建立與專案目錄名稱相同的目錄放置VM，所以唯一的限制是專案目錄名稱不能重複，否則vagrant up會失敗。</div>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於每個專案都有自己的VM，優點是非常乾淨，缺點是非常浪費磁碟空間。</li>
<li>由於每個專案都有自己的VM，當切換到其他專案時，記得要先將目前Homestead <code>vagrant halt</code>關機，然後再將另一個專案的Homestead <code>vagrant up</code>開機。</li>
<li>由於每個專案都有自己的VM，所以測試用的專案可以隨時<code>vagrant destroy --force</code>掉，不會影響正式開發的Homestead。</li>
<li>實務上非常推薦這種使用方式，可以將不同專案的side effect降到最低。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/HomesteadPerProject_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[再也不用擔心專案A安裝的元件會影響到專案B了]]>
    
    </summary>
    
      <category term="Homestead" scheme="http://oomusou.io/tags/Homestead/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在OS X安裝Homestead?]]></title>
    <link href="http://oomusou.io/laravel/homestead/homestead-osx/"/>
    <id>http://oomusou.io/laravel/homestead/homestead-osx/</id>
    <published>2016-03-17T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>初學者因為Laravel環境難安裝而卡很久嗎?Laravel官方已經幫我們將整個環境用VM打包好，讓初學者可以不用擔心如何在OS X安裝PHP、Composer、Nginx、MySQL，就可快速地享受Laravel所帶來的便利。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.23<br>Homestead 0.4.2<br>VirtualBox for OS X 5.0.16<br>Vagrant for OS X 1.8.1<br>OS X 10.11.3</p>
<h2 id="簡介">簡介</h2><hr>
<p>Homestead是Laravel官方以Vagrant為基礎建立的VM，已經幫我們安裝好以下軟體 :</p>
<ul>
<li><strong>Ubuntu 14.04</strong> : 2014年所推出的Ubuntu LTS版本。</li>
<li><strong>PHP 7.0.3</strong> : PHP最新版，已經更新到PHP 7，符合Laravel 5.2對PHP版本要求，且所需extension已經裝好。</li>
<li><strong>Composer</strong>：PHP套件管理工具，會在每次Homestead啟動時自動更新。</li>
<li><strong>HHVM</strong> : Facebook對PHP的JIT compiler支援。</li>
<li><strong>Nginx</strong> : 效能較Apache優異的Web server。</li>
<li><strong>MySQL</strong> : 關聯式資料庫 (預設)。</li>
<li><strong>Postgres</strong> : 關聯式資料庫。</li>
<li><strong>Node.js</strong><ul>
<li><strong>Bower</strong> : CSS、JavaScript套件管理工具。</li>
<li><strong>Npm</strong> : Node.js套件管理工具。</li>
<li><strong>Grunt</strong> : JavaScript壓縮、測試、部署工具。</li>
<li><strong>Gulp</strong> : JavaScript環境管理工具。</li>
</ul>
</li>
<li><strong>Redis</strong> : 非關聯式的Key-Value資料庫。</li>
<li><strong>Memcached</strong> : 非關聯式的Key-Value資料庫。</li>
<li><strong>Beanstalkd</strong> : Job Queue Server。</li>
<li><strong>Laravel Envoy</strong> : Laravel官方提供的任務執行工具。</li>
<li><strong>Fabric + HipChat extension</strong> : log管理工具。</li>
<li><strong>Blackfire Profiler</strong> : 效能評估工具。</li>
</ul>
<p>這些工具當然可以自己慢慢裝，但需要時間，還可能遇到軟體相衝的問題，就算安裝完沒錯誤訊息，也不保證能正確執行Laravel。</p>
<p>Laravel官方已經將這些軟體都幫你安裝好、測試好並打包好，這就是Homestead。</p>
<h2 id="Why_Homestead?">Why Homestead?</h2><hr>
<ul>
<li>不再因為你的PHP缺少某個extension，而導致Laravel安裝失敗。</li>
<li>不再因為軟體相衝或port相衝，而使得Laravel執行錯誤。</li>
<li>不再因為要安裝與設定軟體，而浪費一整天的時間。</li>
<li>不再因為你換了一個作業系統，而必須重新打造整個Laravel環境。</li>
<li>不再因為團隊中每個人的環境不統一，而造成debug困難。</li>
</ul>
<p>Homestead是Laravel爸爸Taylor Otwell親手打造，也是Laravel開發測試時所使用的環境，若遇到bug時不用再懷疑是否環境有問題，因為你的環境與Taylor Otwell所使用的一樣。</p>
<p>也因為Homestead是官方所打包的環境，若有問題也方便與社群討論。</p>
<h2 id="Vagrant">Vagrant</h2><hr>
<p>既然Homestead使用的是VM技術，用的是VirtualBox，為什麼還要使用Vagrant呢？這是很多Homestead初學者的問題，包括我自己在內。</p>
<p>Vagrant是個用Ruby所寫的軟體，簡單的說，他的核心部分仍使用VirtualBox，Vagrant只能算是個VirtualBox管理工具。也就是說，你雖然需安裝VirtualBox，但安裝完後就再也碰不到它了，因為Vagrant已經全面接管VirtualBox，你所有的操作都在Vagrant上。</p>
<p>Vagrant包含2個部分 :</p>
<ol>
<li><strong>Vagrant Box</strong> : 將應用程式環境與作業系統打包在一起。</li>
<li><strong>Scripts</strong> : <ul>
<li><strong>Vagrantfile</strong> : 使用Ruby開發，是Homestead執行時，第一個被執行的程式，負責設定Homestead環境變數，並調用其他scripts執行。我們不用去修改，Homestead已經幫我們建好了。</li>
<li><strong>homestead.rb</strong> : 使用Ruby開發，Vagrantfile會調用<code>homestead.rb</code>，由<code>homestead.rb</code>去讀取<code>Homestead.yaml</code>，依其設定將VM provision起來。我們不用去修改，Homestead已經幫我們建好了。</li>
<li><strong>Homestead.yaml</strong> : 使用Ruby開發，用來設定我們自己的Homestead，如CPU用幾個? 記憶體開多大? shared folder路徑怎麼設定? 資料庫建立…等，這個檔案我們必須自己設定。</li>
<li><strong>after.sh</strong> : 使用Bash開發，當Homestead啟動之後，會執行<code>after.sh</code>內的內容，若我們希望Homestead啟動之後馬上啟動某些程式，可以寫在這裡。</li>
<li><strong>aliases</strong> : 使用Bash開發，可以在此設定Homestead內的Bash alias。</li>
</ul>
</li>
</ol>
<p>事實上還有很多scripts沒有提到，這裏只提到最重要的幾個scripts。</p>
<p>若還是對Vagrant很模糊沒關係，最後我們還會對Homestead啟動做更深入地解釋。</p>
<p>簡單的說，Homestead就是 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Homestead = VirtualBox + Vargrnt + Homestead Vagrant Box + Homestead Scripts。</div>
<h2 id="安裝流程">安裝流程</h2><hr>
<img src="/images/laravel/homestead/homestead-osx/home011.svg" width="280">
<p>接下來我們將一步一步地將Homestead安裝起來。</p>
<h3 id="安裝VirtualBox">安裝VirtualBox</h3><p>到<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">VirtualBox Download</a>下載VirtualBox for OS X hosts，不必下載Extension Pack，因為不會在VirtualBox下使用GUI模式。</p>
<p><strong>執行VirtualBox-5.0.16-105871-OSX.dmg</strong><br><img src="/images/laravel/homestead/homestead-osx/home000.png" alt=""></p>
<p>滑鼠點兩下<code>VirtualBox.pkg</code>圖示開始安裝。</p>
<p><strong>確認安裝</strong><br><img src="/images/laravel/homestead/homestead-osx/home001.png" alt=""></p>
<p>因為是pkg格式，必須手動確認是否執行，按<code>continue</code>繼續。</p>
<p><strong>歡迎畫面</strong><br><img src="/images/laravel/homestead/homestead-osx/home002.png" alt=""></p>
<p>按<code>continue</code>繼續。</p>
<p><strong>選取目標與安裝類型</strong><br><img src="/images/laravel/homestead/homestead-osx/home003.png" alt=""></p>
<p>按<code>Install</code>繼續。</p>
<p><strong>安裝成功</strong><br><img src="/images/laravel/homestead/homestead-osx/home004.png" alt=""></p>
<p>按<code>Close</code>結束安裝程式。</p>
<p><strong>執行VirtualBox</strong><br><img src="/images/laravel/homestead/homestead-osx/home005.png" alt=""></p>
<p>在<code>Application</code>下選擇<code>VirtualBox</code>，滑鼠點兩下執行。</p>
<p><strong>安裝完成</strong><br><img src="/images/laravel/homestead/homestead-osx/home006.png" alt=""></p>
<p>若安裝成功，將顯示<strong>Oracle VM VirtualBox Manager</strong>。</p>
<h3 id="安裝Vagrant">安裝Vagrant</h3><p>到<a href="http://www.vagrantup.com/downloads.html" target="_blank" rel="external">Vagrant Download</a>下載Vagrant for OSX。</p>
<p><strong>執行vagrant_1.8.1.dmg</strong><br><img src="/images/laravel/homestead/homestead-osx/home007.png" alt=""></p>
<p>滑鼠點兩下<code>Vagrant.pkg</code>圖示開始安裝。</p>
<p><strong>歡迎畫面</strong><br><img src="/images/laravel/homestead/homestead-osx/home008.png" alt=""></p>
<p>按<code>continue</code>繼續。</p>
<p><strong>選取目標與安裝類型</strong><br><img src="/images/laravel/homestead/homestead-osx/home009.png" alt=""></p>
<p>按<code>Install</code>繼續。</p>
<p><strong>安裝成功</strong><br><img src="/images/laravel/homestead/homestead-osx/home010.png" alt=""></p>
<p><strong>安裝完成</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ vagrant version</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home012.png" alt=""></p>
<p>若成功會顯示目前Vagrant版本資訊。</p>
<h3 id="下載Homestead">下載Homestead</h3><p>下載Homestead vagrant box。</p>
<p><strong>使用vagrant box add下載Homestead vagrant box</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ vagrant box add laravel/homestead</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home013.png" alt=""></p>
<p>選擇<code>1</code>：virtualbox格式</p>
<p><img src="/images/laravel/homestead/homestead-osx/home014.png" alt=""></p>
<p>大約需要10分鐘下載。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  為什麼我們要花10分鐘下載Homestead呢?</div>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd ~/.vagrant.d/boxes&#10;oomusou@mac:~/.vagrant.d/boxes$ ll</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/homestead/homestead-osx/home015.png" alt=""></p>
<p>在<code>~/.vagrant.d/boxes</code>目錄下了多了<code>laravel-VAGRANTSLASH-homestead</code>目錄。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/.vagrant.d/boxes$ cd laravel-VAGRANTSLASH-homestead/0.4.2/virtualbox&#10;oomusou@mac:~/.vagrant.d/boxes/laravel-VAGRANTSLASH-homestead/0.4.2/virtualbox$ ll</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/homestead/homestead-osx/home016.png" alt=""></p>
<p>其中<code>0.4.2</code>是Homestead的版本，若本機有下載多個Homestead版本，這邊就會有多個版本目錄。</p>
<p>我們看到了<code>box-disk1.vmdk</code>，這超過1GB的<code>box-disk1.vmdk</code>是VirtualBox的檔案格式，這也是為什麼我們要花10分鐘下載的原因。</p>
<h3 id="下載設定檔">下載設定檔</h3><p>下載Vagrantfile + Scripts。</p>
<p><strong>下載Homestead設定檔</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ git clone https://github.com/laravel/homestead.git Homestead</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home017.png" alt=""></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Homestead設定檔包括哪些東西呢?</div>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Homestead&#10;oomusou@mac:~/Homestead$ ll</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/homestead/homestead-osx/home018.png" alt=""></p>
<p>在<code>~/Homestead</code>目錄下，我們看到了一些檔案：</p>
<ul>
<li><strong>Vagrantfile</strong> : 事實上將來每次下<code>vagrant up</code>指令時，就是在找這個檔案，這是Vagrant Box啟動時第一個執行的檔案，Homestead已經幫我們客製化了。</li>
<li><strong>init.sh</strong> : 建立自己的<code>Homestead.yaml</code>、<code>after.sh</code>與<code>aliases</code>，稍後會用到。</li>
<li><strong>scripts目錄</strong> : Homestead自己會用到的scripts，如<code>homestead.rb</code>就在此目錄下。</li>
</ul>
<h3 id="設定SSH金鑰">設定SSH金鑰</h3><p>將來會使用SSH方式連進Homestead，所以要設定SSH金鑰。</p>
<p><strong>使用ssh-keygen建立SSH金鑰</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ ssh-keygen -t rsa -C &#34;oomusou@homestead&#34;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home019.png" alt=""></p>
<p><code>oomusou</code>為你的user名稱。</p>
<p><code>id_rsa</code>接受預設目錄即可。</p>
<p><code>passphrase</code>是設定密碼。</p>
<h3 id="設定Homestead-yaml">設定Homestead.yaml</h3><p>之前提到<code>Vagrantfile</code>會調用<code>homestead.rb</code>，由<code>homestead.rb</code>去讀取<code>Homestead.yaml</code>，依其設定將Homestead provision起來。</p>
<p><strong>使用init.sh建立Homestead.yaml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Homestead&#10;oomusou@mac:~/Homestead$ sh ./init.sh</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/homestead/homestead-osx/home020.png" alt=""></p>
<p><code>init.sh</code>會幫我們在<code>~/.homestead/</code>目錄建立<code>Homestead.yaml</code>。</p>
<p><img src="/images/laravel/homestead/homestead-osx/home021.png" alt=""></p>
<p>事實上，<code>init.sh</code>還幫我們建立了<code>after.sh</code>與<code>aliases</code>。 若我們想修改<code>after.sh</code>與<code>aliases</code>，就是在這裡修改。</p>
<p><strong>修改Homestead.yaml</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd .homestead&#10;oomusou@mac:~/.homestead$ vim Homestead.yaml</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home022.png" alt=""></p>
<p>這是Homestead唯一需要我們手動修改設定的地方，<code>homestead.rb</code>會依照<code>Homestead.yaml</code>的設定為我們的Homestead做provision。</p>
<p><img src="/images/laravel/homestead/homestead-osx/home023.png" alt=""></p>
<ul>
<li><p><strong>ip</strong> : 設定Homestead的IP，若IP沒有相衝，可以不用修改。</p>
</li>
<li><p><strong>memory</strong> : 單位為MB，預設開2GB，若你嫌這樣太耗記憶體，根據經驗，512MB就可以讓Homestead啟動，不過有些service會失敗，1GB以上service都會正常，不過因為記憶體較少，有時會因為swap memory到HDD/SSD導致效能較差。</p>
</li>
<li><p><strong>cpu</strong> : 維持預設1顆CPU即可。</p>
</li>
<li><p><strong>provider</strong> : 使用VirtualBox，不用修改。</p>
</li>
<li><p><strong>authorize</strong> : 設定SSH public key位置，若之前ssh-keygen使用預設位置建立，則不用修改。</p>
</li>
<li><p><strong>keys</strong> : 設定SSH private key位置，若之前ssh-keygen使用預設位置建立，則不用修改。</p>
</li>
<li><p><strong>folders</strong> : <code>Homestead.yaml</code>重要的設定，設定Mac本機與Homestead的對應路徑。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>事實上這就是VirtualBox的shared folder機制，我們知道VM最佳使用方式是環境灌在VM內，但專案放在本機，透過shared folder機制讓VM使用本機的專案，這樣的優點是儘管VM損毀開不了機，專案仍然不會受影響，因為專案是放在本機，只要再重新建立一個VM即可。</span></span></span></p>
<ul>
<li><strong>map</strong> : 設定Mac本機Laravel專案路徑，可自行修改。預設值是<code>~/Code</code>，目前接受預設值即可。</li>
<li><strong>to</strong> : 設定Homestead內Laravel專案路徑，可自行修改。目前接受預設值即可。</li>
</ul>
</li>
<li><p><strong>sites</strong> : <code>Homestead.yaml</code>重要的設定，讓你可以對Nginx設定網域主機名稱。</p>
<ul>
<li><p><strong>map</strong> : 網域主機名稱。預設為<code>homestead.app</code>，目前接受預設值即可。</p>
</li>
<li><p><strong>to</strong> : 此站台所對應的目錄名稱。預設為<code>/home/vagrant/Projects/Laravel/public</code>。因為Laravel的<code>index.php</code>放在<code>public</code>目錄下。目前接受預設值即可。</p>
</li>
</ul>
</li>
<li><p><strong>databases</strong> : <code>Homestead.yaml</code>重要的設定，可以在此設定資料庫名稱，由Homestead幫你自動建立。目前維持預設homestead即可。</p>
</li>
<li><p><strong>variables</strong> :  設定Lavavel全域變數，目前使用預設值即可</p>
</li>
</ul>
<p><strong>補建~/Code目錄</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/.homestead$ cd ..&#10;oomusou@mac:~$ mkdir Code</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home024.png" alt=""></p>
<p>因為剛才設定Mac本機Laravel專案路徑為<code>~/Code</code>，但這麼目錄並不存在，所以要補建目錄。</p>
<h3 id="修改hosts檔">修改hosts檔</h3><p>因為Homestead的IP為<code>192.168.10.10</code>，其網域主機名稱為<code>homestead.app</code>，要設定<code>hosts</code>將彼此對應起來。</p>
<p><strong>修改/etc/hosts</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ sudo vim /etc/hosts</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home025.png" alt=""></p>
<p>使用vim修改<code>hosts</code>。</p>
<p><strong>加入IP與網域主機名稱對應</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.10 homestead.app</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home026.png" alt=""></p>
<h3 id="啟動Homestead">啟動Homestead</h3><p><strong>使用vagrant up啟動Homestead</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Homestead&#10;oomusou@mac:~/Homestead$ vagrant up</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home027.png" alt=""></p>
<p>先cd進<code>Homestead</code>目錄，使用<code>vagrant up</code>指令啟動Homestead。</p>
<p>先進入<code>Homestead</code>目錄是必須的，凡Vagrant指令在執行時都會找<code>Vagrantfile</code>，而<code>Vangrantfile</code>就是放在<code>~/Homestead</code>目錄下。</p>
<p>Homestead啟動時還會上網檢查是不是最新版，並提醒你是否該更新。</p>
<p><img src="/images/laravel/homestead/homestead-osx/home028.png" alt=""></p>
<p>若此時打開VirtualBox，會發現有一個VM正在執行中，這也證明了Vagrant背後執行的是VirtualBox。</p>
<h3 id="使用SSH登入">使用SSH登入</h3><p><strong>使用vagrant ssh登入Homestead</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ cd Homestead&#10;oomusou@mac:~/Homestead$ vagrant ssh</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home029.png" alt=""></p>
<p>如同<code>vagrant up</code>一樣，下任何vagrant指令都要在<code>~/Homestead</code>目錄下。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>為什麼不需要login呢？因為我們之前已經設定了SSH金鑰，homestead ssh會自動去讀取金鑰登入，所以不用login。</span></span></span></p>
<p>我們已經可以順利登入Ubuntu 14.04 LTS了。</p>
<p><strong>顯示shared folder</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~$ ll</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home030.png" alt=""></p>
<p>我們可以在home directory可以看到Mac本機的<code>~/Code</code>目錄。</p>
<h3 id="下載Laravel">下載Laravel</h3><p>在Homestead使用Composer下載Laravel。</p>
<p><strong>使用Composer建立Laravel專案</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~$ cd Code&#10;vagrant@homestead:~/Code$ composer create-project laravel/laravel Laravel --prefer-dist</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/homestead/homestead-osx/home031.png" alt=""></p>
<p>統一將專案放在<code>Code</code>目錄下，其中<code>Laravel</code>為你的專案目錄名稱。</p>
<p>Composer將會建立一個<code>Laravel</code>目錄，並將Laravel所需要的檔案透過網路下載。</p>
<p><strong>–prefer-dist</strong> : 此參數意思是下載用於distribution的穩定版本，而不是正在開發中的版本，對於應用來說，穩定版本較適當。</p>
<p>由於Composer是透過網路去下載Laravel，所以請先確定網路是通的。</p>
<h3 id="使用瀏覽器驗證">使用瀏覽器驗證</h3><p><strong>在瀏覽器輸入homestead.app</strong></p>
<p><img src="/images/laravel/homestead/homestead-osx/home032.png" alt=""></p>
<p>若能在瀏覽器看到Laravel 5，恭喜你，Homestead與Laravel環境已經大功告成了。</p>
<h2 id="新增站台">新增站台</h2><hr>
<p>實務上我們可能會有很多專案在Homestead跑，因此需要新增其他站台。</p>
<p><strong>修改Homestead.yaml</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: homestead.app</span><br><span class="line">      to: /home/vagrant/Code/Laravel/<span class="keyword">public</span></span><br><span class="line"></span><br><span class="line">    - map: blog.local</span><br><span class="line">      to: /home/vagrant/Code/blog/<span class="keyword">public</span> </span><br><span class="line"></span><br><span class="line">databases:</span><br><span class="line">    - homestead</span><br><span class="line">    - blog</span><br></pre></td></tr></table></figure>
<p>新增站台則新增<code>map</code>與<code>to</code>，如<code>blog.local</code>與其對應的路徑<code>/home/vagrant/Code/blog/public</code>。</p>
<p>新增資料庫則新增<code>databases</code>，如<code>blog</code>為新增的資料庫。</p>
<p><strong>修改hosts檔</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.10</span><span class="number">.10</span> blog.local</span><br></pre></td></tr></table></figure></p>
<p><strong>重新Provision</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/Homestead$ vagrant provision</span><br></pre></td></tr></table></figure></p>
<p>將自動根據<code>Homestead.yaml</code>的設定，重新啟動Homestead，並啟動新站台與建立<code>blog</code>資料庫。</p>
<h2 id="結束Homestead">結束Homestead</h2><hr>
<p>Homestead跑的就是Ubuntu，若我們想讓Ubuntu關機，也須依照正常程序關機。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant@homestead:~$ eixt&#10;oomusou@mac:~/Homestead$ vagrant halt</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/homestead/homestead-osx/home033.png" alt=""></p>
<p><code>exit</code>離開<code>vagrant ssh</code>。</p>
<p><code>vagrant halt</code>讓Homestead正常關機。</p>
<h2 id="刪除Homestead">刪除Homestead</h2><hr>
<p>若Homestead僅供測試用，想徹底刪除，請下以下指令 :<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/Homestead$ vagrant destroy --force</span><br></pre></td></tr></table></figure></p>
<h2 id="重建Homestead">重建Homestead</h2><hr>
<p>Homestead被刪除後，想重新建立，請下以下指令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/Homestead$ vagrant up</span><br></pre></td></tr></table></figure></p>
<h2 id="移除Homestead">移除Homestead</h2><hr>
<p><strong>移除</strong>與<strong>刪除</strong>是不一樣的，之前刪除Homestead，是將VirtualBox的Homestead VM刪除，也就是將<code>vagrant up</code>所建立的VM刪除，之後可以隨時再用<code>vagrant up</code>建立。</p>
<p>而移除Homestead是將之前使用 :</p>
<ol>
<li><code>vagrant box add laravel/homestead</code></li>
<li><code>git clone https://github.com/laravel/homestead.git Homestead</code></li>
<li><code>sh ./init.sh</code></li>
</ol>
<p>所下載與建立的檔案全部移除。</p>
<p>當完全不再使用Homestead，或Homestead Vagrant Box與Homestead scripts與設定檔壞掉，須重新下載與安裝設定Homestead時才需要這樣做。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>Virtual Box與Vagrant一般來說不會壞掉，所以不需重新安裝，若連Virtual Box與Vagrant都想移除，請參考其官網說明。</span></span></span></p>
<p>刪除以下3個目錄 :</p>
<ol>
<li><code>~/.vagrant.d</code></li>
<li><code>~/Homestead</code></li>
<li><code>~.homestead</code></li>
</ol>
<h2 id="Homestead啟動原理">Homestead啟動原理</h2><hr>
<img src="/images/laravel/homestead/homestead-osx/home034.svg" width="800">
<p>之前已經稍微講過Homestead的組成元素，事實上Homestead啟動時，是依以上步驟啟動。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  給OS X使用者的特別建議</div>
<p><img src="/images/laravel/homestead/homestead-osx/home035.png" alt=""></p>
<p>OS X使用者較習慣使用休眠，而不像Windows使用者每天關機，建議在OS X需要重新開機時，要手動<code>vagrant halt</code>將Homestead關機，因為直接關機，Homestead並沒有任何警告訊息，但下次OS X重開機後，若去執行VirtualBox，會發現Homestead已被<strong>不正常關機</strong>，雖然下<code>vagrant up</code>後還是可以使用，但這樣很容易造成VM損毀。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Homestead讓我們可以快速建置Laravel開發環境，且若VM因測試而損毀，也可以快速刪除再重建，非常方便。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>本文為Homestead的基礎，一個OS X裝一個共用的VM，若你想每個專案有自己的VM，詳細請參考<a href="/laravel/homestead/homestead-per-project/">如何一個專案使用一個Homestead?</a></span></span></span></li>
<li>Homestead雖然好用，但有一個致命傷 : <strong>非常耗電</strong>，尤其當你外出使用筆記型電腦時，會發現只要使用Homestead時，電池使用時間會減少一半，畢竟一顆電池要撐兩個作業系統同時運作。所以建議外出使用筆記型電腦時，若沒開發Laravel，一定要記得關閉Homestead。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在OS X享受Homestead的便利]]>
    
    </summary>
    
      <category term="Homestead" scheme="http://oomusou.io/tags/Homestead/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="OS X" scheme="http://oomusou.io/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何測試PHP原生函式?]]></title>
    <link href="http://oomusou.io/tdd/tdd-phpunit-native-function/"/>
    <id>http://oomusou.io/tdd/tdd-phpunit-native-function/</id>
    <published>2016-03-14T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>PHP雖然有了Laravel，但實務上還是常常會使用PHP原生函式。假如是Laravel，因為函式都封裝在class內，因此很容易使用Mockery將某個class的method加以mock，但若使用的是PHP原生函式，因為並不是包在class內，所以無從mock，實務上我們該如何測試PHP原生函式呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.22<br>PHPUnit 4.8.24<br>Mockery 0.9.4</p>
<h2 id="測試str_shuffle()">測試str_shuffle()</h2><hr>
<p>實務上想寫個password產生器，會使用到PHP原生函式<code>str_shuffle()</code>，但因為<code>str_shuffle()</code>每次回傳值並不一樣，因此無法做單元測試，希望能透過mockery對<code>str_shuffle()</code>做mock，但<code>str_shuffle()</code>是個function，並不隸屬任何class，因此不知道該如何mock。</p>
<h2 id="TDD">TDD</h2><hr>
<p>我們採用TDD方式開發，因此先寫Password產生器的測試程式。</p>
<p><strong>PasswordGeneratorServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/b19930cf293239c7140fc346df16537790a5e363" target="_blank" rel="external">新增PasswordGeneratorServiceTest.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/PasswordGeneratorServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Servives</span>\<span class="title">PasswordGeneratorService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(PasswordGeneratorService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$origin</span> = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">        <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">        <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第5行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorService */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;target = App::make(PasswordGeneratorService::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每次跑測試時，都會執行<code>setUp()</code>，因此適合在<code>setUp()</code>將待測物件準備好。</p>
<p>實務上建議使用<code>App::make()</code>物件，而不要使用<code>new</code>，因為若待測物件包含costructor依賴注入時，使用<code>new</code>必須一一準備constructor參數物件，非常麻煩，若使用<code>App::make()</code>，Laravel將會自動幫我們將constructor參數的物件注入，非常方便。</p>
<p><code>$target</code>的PHPDoc非常重要，因為目前PHP 7對field仍然沒有支援type hint，必須自行加上PHPDoc，PhpStorm才能得知field的型別。</p>
<p>14行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::tearDown();</span><br><span class="line">    <span class="variable">$this</span>-&gt;target = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每次跑完測試時，都會執行<code>tearDown()</code>，因此適合在<code>tearDown</code>將待測物件清為<code>null</code>。</p>
<p>23行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@test</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$origin</span> = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">    <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>實際的測試案例，為了更人性化描述測試案例的意義，可以直接使用<strong>中文</strong>為function名稱。</p>
<p>測試案例的命名，以白話描述測試案例為原則，不要以<strong>測試</strong> + <strong>函式名稱</strong>命名，如<code>testGenerate()</code>，這樣無法明確顯示該測試案例。</p>
<p>因為使用中文function名稱，所以要加在PHPDoc加上<code>@test</code>，PHPUnit才會認為這是測試程式。</p>
<p>依照<strong>3A原則</strong>執行單元測試 :</p>
<ol>
<li><p><strong>arrange</strong> : 準備測試資料，與測試期望值<code>$expected</code>。</p>
</li>
<li><p><strong>act</strong> : 實際執行待測物件的method，並獲得測試實際值<code>$actual</code>。</p>
</li>
<li><p><strong>assert</strong> : 實際比較<strong>測試期望值</strong>與<strong>測試實際值</strong>是否相等。</p>
</li>
</ol>
<p>執行測試，獲得第一個<span class="label label-danger">紅燈</span>，因為我們只寫了測試程式，還沒寫真正的程式。</p>
<p><strong>PasswordGeneratorService.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/1295716adc638d4c530dbb59cf44d09e14b0a87c" target="_blank" rel="external">新增PasswordGeneratorService.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/PasswordGeneratorService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Servives</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 產生密碼</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $origin</span><br><span class="line">     * <span class="doctag">@param</span> int $length</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span><span class="params">(string <span class="variable">$origin</span>, int <span class="variable">$length</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$target</span> = str_shuffle(<span class="variable">$origin</span>);</span><br><span class="line">        <span class="keyword">return</span> substr(<span class="variable">$target</span>, <span class="number">0</span>, <span class="variable">$length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第1個參數傳入欲shuffle的字串，第2個參數傳入密碼長度。</p>
<p>使用了<code>str_shuffle()</code>重整字串。</p>
<p>使用了<code>substr()</code>擷取字串長度。</p>
<p><strong>測試</strong><br><img src="/images/tdd/tdd-phpunit-native-function/native000.png" alt=""></p>
<p>得到<span class="label label-danger">紅燈</span>，因為期望值與實際值不同。</p>
<p><img src="/images/tdd/tdd-phpunit-native-function/native001.png" alt=""></p>
<p>再次測試，還是得到<span class="label label-danger">紅燈</span>，因為期望值與實際值不同。</p>
<p>注意兩次測試的結果，實際值皆不相同，因為<code>str_shuffle()</code>每次的結果都不同。</p>
<h2 id="封裝PHP原生函式">封裝PHP原生函式</h2><hr>
<p>對於<code>str_shffle()</code>這種每次執行結果都不同的函式，我們無法進行測試，因此需要對<code>str_shffle()</code>進行mock。</p>
<p>但<code>str_shuffle()</code>為function，無法進行mock，因此我們必須將<code>str_shuffle()</code>封裝在獨立的class內。</p>
<p><strong>PasswordGeneratorHelper.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/9d5f993e8499b6738af35056ed94139efa141c1d" target="_blank" rel="external">新增PasswordGeneratorHelper.php，對str_shuffle()封裝</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/PasswordGeneratorHelper.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Servives</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorHelper</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 將原生的str_shuffule()封裝</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $origin</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">str_shuffle</span><span class="params">(string <span class="variable">$origin</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str_shuffle(<span class="variable">$origin</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取一個完全同名的<code>str_shuffle()</code>，因為是完全封裝，所以只需呼叫PHP原生的<code>str_shuffle()</code>即可。</p>
<h2 id="注入Helper">注入Helper</h2><hr>
<p>將<code>PasswordGeneratorHelper</code>注入進<code>PasswordGeneratorService</code>，改使用封裝過的<code>str_shuffle()</code>。</p>
<p><strong>PasswordGeneratorService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/e77b8c0fdb4d92d4d96eff14f7c0e8647857d58d" target="_blank" rel="external">改使用PasswordGeneratorHelper的str_shuffle()</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/PasswordGeneratorService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Servives</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorHelper */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$passwordGeneratorHelper</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PasswordGeneratorService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PasswordGeneratorHelper $passwordGeneratorHelper</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PasswordGeneratorHelper <span class="variable">$passwordGeneratorHelper</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;passwordGeneratorHelper = <span class="variable">$passwordGeneratorHelper</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 產生密碼</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $origin</span><br><span class="line">     * <span class="doctag">@param</span> int $length</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span><span class="params">(string <span class="variable">$origin</span>, int <span class="variable">$length</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$target</span> = <span class="variable">$this</span>-&gt;passwordGeneratorHelper-&gt;str_shuffle(<span class="variable">$origin</span>);</span><br><span class="line">        <span class="keyword">return</span> substr(<span class="variable">$target</span>, <span class="number">0</span>, <span class="variable">$length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第5行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorHelper */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$passwordGeneratorHelper</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * PasswordGeneratorService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> PasswordGeneratorHelper $passwordGeneratorHelper</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PasswordGeneratorHelper <span class="variable">$passwordGeneratorHelper</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;passwordGeneratorHelper = <span class="variable">$passwordGeneratorHelper</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將<code>PasswordGeneratorHelper</code>注入。</p>
<p><code>$passwordGeneratorHelper</code>的PHPDoc非常重要，因為目前PHP 7對field仍然沒有支援type hint，必須自行加上PHPDoc，PhpStorm才能得知field型別。</p>
<p>17行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 產生密碼</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> string $origin</span><br><span class="line"> * <span class="doctag">@param</span> int $length</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span><span class="params">(string <span class="variable">$origin</span>, int <span class="variable">$length</span>)</span> : <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$this</span>-&gt;passwordGeneratorHelper-&gt;str_shuffle(<span class="variable">$origin</span>);</span><br><span class="line">    <span class="keyword">return</span> substr(<span class="variable">$target</span>, <span class="number">0</span>, <span class="variable">$length</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>改使用<code>PasswordGeneratorHelper</code>的<code>str_shuffle()</code>。</p>
<h2 id="Mockery">Mockery</h2><hr>
<p>將<code>str_shuffle()</code>包在class內之後，我們就能使用mockery來mock了。</p>
<p><strong>TestCase.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/d83ff85f19b1b3817cc19d36f49b6d7dcaba577a" target="_blank" rel="external">修改TestCase.php，建立initMock()</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>tests/TestCase.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Mockery</span>\<span class="title">MockInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCase</span> <span class="keyword">extends</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The base URL to use while testing the application.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$baseUrl</span> = <span class="string">'http://localhost'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates the application.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Foundation\Application</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createApplication</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$app</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$app</span>-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$app</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 初始化Mock物件</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $className</span><br><span class="line">     * <span class="doctag">@return</span> MockInterface</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initMock</span><span class="params">(string <span class="variable">$className</span>)</span> : <span class="title">MockInterface</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$mock</span> = Mockery::mock(<span class="variable">$className</span>);</span><br><span class="line">        App::instance(<span class="variable">$className</span>, <span class="variable">$mock</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$mock</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>26行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 初始化Mock物件</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> string $className</span><br><span class="line"> * <span class="doctag">@return</span> MockInterface</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initMock</span><span class="params">(string <span class="variable">$className</span>)</span> : <span class="title">MockInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$mock</span> = Mockery::mock(<span class="variable">$className</span>);</span><br><span class="line">    App::instance(<span class="variable">$className</span>, <span class="variable">$mock</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$mock</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因為實務上<code>initMock()</code>在很多測試案例都會用到，所以將其pull member up到<code>TestCase</code>。</p>
<p>使用<code>Mockery::mock()</code>建立新的mock物件，並傳回給測試程式的field。</p>
<p>使用<code>App::instance()</code>將原來的物件以mock物件取代。實務上使用<code>App::instance()</code>的機會並不多，大概就只有在mock會用到，一般常使用的是<code>App::bind()</code>、<code>App::make()</code>與<code>App::call()</code>。</p>
<p><strong>PasswordGeneratorServiceTest.php</strong><br><figure class="highlight php"><figcaption><span>tests/Services/PasswordGeneratorServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Servives</span>\<span class="title">PasswordGeneratorHelper</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Servives</span>\<span class="title">PasswordGeneratorService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Mockery</span>\<span class="title">Mock</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Mock  */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$mock</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;mock = <span class="variable">$this</span>-&gt;initMock(PasswordGeneratorHelper::class);</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(PasswordGeneratorService::class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;mock-&gt;shouldReceive(<span class="string">'str_shuffle'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;withAnyArgs()</span><br><span class="line">            -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">(string <span class="variable">$origin</span>)</span> : <span class="title">string</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$origin</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$origin</span> = <span class="string">'abc123XYZ'</span>;</span><br><span class="line">        <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">        <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>10行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> Mock  */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$mock</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::setUp();</span><br><span class="line">    <span class="variable">$this</span>-&gt;mock = <span class="variable">$this</span>-&gt;initMock(PasswordGeneratorHelper::class);</span><br><span class="line">    <span class="variable">$this</span>-&gt;target = App::make(PasswordGeneratorService::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新增<code>$mock</code> field，存放<code>initMock()</code>回傳的mock物件。</p>
<p><code>$mock</code>的PHPDoc非常重要，因為目前PHP 7對field仍然沒有支援type hint，必須自行加上PHPDoc，PhpStorm才能得知field的型別。</p>
<p>因為要將<code>PasswordGeneratorHelper</code>加以mock，因此將<code>PasswordGeneratorHelper::class</code>傳入<code>initMock()</code>。</p>
<p>27行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@test</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;mock-&gt;shouldReceive(<span class="string">'str_shuffle'</span>)</span><br><span class="line">        -&gt;once()</span><br><span class="line">        -&gt;withAnyArgs()</span><br><span class="line">        -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">(string <span class="variable">$origin</span>)</span> : <span class="title">string</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$origin</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$origin</span> = <span class="string">'abc123XYZ'</span>;</span><br><span class="line">    <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>shouldReceive()</code>來mock<code>str_shuffle()</code>。</p>
<p>這裡要特別強調的是<code>andReturnUsing()</code>，一般我們會使用<code>andReturn()</code>，直接傳入欲回傳的值，不過像<code>str_shuffle()</code>這類函式，我們不會直接mock其回傳值，只希望其回傳值<strong>可預測</strong>就好，<code>andReturnUsing()</code>允許我們傳進一個closure取代原本的<code>str_shuffle()</code>。</p>
<p>其實傳進去的closure也很單純，只是回傳原來的<code>$origin</code>而已，目的只是讓<code>str_shuffle()</code>具可預測性，讓我們可以寫測試。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  這樣不就沒測試到<strong>str_shuffle()</strong>了嗎?</div>
<p><code>str_shuffle()</code>是PHP的原生函式，正確性不用懷疑，因此不需要測試，我們只需確定<code>str_shuffle()</code>是否在程式中有被呼叫過，因此我們特別在<code>$mock</code>加上<code>once()</code>，要求mockery特別檢查<code>str_shuffle()</code>是否被執行過，若<code>str_shuffle()</code>沒被執行，或執行超過一次，PHPUnit會亮<span class="label label-danger">紅燈</span>。</p>
<p><img src="/images/tdd/tdd-phpunit-native-function/native002.png" alt=""></p>
<p>實際執行測試，PHPUnit會抱怨所mock的closure與原本<code>str_shuffle()</code>不相容而亮<span class="label label-danger">紅燈</span>。</p>
<p>原因是因為PHP 7雖然支援return type，不過closure尚未支援return type寫法，因此PHPUnit認為所mock的closure與原本的<code>str_shuffle()</code>型別並不相同。</p>
<p><strong>PasswordGeneratorHelper.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/ac9b1ae1a56d01ba15776ffa75c0e050336f9a20" target="_blank" rel="external">更新PasswordGeneratorHelper.php，不使用return type</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/PasswordGeneratorHelper.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Servives</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorHelper</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 將原生的str_shuffule()封裝</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $origin</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">str_shuffle</span><span class="params">(string <span class="variable">$origin</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str_shuffle(<span class="variable">$origin</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原本<code>str_shuffle()</code>放棄使用return type。</p>
<p><strong>PasswordGeneratorServiceTest.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52MockNativeFunction/commit/3a3851fbf3ca4ed0483008f0f8c5d2fc3477bc1e" target="_blank" rel="external">更新PasswordGeneratorServiceTest.php，closure不使用return type</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/PasswordGeneratorServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Servives</span>\<span class="title">PasswordGeneratorHelper</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Servives</span>\<span class="title">PasswordGeneratorService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Mockery</span>\<span class="title">Mock</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordGeneratorServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PasswordGeneratorService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Mock  */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$mock</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="variable">$this</span>-&gt;mock = <span class="variable">$this</span>-&gt;initMock(PasswordGeneratorHelper::class);</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = App::make(PasswordGeneratorService::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">        <span class="variable">$this</span>-&gt;target = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;mock-&gt;shouldReceive(<span class="string">'str_shuffle'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;withAnyArgs()</span><br><span class="line">            -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">(string <span class="variable">$origin</span>)</span>  </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$origin</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$origin</span> = <span class="string">'abc123XYZ'</span>;</span><br><span class="line">        <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">        <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>26行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@test</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 產生6位數密碼<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;mock-&gt;shouldReceive(<span class="string">'str_shuffle'</span>)</span><br><span class="line">        -&gt;once()</span><br><span class="line">        -&gt;withAnyArgs()</span><br><span class="line">        -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">(string <span class="variable">$origin</span>)</span>  </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$origin</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$origin</span> = <span class="string">'abc123XYZ'</span>;</span><br><span class="line">    <span class="variable">$length</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="variable">$expected</span> = <span class="string">'abc123'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;generate(<span class="variable">$origin</span>, <span class="variable">$length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>andReturnUsing()</code>傳入的closure，也放棄使用return type。</p>
<p><img src="/images/tdd/tdd-phpunit-native-function/native003.png" alt=""></p>
<p>再跑一次測試，就會得到<span class="label label-success">綠燈</span>了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>對於PHP原生函式，若其回傳結果每次都不一樣，或不想測試，可以將其包在<code>Helper</code>內，再利用<strong>依賴注入</strong>的方式取代PHP原生函式，最後再靠mockery去mock該<code>Helper</code>的method。</li>
<li>可直接在測試程式中使用<strong>中文</strong>替測試案例的method命名，可讀性更高。</li>
<li>Mockery的<code>andReturnUsing()</code>，允許我們直接傳入clousre去mock一個method。</li>
<li>PHP 7的closure尚未支援return type，因此若要使用closure去mock method，必須放棄使用return type。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52MockNativeFunction" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[透過Mockery與依賴注入對PHP原生函式做測試]]>
    
    </summary>
    
      <category term="Mockery" scheme="http://oomusou.io/tags/Mockery/"/>
    
      <category term="PHP" scheme="http://oomusou.io/tags/PHP/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在PhpStorm活用PHPDoc?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-ide-helper/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-ide-helper/</id>
    <published>2016-03-04T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>初學者使用PhpStorm開啟Laravel專案時，馬上會發現原來的程式碼出現一堆反白警告，事實上這些都是有意義的，只是初學者常常不知道怎麼處理，而忽略這些反白警告，除此之外，PhpStorm有強大的語法提示功能，讓你不用去死記物件有哪些field與method，只要用選的即可，可大幅增加開發效率，也不用擔心typo打錯。而PhpStorm威力的背後，就是基於<strong>PHPDoc</strong>。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.22<br>PhpStorm 10.0.3<br>Laravel IDE Helper 2.1.4</p>
<h2 id="使用PhpStorm開啟Laravel">使用PhpStorm開啟Laravel</h2><hr>
<p>第一次使用PhpStorm開啟Laravel時，原來平靜的程式碼在很多地方都出現了許多反白 :</p>
<h3 id="Route">Route</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide000.png" alt=""></p>
<p>PhpStorm抱怨<code>Route</code>是<code>Undefined class Route</code>。</p>
<h3 id="Validator">Validator</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide001.png" alt=""></p>
<p>在<code>AuthController</code>中，PhpStorm抱怨<code>Validator</code>是<code>Undefined class Validator</code>。</p>
<h3 id="Schema_Builder">Schema Builder</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide002.png" alt=""></p>
<p>在user的migration中，PhpStorm抱怨<code>Schema</code>是<code>Undefined class Schema</code>。</p>
<p>還抱怨了<code>unique()</code>是<code>Method not found</code>。</p>
<p>之所以會如此，root cause有兩個 :</p>
<ol>
<li><code>Route</code>、<code>Validator</code>與<code>Schema</code>使用了Laravel特有的<strong>Facade</strong>機制，導致PhpStorm無法解析。</li>
<li><code>unique()</code>使用了PHP獨有的<strong>Overloading</strong>機制，可以動態產生property與method，也因為是動態產生，所以PhpStorm無法解析。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>PHP的Overloading與一般物件導向語言所謂的Overloading不同，詳細請參考<a href="/php/php-cs/#Overload">PHP與C#語法快速導覽之Overloading</a></span></span></span></li>
</ol>
<h2 id="Laravel_IDE_Helper">Laravel IDE Helper</h2><hr>
<p>有了問題就要解決，我們先來解決第一個問題 : Laravel特有的Facade機制。</p>
<p><a href="https://github.com/barryvdh/laravel-ide-helper" target="_blank" rel="external">Laravel IDE Helper</a>讓PhpStorm看得懂Laravel Facade，還增加了許多其他的支援。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>Laravel IDE Helper作者Barry vd. Heuvel的另一個大作<a href="https://github.com/barryvdh/laravel-debugbar" target="_blank" rel="external">Laravel Debugbar</a>，詳細請參考<a href="/laravel/laravel-debugbar/">如何使用Laravel Debugbar?</a></span></span></span></p>
<h3 id="安裝">安裝</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require barryvdh/laravel-ide-helper --dev</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide003.png" alt=""></p>
<p>使用composer安裝Laravel IDE Helper，因為此套件只會在開發使用，可以加上<code>--dev</code>參數。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於<code>--dev</code>參數，詳細請參考<a href="http://localhost:4000/laravel/laravel-debugbar/#使用Composer安裝" target="_blank" rel="external">如何使用Laravel Debugbar#使用Composer安裝</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require doctrine/dbal --dev</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide007.png" alt=""></p>
<p>Laravel IDE Helper會透過<a href="http://www.doctrine-project.org/projects/dbal.html" target="_blank" rel="external">doctrine/dbal</a>去抓table的schema，替model加上欄位註解。</p>
<h3 id="Service_Provider">Service Provider</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class,</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide004.png" alt=""></p>
<p>在<code>config/app.php</code>中加入<code>IdeHelperServiceProvider</code>。</p>
<h3 id="設定檔">設定檔</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan vendor:publish --provider=&#34;Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider&#34; --tag=config</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide008.png" alt=""></p>
<p>產生Laravel IDE Helper自己的設定檔，位在<code>config/ide-helper.php</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide009.png" alt=""></p>
<p>建議將<code>include_helpers</code>設定為true，讓Laravel IDE Helper幫我們建立helper function的註解。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide010.png" alt=""></p>
<p>Laravel 5預設將model放在<code>app</code>目錄下，若你有自己的model目錄，請修改此設定。</p>
<h3 id="資料庫連線">資料庫連線</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide015.png" alt=""></p>
<p>有些Facade與資料庫有關，先確定專案已經與資料庫順利連線。</p>
<h3 id="Facade">Facade</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan ide-helper:generate</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide005.png" alt=""></p>
<p>建立Laravel Facade的PHPDoc，產生了<code>_ide_helper.php</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide006.png" alt=""></p>
<p>可以發現在專案根目錄多了<code>_ide_helper.php</code>，我們找到了<code>Route</code> class與<code>get()</code>，發現多加了PHPDoc註解，讓PhpStorm知道<code>get()</code>的參數資訊與回傳型別，這提供了PhpStorm幫我們做語法檢查的根據。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide012.png" alt=""></p>
<p><code>Route</code>不再反白。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide013.png" alt=""></p>
<p><code>Validator</code>也不再反白。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide014.png" alt=""></p>
<p><code>Schema</code>也不再反白，不過<code>unique()</code>還是反白，稍後會解決。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  若將來透過composer update更新Laravel，是否還要重新產生_ide_helper.php呢?</div>
<h3 id="composer-json">composer.json</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">    <span class="string">"post-update-cmd"</span>: [</span><br><span class="line">        <span class="string">"php artisan clear-compiled"</span>,</span><br><span class="line">        <span class="string">"php artisan ide-helper:generate"</span>,</span><br><span class="line">        <span class="string">"php artisan optimize"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide011.png" alt=""></p>
<p>只要在<code>composer.json</code>的<code>post-update-cmd</code>改成如上圖所示，以後只要<code>composer update</code>更新Laravel，就會自動重新建立<code>_ide_helper.php</code>。</p>
<h3 id="Model">Model</h3><p><strong>資料庫欄位名稱</strong>是開發過程的另外一個痛，傳統都要另外一個視窗開著phpMyAdmin或Sequel Pro，一邊查詢資料庫欄位一邊寫程式，若PhpStorm能替我們對model的欄位名稱做<strong>語法提示</strong>，讓我們用選的，那就太好了。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan ide-helper:models</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide016.png" alt=""></p>
<p>Laravel IDE Helper提供兩種方式幫你建立model的PHPDoc，預設是產生一個<code>_ide_helper_models.php</code>，也可以直接將PHPDoc寫在原本的model檔內，我們打<code>yes</code>，選擇直接在model內建立PHPDoc。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>理論上選擇預設的<code>_ide_helper_models.php</code>也不是問題，不過因為在<code>_ide_helper_models.php</code>也定義了<code>User</code> class，所以在repository內<code>use User</code>時，會出現<code>Multiple definitions for class User</code>的警告，所以才選擇將PHPDoc直接建立在model內。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide017.png" alt=""></p>
<p>Laravel IDE Helper幫我們替<code>User</code> model建立了PHPDoc : </p>
<ol>
<li>所有的資料庫欄位名稱都加上了<code>@property</code>註解。</li>
<li>所有的資料庫欄位名稱的<code>where</code>都加上了<code>@method</code>註解。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>這些method都是Eloquent根據資料庫欄位，使用Overloading機制動態產生的method，因此PhpStorm無法自動抓到，必須手動寫PHPDoc的@method</span></span></span></li>
</ol>
<figure class="highlight php"><figcaption><span>app/Repositories/UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> User */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserRepository constructor.</span><br><span class="line">     * <span class="doctag">@param</span> User $user</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User <span class="variable">$user</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳第一位User</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> User</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFirstUser</span><span class="params">()</span> : <span class="title">User</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user-&gt;all()-&gt;first();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 回傳第一位User</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> User</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFirstUser</span><span class="params">()</span> : <span class="title">User</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user-&gt;all()-&gt;first();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們傳回第一筆<code>User</code> model。</p>
<figure class="highlight php"><figcaption><span>app/Services/UserService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">UserRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$userRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserRepository $userRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository <span class="variable">$userRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userRepository = <span class="variable">$userRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示第一筆user的姓名</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showFirstUser</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getFirstUser();</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$user</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19行<br><img src="/images/phpstorm/phpstorm-ide-helper/ide018.png" alt=""></p>
<p>輸入<code>$user</code>後，只要輸入<code>-&gt;</code>，就會出現資料庫欄位名稱讓你挑選，再也不用死記或靠其他工具查詢資料庫欄位名稱了。</p>
<h3 id="Service_Container">Service Container</h3><p>當我們使用service container，利用<code>App::make()</code>建立物件時，由於傳進去的是字串，因此PhpStorm根本不知道我們建立了什麼物件，但透過PhpStorm另外擴充的<strong>PhpStorm Advanced Metadata</strong>機制，讓我們在使用service container時，也能享受語法提示功能。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>關於PhpStorm Advanced Meta，請參考PhpStorm官網的<a href="https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Advanced+Metadata" target="_blank" rel="external">PhpStorm Advanced Metadata</a></span></span></span></p>
<p>不過這裡不用擔心，不需要會寫PhpStorm Advanced Metadata，因為Laravel IDE Helper幫大家寫好了。</p>
<p><strong>Strategy Pattern</strong><br><strong>routes.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/c9344cdc0264496dc906486ad54a8d384f77d178" target="_blank" rel="external">修改routes.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/show'</span>, <span class="string">'UserController@show'</span>);</span><br></pre></td></tr></table></figure></p>
<p>在routes.php加上URI與其對應的controller action。</p>
<p><strong>UserController.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/bd8024c814dfb1853f3ced6f16ac34cc79661070" target="_blank" rel="external">建立UserController.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">UserService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$userService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserService $userService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService <span class="variable">$userService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService = <span class="variable">$userService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第8行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> UserService */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$userService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserController constructor.</span><br><span class="line"> * <span class="doctag">@param</span> UserService $userService</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService <span class="variable">$userService</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userService = <span class="variable">$userService</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注入<code>UserService</code>。</p>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'admin'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>show()</code>呼叫<code>$this-&gt;userService</code>的<code>show()</code>，並將<code>admin</code>變數傳入。</p>
<p><strong>AbstractUser.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/2ad666a7c9e4ce9a6e1faa429c10a0f6e593d002" target="_blank" rel="external">建立AbstractUser.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/AbstractUser.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由<code>abstract class</code>定義<code>show()</code>，如此PhpStorm就能幫我們做語法提示與語法檢查了。</p>
<p><strong>Admin.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/28d1caa0ad9d2ad91a515f26ebb9677dc8c0ab3d" target="_blank" rel="external">建立Admin.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/Admin.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Admin</code>繼承<code>AbstractUser</code>，因為之前定義了<code>show()</code> abstract method，所以必須在此實作<code>show()</code>。</p>
<p><strong>Customer.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/3e86bbab2e1e14d3807cbe70d3a25d89cec17ea6" target="_blank" rel="external">建立Customer.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/Customer.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Customer</code>繼承<code>AbstractUser</code>，因為之前定義了<code>show()</code> abstract method，所以必須在此實作<code>show()</code>。</p>
<p><strong>UserService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/33b78da6b558e75a8c6791a49563966c6d42f695" target="_blank" rel="external">建立UserService.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/UserService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>\<span class="title">AbstractUser</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(string <span class="variable">$type</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        App::bind(AbstractUser::class, <span class="string">'App\Services\User\\'</span> . ucfirst(<span class="variable">$type</span>));</span><br><span class="line">        App::make(AbstractUser::class)-&gt;show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第10行<br><img src="/images/phpstorm/phpstorm-ide-helper/ide019.png" alt=""></p>
<p>透過<code>App::make()</code>產生的物件，PhpStorm並無法提供語法提示。</p>
<p><strong>產生PhpStorm Advanced Metadata</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/49f49b5a7c51e3a4a5af5c4609a866aa2e850860" target="_blank" rel="external">建立.phpstorm.meta.php</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan ide-helper:meta</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide020.png" alt=""></p>
<p>Laravel IDE Helper幫我們建立了PhpStorm Advanced Metadata，檔名為<code>.phpstorm.meta.php</code>。</p>
<p><strong>重新啟動PhpStorm</strong><br><img src="/images/phpstorm/phpstorm-ide-helper/ide021.png" alt=""></p>
<p>有了<code>.phpstorm.meta.php</code>，<code>App::make()</code>就會參考此檔，自動顯示語法提示。<span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>在<code>.phpstorm.meta.php</code>中定義了3種方式會啟動語法提示 : <code>ArrayAccess style</code>, <code>App::make()</code>與<code>app()</code>，其中Laravel IDE Helper在該檔中幫我們建立了很多class與interaface的<strong>別名</strong>，讓我們可以用更簡短的名稱使用service container。</span></span></span></p>
<h2 id="Laravel_Plugin">Laravel Plugin</h2><hr>
<p>我們還需要安裝<a href="https://github.com/Haehnchen/idea-php-laravel-plugin" target="_blank" rel="external">Laravel Plugin</a>，它包含了一些Laravel IDE Helper所沒有提供的語法提示功能。</p>
<h3 id="安裝-1">安裝</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide060.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Plugins</em></strong></p>
<p>輸入<code>Laravel</code>，按<code>Browse</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide061.png" alt=""></p>
<p>選擇<code>Laravel Plugin</code>，按<code>Install</code>安裝。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide062.png" alt=""></p>
<p>安裝完，按<code>Restart PhpStorm</code>重新啟動。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide063.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Other Settings -&gt; Laravel Plugin</em></strong></p>
<p>將<code>Enable plugin for this project</code>與<code>Use AutoPopop for completion</code>打勾。</p>
<p>再次重新啟動PhpStorm。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  這一步非常重要，很多人安裝完Laravel Plugin後，因為沒有Enable，導致Laravel Plugin從來沒有啟動過。</div>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  Laravel Plugin只要安裝一次即可，不過每次若開新Laravel專案，必須重新enable一次，否則Laravel Plugin不會啟動，這點很容易忽略。</div>
<h3 id="Controller">Controller</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide064.png" alt=""></p>
<p>在<code>routes.php</code>中，已經可以選擇controller與action。</p>
<h3 id="Route-1">Route</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide065.png" alt=""></p>
<p>在blade使用<code>route()</code>時，已經可以抓到在<code>routes.php</code>所定義的route別名。</p>
<h3 id="View">View</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide066.png" alt=""></p>
<p>在controller回傳view時，已經可以抓到在<code>resources/views</code>目錄下所定義的view。</p>
<p>除此之外，在blade中如<code>@include</code>也可以抓到其他blade。</p>
<h3 id="config::get()">config::get()</h3><p><img src="/images/phpstorm/phpstorm-ide-helper/ide067.png" alt=""></p>
<p><code>config::get()</code>已經可以抓到array的key值了。</p>
<h2 id="Why_PHPDoc?">Why PHPDoc?</h2><hr>
<p>Laravel IDE Helper幫我們做了很多事情，讓PHP在PhpStorm可以如強型別語言一樣使用語法提示與語法檢查，但其黑魔法在哪裡呢?</p>
<p>如C#這種強型別語言，Visual Studio之所以能即時提供語法提示與語法檢查，因為當你在Visual Studio寫程式時，C# compiler就在背景默默地編譯，因此可以及時提供語法提示，且及時顯示語法檢查的警告，也因此Visual Studio需要更高檔的硬體支援。</p>
<p>但PHP沒有compiler，必須執行了才知道結果，所以PhpStorm所有的語法檢查與語法提示資訊都來自於PHPDoc，甚至可以說，<code>PhpStorm是在檢查你的PHPDoc，而不是在檢查PHP</code>。</p>
<p>Laravel IDE Helper幫我們做的，就是將Laravel部分的PHPDoc補齊。</p>
<p>接下來要談的，是你自己寫程式的部分，也就是Laravel IDE Helper沒有辦法幫你的部分，必須自己寫PHPDoc。<span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>若你對更多的PHPDoc指令有興趣，詳細請參考<a href="/phpstorm/phpstorm-phpdoc/">如何使用PHPDoc寫註解?</a></span></span></span></p>
<h2 id="自己寫的class">自己寫的class</h2><hr>
<h3 id="手動建立PHPDoc">手動建立PHPDoc</h3><ol>
<li><p>在PhpStorm輸入<code>/**</code>，然後按下&#8617;，PhpStorm會自動依據當時的游標的位置產生適當的PHPDoc blocks。</p>
</li>
<li><p>按熱鍵&#8984; + N，會產生<code>Generate</code>選單，選擇<code>PHPDoc Blocks</code>。<br><img src="/images/phpstorm/phpstorm-ide-helper/ide026.png" alt=""></p>
</li>
<li><p>在<code>適當時機</code>按熱鍵&#8997; + &#8617;，會出現<code>Generate PHPDoc for ...</code>。如剛建立完class, property或method時。<br><img src="/images/phpstorm/phpstorm-ide-helper/ide027.png" alt=""></p>
</li>
</ol>
<h3 id="Fields">Fields</h3><p><strong>語法</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> 型別 [變數名稱] [註解] */</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>型別</strong>可以是PHP原生型別，class，interface或trait。</li>
<li>假如下一行就是該變數，可以省略<strong>變數名稱</strong>。</li>
<li>可選擇性對該變數加上<strong>註解</strong>。</li>
</ul>
<p><strong>自動建立PHPDoc</strong><br>實務上建立field會有2種方式 :</p>
<ol>
<li>由constructor injection建立field。(如注入service, repository)</li>
<li>由setter與getter建立field。(如strategy, state, adpater,decorator pattern..設定物件)</li>
</ol>
<p>PhpStorm都提供了快速的方式自動建立PHPDoc。</p>
<p><strong>由Constructor Injection建立Field</strong><br><img src="/images/phpstorm/phpstorm-ide-helper/ide028.png" alt=""></p>
<p>新建立了<code>PostService</code>，按熱鍵&#8963; + N，顯示Generate視窗，選擇<code>Constructor...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide029.png" alt=""></p>
<p>PhpStorm替我們自動產生了constructor框架，我們想藉由constructor注入<code>UserService</code>，輸入<code>UserSer</code>就可以發現PhpStorm的語法提示已經出現了<code>UserService</code>，按&#8617;選擇之。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide030.png" alt=""></p>
<p>在constructor注入了<code>$userService</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide031.png" alt=""></p>
<p>在<code>$userService</code>之後按熱鍵&#8997; + &#8617;，顯示<code>Show Intention Actions</code>視窗，選擇<code>Update PHPDoc Comment</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide032.png" alt=""></p>
<p>由於在constructor的parameter已經有了type hint，因此產生的PHPDoc也自動加上了<code>UserService</code>型別。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide033.png" alt=""></p>
<p>在<code>$userService</code>之後按熱鍵&#8997; + &#8617;，顯示<code>Show Intention Actions</code>視窗，選擇<code>Initialize fields</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide034.png" alt=""></p>
<p>選擇要建立field的constructor parameter。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide035.png" alt=""></p>
<p>PhpStorm不只幫我們在constructor內補上code，還一併幫我們將field建好，而且PHPDoc也一併建立完成，還自動加上了型別。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  藉由PhpStorm這種流程建立field，不僅完全不需要打字，而且連PHPDoc也一併自動寫好，非常方便。</div>
<p><strong>由Setter與Getter建立Field</strong><br><img src="/images/phpstorm/phpstorm-ide-helper/ide036.png" alt=""></p>
<p>還有另外一類field是使用setter/getter建立，這種field就必須先手動建立field。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide037.png" alt=""></p>
<p>新建立了<code>PostService</code>，按熱鍵&#8963; + N，顯示Generate視窗，選擇<code>PHPDoc Blocks...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide038.png" alt=""></p>
<p>選擇要建立PHPDoc的field。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide039.png" alt=""></p>
<p>PhpStorm自動幫我們產生了<code>@var</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide040.png" alt=""></p>
<p>輸入<code>Pay</code>就可以發現PhpStorm的語法提示已經出現了<code>PaymentInterface</code>，按&#8617;選擇之。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide041.png" alt=""></p>
<p>加上了<code>PaymentInterface</code>型別。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide042.png" alt=""></p>
<p>按熱鍵&#8963; + N，顯示Generate視窗，選擇<code>Getters and Setters...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide043.png" alt=""></p>
<p>選擇要建立getter與setter的field。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide044.png" alt=""></p>
<p>PhpStorm自動幫我們建立了<code>$paymentService</code>的getter與setter。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  藉由PhpStorm這種流程建立field，僅需手動建立field，補上型別後，剩下的getter與setter都可自動建立，非常方便。</div>
<p><strong>Adapter Pattern</strong><br>實務上在接金流時，由於各家SDK所開的API都不一樣，導致我們處理上的困難，因此我們會使用adapter pattern，將各家API抽象化成相同的API，方便service處理。</p>
<p><strong>PayPalSDK.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/a3fd6f8ef9d28457f6012c89797309a54ebf01ef" target="_blank" rel="external">新增PayPalSDK.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/PayPalSDK.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayPalSDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pay</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'PayPal pay '</span> . <span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在此為了講解方便，我們使用<code>PayPalSDK</code>模擬PayPal的付款API，其API為<code>pay()</code>。</p>
<p><strong>AliPaySDK.php</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/5d68b3a21bef2354704569be241d64568434f6b1" target="_blank" rel="external">新增AliPaySDK.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/AliPaySDK.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPaySDK</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> $amount</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bill</span><span class="params">(<span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'AliPay bill '</span> . <span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在此為了講解方便，我們使用<code>AliPalSDK</code>模擬支付寶的付款API，其API為<code>bill()</code>。</p>
<figure class="highlight php"><figcaption><span>app/Services/Payment/PaymentService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 設定第三方支付機構</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $paymentName</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPayment</span><span class="params">(string <span class="variable">$paymentName</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但我們原本<code>PaymentService</code>，API為<code>setPayment()</code>與<code>checkout()</code>，其中<code>setPayment()</code>為設定第三方支付機構，而<code>checkout()</code>為實際付款。</p>
<p>可以發現我們service定義的<code>checkout()</code>與PayPal的<code>pay()</code>與支付寶的<code>bill()</code>都不合，因此我們需要adapter pattern做一個轉接動作。</p>
<p><strong>PaymentInterface.php</strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/7eed09a13a2425e36b4f76c56efa4edd6f7aa4c7" target="_blank" rel="external">新增PaymentInterface.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/PaymentInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PaymentInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 使用金流付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>定義了<code>PaymentInterface</code>，為我們原本<code>PaymentService</code>所用的<code>checkout()</code>。</p>
<p><strong>PayPal.php</strong><span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/a8624e1185ed77e9480736eb27003ed32ae1e0aa" target="_blank" rel="external">新增PayPal.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/PayPal.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayPal</span> <span class="keyword">implements</span> <span class="title">PaymentInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PayPalSDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$payPalSDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PayPal constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PayPalSDK $payPalSDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PayPalSDK <span class="variable">$payPalSDK</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;payPalSDK = <span class="variable">$payPalSDK</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 使用金流付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;payPalSDK-&gt;pay(<span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>PayPal</code>扮演adapter的角色，所以必須實現<code>PaymentInterface</code>的<code>checkout()</code>。</p>
<p>將扮演adaptee角色的<code>PayPalSDK</code>注入進來。</p>
<p>17行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 使用金流付款</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> int $amount</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;payPalSDK-&gt;pay(<span class="variable">$amount</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將<code>checkout()</code>轉換成<code>PayPalSDK</code>的<code>pay()</code>。</p>
<p><strong>AliPay.php</strong><span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/aa8ea09a7025bc9a11131238e3926ccea33cfdfb" target="_blank" rel="external">新增AliPay.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/PayPal.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">implements</span> <span class="title">PaymentInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> AliPaySDK */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$aliPaySDK</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AliPay constructor.</span><br><span class="line">     * <span class="doctag">@param</span> AliPaySDK $aliPaySDK</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AliPaySDK <span class="variable">$aliPaySDK</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliPaySDK = <span class="variable">$aliPaySDK</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 使用金流付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;aliPaySDK-&gt;bill(<span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>AliPay</code>扮演adapter的角色，所以必須實現<code>PaymentInterface</code>的<code>checkout()</code>。</p>
<p>將扮演adaptee角色的<code>AliPaySDK</code>注入進來。</p>
<p>17行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 使用金流付款</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> int $amount</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;aliPaySDK-&gt;bill(<span class="variable">$amount</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將<code>checkout()</code>轉換成<code>AliPaySDK</code>的<code>pay()</code>。</p>
<p><strong>PaymentEnum.php</strong><span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/0afd8b3efddc40da45a110256420279a478ed183" target="_blank" rel="external">新增PaymentEnum.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Payment/PaymentEnum.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentEnum</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> PayPal = <span class="string">'PayPal'</span>;</span><br><span class="line">    <span class="keyword">const</span> AliPay = <span class="string">'AliPay'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>PaymentService</code>的<code>setPayment()</code>要求我們傳字串，但由於將來會將此字串直接做<code>App::bind()</code>，為了減少人為typo，我們希望能提供類似強型別語言的<code>enum</code>，在傳入字串時只要用選的就好，不需直接打字。</p>
<p>不過由於PHP沒有提供<code>enum</code>，我們只能使用<code>abstract class</code> + <code>const</code>模擬類似<code>enum</code>的機制。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  PHP模擬的enum，與強型別語言enum的差別在於 : 強型別語言可以在輸入字串使用enum當型別，但PHP還是只能使用string當型別，因此無法如強型別語言透過enum幫你檢查所輸入的資料是否型別正確，不過最少在輸入字串時可以避免typo。</div>
<p><strong>UserController.php</strong><span class="margin-note-marker"><sup>22</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">22</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/b6b229ecd131230c27a6ab3555945063ffbfe6ba" target="_blank" rel="external">修改UserController.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">PaymentEnum</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PaymentService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">UserService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserService  */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$userService</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PaymentService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$paymentService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserService $userService</span><br><span class="line">     * <span class="doctag">@param</span> PaymentService $paymentService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService <span class="variable">$userService</span>, PaymentService <span class="variable">$paymentService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService = <span class="variable">$userService</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;paymentService = <span class="variable">$paymentService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'Admin'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;paymentService-&gt;setPayment(PaymentEnum::AliPay);</span><br><span class="line">        <span class="variable">$this</span>-&gt;paymentService-&gt;checkout(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將<code>PaymentService</code>也注入進來。</p>
<p>26行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'Admin'</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;paymentService-&gt;setPayment(PaymentEnum::AliPay);</span><br><span class="line">    <span class="variable">$this</span>-&gt;paymentService-&gt;checkout(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>$this-&gt;paymentService-&gt;setPayment()</code>設定要用什麼第三方支付機構，這裡使用了<code>PaymentEnum</code>來輸入字串，可以避免人為typo，且程式可讀性也更佳。</p>
<p>無論使用任何第三方支付，都使用相同的<code>$this-&gt;paymentService-&gt;checkout()</code>，若將來有新的第三方支付方式，只需新增class實現<code>PaymentInterface</code>即可，也不用修改<code>UserController</code>，，達到<strong>開放封閉原則</strong>的要求。</p>
<p><strong>PaymentService.php</strong><span class="margin-note-marker"><sup>23</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">23</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/19124db625a5f531a1ab748c8b93e4be4fc28655" target="_blank" rel="external">新增PaymentService.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PaymentService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Payment</span>\<span class="title">PaymentInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PaymentInterface */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$payment</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 設定第三方支付機構</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $paymentName</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPayment</span><span class="params">(string <span class="variable">$paymentName</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        App::bind(PaymentInterface::class, <span class="string">'App\Services\Payment\\'</span> . <span class="variable">$paymentName</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;payment = App::make(PaymentInterface::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 付款</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;payment-&gt;checkout(<span class="variable">$amount</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>11行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 設定第三方支付機構</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> string $paymentName</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPayment</span><span class="params">(string <span class="variable">$paymentName</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    App::bind(PaymentInterface::class, <span class="string">'App\Services\Payment\\'</span> . <span class="variable">$paymentName</span>);</span><br><span class="line">    <span class="variable">$this</span>-&gt;payment = App::make(PaymentInterface::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將傳進的<code>$paymentName</code>字串，直接做<code>App::bind()</code>。</p>
<p>使用<code>App::make()</code>將剛剛bind的<code>PaymentInterface</code>建立成物件。</p>
<p>22行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 付款</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> int $amount</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;payment-&gt;checkout(<span class="variable">$amount</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於都實現<code>PaymentInterface</code>，所以只要使用統一個<code>checkout()</code>即可，不用擔心是什麼SDK，就算將來有新的第三方支付SDK，在<code>PaymentService</code>也不用修改，達到<strong>開放封閉原則</strong>的要求。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide022.png" alt=""></p>
<p>回到本文PHPDoc的重點，<code>$this-&gt;payment</code>因為有出現<code>checkout()</code>的語法提示，是因為第10行替<code>private $payment</code>加了<code>@var</code>註解，描述了<code>$payment</code>的型別為<code>PaymentInterface</code>，引此才能出現<code>checkout()</code>的語法提示。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide023.png" alt=""></p>
<p>若將<code>private $payment</code>的PHPDoc拿掉，我們發現PhpStorm將不再出現<code>checkout()</code>語法提示，因為PhpStorm不知道<code>$payment</code>的型別，因此無從顯示語法提示。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  這個範例除了示範adpater pattern外，也告訴我們使用<strong>@var</strong>替field描述型別的重要性，使用PHPDoc去描述field型別後，PhpStorm就能幫我們替field顯示語法提示，避免typo，也增加開發效率。</div>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  目前PHP 7的field還是沒有type hint，所以field的<strong>@var</strong>是唯一讓PhpStorm得知field型別的管道，非常重要。</div>
<h3 id="Method">Method</h3><p><strong>語法</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span><br><span class="line"> * <span class="doctag">@param</span> 型別 變數名稱 [註解] </span><br><span class="line"> * <span class="doctag">@return</span> 型別 [註解]</span><br><span class="line"> * <span class="doctag">@throws</span> 型別 [註解]</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>@param</code>為傳入參數，<code>@return</code>為回傳值，<code>@throws</code>為exception。</li>
<li><strong>型別</strong>可以是PHP原生型別，class，interface或trait。</li>
<li><code>@param</code>一定要加上<strong>變數名稱</strong>。</li>
<li>可選擇性加上<strong>註解</strong>。</li>
<li>若不傳回值，為<code>@return void</code></li>
</ul>
<p><strong>自動建立PHPDoc</strong><br>實務上建立method會有3種方式 :</p>
<ol>
<li>自行由<code>pubf</code>建立method。</li>
<li>由熱鍵&#8963; + I去實踐<code>abstract class</code>或<code>interface</code>的method。</li>
<li>由<code>extend abstract class</code>或<code>implements interface</code>建立method。</li>
</ol>
<p><strong>自行由pubf建立method</strong><br><img src="/images/phpstorm/phpstorm-ide-helper/ide045.png" alt=""></p>
<p>輸入<code>pubf</code>，按&#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide046.png" alt=""></p>
<p>產生<code>public function</code>框架。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide047.png" alt=""></p>
<p>自行輸入method名稱，輸入參數型別與名稱，與回傳型別，最後按熱鍵&#8997; + &#8617;，顯示<code>Generate PHPDoc for function</code>，按&#8617;繼續。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide048.png" alt=""></p>
<p>PhpStorm會自動幫你加上PHPDoc，包含<code>@param</code>與<code>@return</code>。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide049.png" alt=""></p>
<p>在PHPDoc第一行加上人看得懂的method註解，描述此method的主要功能，中英文皆可。</p>
<p><strong>由熱鍵&#8963; + I去實踐abstract class或interface的method</strong></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide050.png" alt=""></p>
<p>使用<code>extends</code>繼承<code>abstract class</code>。<span class="margin-note-marker"><sup>24</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">24</span>這裡<code>OrderService</code>去繼承<code>AbstractUser</code><strong>完全不合理</strong>，純粹是為了demo方便。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide051.png" alt=""></p>
<p>按熱鍵&#8963; + I，選擇要實作的method。</p>
<p>要將<code>Add PhHPDoc</code>與<code>Copy from base class</code>打勾。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide052.png" alt=""></p>
<p>PhpStorm除了會幫我們建立method框架外，連PHPDoc也幫我複製過來了。</p>
<p><strong>由extend abstract class或implements interface建立method</strong></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide053.png" alt=""></p>
<p>使用<code>implements</code>去實現<code>interface</code>。<span class="margin-note-marker"><sup>25</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">25</span>這裡<code>OrderService</code>去實現<code>PaymentInterface</code><strong>完全不合理</strong>，純粹是為了demo方便。</span></span></span></p>
<p>按熱鍵&#8997; + &#8617;，顯示<code>Add method stubs</code>，按&#8617;繼續。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide054.png" alt=""></p>
<p>PhpStorm除了會幫我們建立method框架外，連PHPDoc也幫我複製過來了。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  在duck type時代，<strong>@param</strong>與<strong>@return</strong>是唯一讓PhpStorm得知method參數與回傳值型別的管道，非常重要，不過在PHP有type hint與PHP 7有return type之後，<strong>@param</strong>與<strong>@return</strong>沒之前重要，目前PhpStorm已經可以自行透過type hint與return type得知變數型別。</div>
<h2 id="Overloading">Overloading</h2><hr>
<h3 id="Property">Property</h3><p><strong>語法</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span><br><span class="line"> * <span class="doctag">@property</span> 型別 變數名稱 [註解] </span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
<p>若你有使用<code>__get()</code>與<code>__set()</code>動態產生property話，由於是動態產生，PhpStorm無從得知property名稱與其型別，必須依賴<code>@property</code>描述。<span class="margin-note-marker"><sup>26</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">26</span>關於property overloading更詳細的描述，請參考<a href="/php/php-cs/#Property_Overloading">PHP與C#語法快速導覽#Property Overloading</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/User.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * App\User</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@property</span> integer $id</span><br><span class="line"> * <span class="doctag">@property</span> string $name</span><br><span class="line"> * <span class="doctag">@property</span> string $email</span><br><span class="line"> * <span class="doctag">@property</span> string $password</span><br><span class="line"> * <span class="doctag">@property</span> string $remember_token</span><br><span class="line"> * <span class="doctag">@property</span> \Carbon\Carbon $created_at</span><br><span class="line"> * <span class="doctag">@property</span> \Carbon\Carbon $updated_at</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereId($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereName($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereEmail($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User wherePassword($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereRememberToken($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereCreatedAt($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\App\User whereUpdatedAt($value)</span><br><span class="line"> * <span class="doctag">@mixin</span> \Eloquent</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes that are mass assignable.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [</span><br><span class="line">        <span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes excluded from the model's JSON form.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hidden</span> = [</span><br><span class="line">        <span class="string">'password'</span>, <span class="string">'remember_token'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>典型的應用就是Eloquent的model，會根據資料庫欄位動態產生property，Laravel IDE Helper就是利用<code>@property</code>幫我們描述欄位與型別。<span class="margin-note-marker"><sup>27</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">27</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/fd538464f84e4a6c552d933f6882c445be21255e" target="_blank" rel="external">在User.php加入@propery與@method註解</a></span></span></span></p>
<h3 id="Method-1">Method</h3><p><strong>語法</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span><br><span class="line"> * <span class="doctag">@method</span> 回傳型別 函式名稱 ([參數型別] 參數名稱)</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
<p>若你有使用<code>__call()</code>與<code>__callStatic()</code>動態產生method話，由於是動態產生，PhpStorm無從得知method名稱、參數與回傳型別，必須依賴<code>@method</code>描述。<span class="margin-note-marker"><sup>28</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">28</span>關於method overloading更詳細的描述，請參考<a href="/php/php-cs/#Method_Overloading">PHP與C#語法快速導覽#Method Overloading</a></span></span></span></p>
<p>之前的<code>User</code> model也看到了<code>@method</code>的使用。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide055.png" alt=""></p>
<p>在之前講migration之處，我們還留了一個未解的反白<code>unique()</code>，其實不只有<code>unique()</code>，一些常用的如<code>nullable()</code>、<code>unsigned()</code>與<code>index()</code>都會反白。</p>
<p>原因就是Laravel使用了method overloading的機制寫這些fluent method，所以PhpStorm無法得知，且目前Laravel IDE Helper也沒幫我們處理，必須自己解決。</p>
<figure class="highlight php"><figcaption><span>_migration_helper.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Support</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@method</span> Fluent first()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent after($column)</span><br><span class="line"> * <span class="doctag">@method</span> Fluent change()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent nullable()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent unsigned()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent unique()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent index()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent primary()</span><br><span class="line"> * <span class="doctag">@method</span> Fluent default($value)</span><br><span class="line"> * <span class="doctag">@method</span> Fluent onUpdate($value)</span><br><span class="line"> * <span class="doctag">@method</span> Fluent onDelete($value)</span><br><span class="line"> * <span class="doctag">@method</span> Fluent references($value)</span><br><span class="line"> * <span class="doctag">@method</span> Fluent on($value)</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fluent</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>自己建立<code>_migration_helper.php</code>放在專案的跟目錄下，使用<code>@method</code>描述這些Laravel IDE Helper沒描述的method。<span class="margin-note-marker"><sup>29</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">29</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/9354d389b0c9a9de62208836e29c011f7dc3eaf1" target="_blank" rel="external">新增_migration_helper.php</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide056.png" alt=""></p>
<p><code>unique()</code>就不再反白了，以後<code>nullable()</code>、<code>unsigned()</code>與<code>index()</code>在PhpStorm也都有了語法提示。</p>
<h2 id="Collection">Collection</h2><hr>
<p>Collection是我在Laravel又愛又恨的東西，愛的是collection所提供的method遠比PHP原生array優雅強大，我幾乎完全使用collection取代PHP原生array，恨的是collection與array一樣，我無法得知collection內每個element的型別，因此在<code>foreach()</code>時，PhpStorm無法對collection內物件的property與method做語法提示。</p>
<figure class="highlight php"><figcaption><span>app\Repositories\UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> User */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserRepository constructor.</span><br><span class="line">     * <span class="doctag">@param</span> User $user</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User <span class="variable">$user</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 傳回所有User</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllUsers</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user-&gt;all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一個典型的repository應用，repository負責資料庫邏輯，在<code>getAllUsers()</code>傳回<code>Collection</code>。<span class="margin-note-marker"><sup>30</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">30</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/2edefa5286d4d8461c3985da0e3463b30e492f0e" target="_blank" rel="external">新增UserRepository.php</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide057.png" alt=""></p>
<p>一個典型的service應用，注入repository後，從<code>UserRepository</code>的<code>getAllUsers()</code>獲得collection，要<code>foreach()</code>時，發現PhpStorm無法對<code>User</code> model的資料庫欄位名稱做語法提示。</p>
<p>之前辛辛苦苦使用Laravel IDE Helper替<code>User</code> model加了PHPDoc，結果在使用collection之後，竟然完全用不上。</p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide058.png" alt=""></p>
<p>很多人的做法，是在<code>foreach()</code>之內補一行<code>/** @var User $user*/</code>描述<code>$user</code>型別，這樣雖然可以另<code>$user</code>出現資料庫欄位的語法提示，但缺點是這種inline PHPDoc很醜，且每次<code>foreach()</code>都要加一次很麻煩。</p>
<p>比較好的方式是將PHPDoc加在UserRepository的<code>@return</code>內。</p>
<figure class="highlight php"><figcaption><span>app\Repositories\UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> User */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserRepository constructor.</span><br><span class="line">     * <span class="doctag">@param</span> User $user</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User <span class="variable">$user</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 傳回所有User</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> Collection|User[]</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllUsers</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user-&gt;all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span><br><span class="line">  * 傳回所有User</span><br><span class="line">  *</span><br><span class="line">  * <span class="doctag">@return</span> Collection|User[]</span><br><span class="line">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllUsers</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user-&gt;all();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>@return</code>內除了<code>Collection</code>外，還加上了<code>User[]</code>，這是模仿Java array的宣告方式，目的是告訴PhpStorm這個物件除了是collection，其每個item內的型別是<code>User</code>，因為描述了兩種型別資訊，中間要加上<code>|</code>符號。<span class="margin-note-marker"><sup>31</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">31</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/cf21d33d14fc3d11ef22de657e49162ca72f4aaf" target="_blank" rel="external">UserRepostory.php加上User[]註解</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-ide-helper/ide059.png" alt=""></p>
<p>再也不用每個<code>foreach()</code>都補上inline PHPDoc，就可以讓PhpStorm對collection內的model做資料庫欄位名稱的語法提示。<span class="margin-note-marker"><sup>32</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">32</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainerMeta/commit/cb8eda4a462a75185fb8a457f3440abbe730fd8a" target="_blank" rel="external">新增UserService.php</a></span></span></span></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Laravel IDE Helper + Laravel Plugin幫我們補上了大部分Laravel部分的PHPDoc，但自己寫的class，則有賴自己使用PHPDoc。</li>
<li>隨著PHP 7對type hint的支援更加完整，PHPDoc的重要性沒以往重要，不過對於field，collection與overloading，目前還是得依賴PHPDoc，PhpStorm才能達到較滿意的語法提示與語法檢查功能。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52ServiceContainerMeta" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[利用PHPDoc發揮PhpStorm的威力]]>
    
    </summary>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="PHPDoc" scheme="http://oomusou.io/tags/PHPDoc/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用PhpStorm實現Move Assignments to Paramters?]]></title>
    <link href="http://oomusou.io/refactor/refactor-remove-assignments-to-parameters/"/>
    <id>http://oomusou.io/refactor/refactor-remove-assignments-to-parameters/</id>
    <published>2016-03-02T06:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>若我們直接對參數做修改，會使得將來的<strong>Extract Method</strong>難度更高，因此在執行<strong>Extract Method</strong>之前，我們常常會執行<strong>Move Assignment to Parameters</strong>，先將參數指定給<strong>暫存變數</strong>，然後將後續的程式全部改成修改此<strong>暫存變數</strong>。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>PhpStorm 10.0.3</p>
<h2 id="定義">定義</h2><hr>
<p>在程式中對參數的值進行修改 =&gt; <strong>以一個暫時變數取代該參數</strong>。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">discount</span><span class="params">(int <span class="variable">$inputVal</span>, int <span class="variable">$quantity</span>, int <span class="variable">$yearToDate</span>)</span> : <span class="title">int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$inputVal</span> &gt; <span class="number">50</span>)  &#123;</span><br><span class="line">        <span class="variable">$inputVal</span> -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重構成<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">discount</span><span class="params">(int <span class="variable">$inputVal</span>, int <span class="variable">$quantity</span>, int <span class="variable">$yearToDate</span>)</span> : <span class="title">int</span> </span>&#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$inputVal</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$inputVal</span> &gt; <span class="number">50</span>)  &#123;</span><br><span class="line">        <span class="variable">$result</span> -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="目的">目的</h2><hr>
<ol>
<li>提升程式的可讀性，參數只用來代表<strong>傳進來的資料</strong>。</li>
<li>不要混用<code>pass by value</code>與<code>pass by reference</code>的資料處理方式。</li>
<li>保持參數不變，方便<strong>Extract Method</strong>進行。</li>
</ol>
<h2 id="重構前的程式碼">重構前的程式碼</h2><hr>
<p>在<a href="http://www.tenlong.com.tw/items/9861547533?item_id=45657" target="_blank" rel="external">重構 : 改善既有程式的設計 (二版)</a>的範例程式，改寫成PHP後的程式碼如下 : <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RemoveAssginmentToParameters/commit/c909bdf6c3e83142e9e236e4212edbdd7f9b6e20" target="_blank" rel="external">重構前的程式</a></span></span></span><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $inputVal</span><br><span class="line">     * <span class="doctag">@param</span> int $quantity</span><br><span class="line">     * <span class="doctag">@param</span> int $yearToDate</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">discount</span><span class="params">(int <span class="variable">$inputVal</span>, int <span class="variable">$quantity</span>, int <span class="variable">$yearToDate</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$inputVal</span> &gt; <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$quantity</span> &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$yearToDate</span> &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$inputVal</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們看到<code>$inputVal</code>為參數，但在12行、16行、20行卻對<code>$inputVal</code>去做修改。</p>
<p>因此我們想使用<strong>Remove Assignments to Parameters</strong>對<code>$inputVal</code>做重構。</p>
<h2 id="Move_Assignments_to_Parameters">Move Assignments to Parameters</h2><hr>
<h3 id="新增暫時變數">新增暫時變數</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $inputVal</span><br><span class="line">     * <span class="doctag">@param</span> int $quantity</span><br><span class="line">     * <span class="doctag">@param</span> int $yearToDate</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">discount</span><span class="params">(int <span class="variable">$inputVal</span>, int <span class="variable">$quantity</span>, int <span class="variable">$yearToDate</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$inputVal</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$inputVal</span> &gt; <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$quantity</span> &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$yearToDate</span> &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">            <span class="variable">$inputVal</span> -= <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$inputVal</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="variable">$inputVal</span>;</span><br></pre></td></tr></table></figure></p>
<p>為了不讓程式直接修改參數<code>$inputVal</code>，我們新增了暫時變數<code>$result</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RemoveAssginmentToParameters/commit/4c5eb086073ea4221eda4b0a579d9491c65fbbdc" target="_blank" rel="external">新增臨時變數</a></span></span></span></p>
<h3 id="修改暫存變數">修改暫存變數</h3><p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove000.png" alt=""></p>
<p>我們知道20行、24行、28行與31行的<code>$inputVal</code>都要改成<code>$result</code>，很可惜目前PhpStorm的重構，並無法直接支援<strong>Remove Assignments to Parameters</strong>。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>若直接根據<code>$inputVal</code>執行<strong>Rename</strong>，會將所有的<code>$inputVal</code>都改成<code>$result</code>，可惜這也不是我們所要的。</span></span></span></p>
<p>以下介紹兩種方法 :</p>
<h4 id="手動重構">手動重構</h4><p>按住&#8997;，將所有你想重構的變數<strong>後面</strong>用滑鼠點一下，如上圖20行、24行、28行與31行之後都出現了<strong>游標</strong>閃爍。<br><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove001.png" alt=""></p>
<p>之後按&#8998;，會發現這4個<code>$inputVal</code>已經可連動刪除了。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove002.png" alt=""></p>
<p>可一次只將4個<code>$inputVal</code>改成<code>$result</code>。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RemoveAssginmentToParameters/commit/ea90ba169ce66e53eef4936d3a48a0ba4f05076c" target="_blank" rel="external">修改暫存變數</a></span></span></span></p>
<h4 id="半自動重構">半自動重構</h4><p>若要重構的變數很多，可能無法立刻判斷要重構哪些變數，可以由PhpStorm幫我們搜尋，我們再判斷此變數是否必須重構。<br><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove003.png" alt=""></p>
<p>用滑鼠點一下<strong>第一個</strong>與預期重構變數<strong>同名</strong>的變數，可以是要重構的變數，也可以是不要重構的變數。</p>
<p>若此變數<strong>正是</strong>欲重構的變數，則按&#8963; + G，表示選擇了此變數。</p>
<p>若此變數<strong>不是</strong>欲重構的變數，則按&#8984; + G，表示繼續搜尋與此變數同名的變數。</p>
<p>因為第一個<code>$inputVal</code>並非要重構的變數，因此按&#8984; + G繼續搜尋下一個變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove004.png" alt=""></p>
<p>此<code>$inputVal</code>也不是我們要重構的變數，因此按&#8984; + G繼續搜尋下一個變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove005.png" alt=""></p>
<p>此<code>$inputVal</code>為我們要重構的變數，因此按&#8963; + G選擇了此變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove006.png" alt=""></p>
<p>按&#8963; + G之後，預設會一併選擇下一個變數，若此變數不是你要重構的變數，一樣按&#8984; + G跳過，若要選擇此變數則按&#8963; + G選擇了此變數。</p>
<p>此<code>$inputVal</code>為我們要重構的變數，因此按&#8963; + G選擇了此變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove007.png" alt=""></p>
<p>此<code>$inputVal</code>為我們要重構的變數，因此按&#8963; + G選擇了此變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove008.png" alt=""></p>
<p>如此我們就選擇了4個我們要重構的變數。</p>
<p><img src="/images/refactor/phpstorm-refactor-remove-assignments-to-parameters/remove009.png" alt=""></p>
<p>一併將4個<code>$inputVal</code>都改成<code>$result</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm雖然已經內建很多重構功能，不過有些重構還是無法直接完成，需靠一些技巧。</li>
<li>&#8997; + 滑鼠點擊，可手動選擇要重構的變數。</li>
<li>&#8984; + G與&#8963; + G，可半自動選擇要重構的變數。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52RemoveAssginmentToParameters" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[PhpStorm無法直接實現此重構，需搭配一些技巧]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用變數建立object?]]></title>
    <link href="http://oomusou.io/php/php-variable-object/"/>
    <id>http://oomusou.io/php/php-variable-object/</id>
    <published>2016-02-29T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>傳統我們會使用<code>if else</code>判斷，建立不同的物件，但由於JavaScript與PHP動態語言的特性，我們可以將要建立的物件的<strong>class名稱</strong>以<strong>變數</strong>表示，直接以該變數建立物件。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 5<br>PHP 7.0<br>Laravel 5.2.22</p>
<h2 id="JavaScript">JavaScript</h2><hr>
<h3 id="if_else">if else</h3><p>傳統若要根據不同的變數值，建立不同的物件，我們會使用<code>if else</code>方式 :<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/VariableObject/commit/1d4e69d35a44a02d22a5bb60b8f33573cd6aaa2a" target="_blank" rel="external">JavaScript:傳統使用if else建立object</a></span></span></span></p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Admin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">'admin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type == <span class="string">'admin'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> Admin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> Customer();</span><br><span class="line">&#125;</span><br><span class="line">user.show()</span><br></pre></td></tr></table></figure>
<p>15行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (type == <span class="string">'admin'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> Admin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> Customer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>if else</code>去判斷變數值，建立不同物件。</p>
<h3 id="Variable">Variable</h3><p>若將class名稱使用變數表示，則不需要<code>if else</code>判斷 : <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/VariableObject/commit/0a4a1219d0f5285e88507795e90538ee740ca643" target="_blank" rel="external">JavaScript:動態使用變數建立object</a></span></span></span></p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Customer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Admin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">'admin'</span>;</span><br><span class="line"><span class="keyword">var</span> className = (type == <span class="string">'admin'</span>) ? <span class="string">'Admin'</span> : <span class="string">'Customer'</span>;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">this</span>[className];</span><br><span class="line">user.show()</span><br></pre></td></tr></table></figure>
<p>14行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> className = (type == <span class="string">'admin'</span>) ? <span class="string">'Admin'</span> : <span class="string">'Customer'</span>;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">this</span>[className];</span><br></pre></td></tr></table></figure></p>
<p>判斷<code>type</code>，並將要建立物件的class名稱存入<code>className</code>變數。</p>
<p>在JavaScript，若要建立物件，有以下3種方式 :</p>
<ol>
<li>new object.method </li>
<li>new object[‘method’] : 其中’method’是<strong>字串</strong>。</li>
<li>new object[method] : 其中method是<strong>變數</strong>。</li>
</ol>
<p>因為第3種方式，我們可以將class名稱以變數方式傳入<code>[]</code>。</p>
<h2 id="PHP">PHP</h2><hr>
<p>PHP也可以達到類似JavaScript的功能。</p>
<h3 id="if_else-1">if else</h3><p>傳統若要根據不同的變數值，建立不同的物件，我們會使用<code>if else</code>方式 :<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/VariableObject/commit/fc5a27608b246fd1648b78204e815ac50eed1906" target="_blank" rel="external">PHP:傳統使用if else建立object</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span> = <span class="string">'admin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$type</span> == <span class="string">'admin'</span>) &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> Admin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> Customer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span>-&gt;show();</span><br></pre></td></tr></table></figure>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$type</span> == <span class="string">'admin'</span>) &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> Admin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> Customer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>if else</code>去判斷變數值，建立不同物件。</p>
<h3 id="Variable-1">Variable</h3><p>若將class名稱使用變數表示，則不需要<code>if else</code>判斷 : <span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/VariableObject/commit/0e06cb6748d7355137e5ca061b221b7edf4f5fa3" target="_blank" rel="external">PHP:動態使用變數建立object</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span> = <span class="string">'admin'</span>;</span><br><span class="line"><span class="variable">$className</span> = (<span class="variable">$type</span> == <span class="string">'admin'</span>) ? <span class="string">'Admin'</span> : <span class="string">'Customer'</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="variable">$className</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;show();</span><br></pre></td></tr></table></figure>
<p>18行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$className</span> = (<span class="variable">$type</span> == <span class="string">'admin'</span>) ? <span class="string">'Admin'</span> : <span class="string">'Customer'</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="variable">$className</span>;</span><br></pre></td></tr></table></figure></p>
<p>判斷<code>$type</code>，並將要建立物件的class名稱存入<code>$className</code>變數。</p>
<p>在PHP，允許我們<code>new</code>之後直接加上變數建立物件。</p>
<h3 id="Type_Hint">Type Hint</h3><p>談到這裡，雖然我們已經可以在JavaScript與PHP使用變數來建立物件，由於class名稱是<strong>字串</strong>，我們甚至可以將class名稱存在<strong>設定檔</strong>內，如<code>config/app.php</code>，將來若因為需求改變，需改變建立物件的class名稱時，只需修改設定檔即可，並透過<code>config::get()</code>讀取class名稱，原來程式碼完全不用修改，也算是達到<strong>開放封閉原則</strong>的要求。</p>
<p>不過這種方式有個致命傷，就是那個<code>show()</code>函式並沒有硬性規定(如interface或abstract class)，也就是動態語言所謂的<strong>duck type</strong>，也因為並沒有任何機制規定<code>show()</code>，只有程式設計師自己知道必須要有<code>show()</code>，也因此PhpStorm將無法幫你對<code>show()</code>做<strong>語法提示</strong>與<strong>語法檢查</strong>。</p>
<p>但隨著PHP的Java化之後(type hint + service container)，PHP成為唯一一個同時擁有duck type與strong type的程式語言，尤其PHP 7之後的type hint更加完整(scalar type hint + return type)，若搭配service container，將可解決之前<code>show()</code>的問題。</p>
<p><strong>routes.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/ea791292335418ff874e5403bedc69d18adca430" target="_blank" rel="external">修改routes.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Http/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/show'</span>, <span class="string">'UserController@show'</span>);</span><br></pre></td></tr></table></figure>
<p>在routes.php加上URI與其對應的controller action。</p>
<p><strong>UserController.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/f9dc64beb3983b2c2fd4aa24c630c6f3756237e3" target="_blank" rel="external">建立UserController.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">UserService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserService */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$userService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserService $userService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService <span class="variable">$userService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService = <span class="variable">$userService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第8行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> UserService */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$userService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserController constructor.</span><br><span class="line"> * <span class="doctag">@param</span> UserService $userService</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserService <span class="variable">$userService</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userService = <span class="variable">$userService</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注入<code>UserService</code>。</p>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userService-&gt;show(<span class="string">'admin'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>show()</code>呼叫<code>$this-&gt;userService</code>的<code>show()</code>，並將<code>admin</code>變數傳入。</p>
<p><strong>UserService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/7cffa929a1b9f7a07ad90faceda9a304ecd45e99" target="_blank" rel="external">建立UserService.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/UserService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>\<span class="title">UserFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserFactory */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$userFactory</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserFactory $userFactory</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserFactory <span class="variable">$userFactory</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userFactory = <span class="variable">$userFactory</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(string <span class="variable">$type</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable">$this</span>-&gt;userFactory-&gt;create(<span class="variable">$type</span>);</span><br><span class="line">        <span class="variable">$user</span>-&gt;show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第7行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** <span class="doctag">@var</span> UserFactory */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="variable">$userFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> UserFactory $userFactory</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserFactory <span class="variable">$userFactory</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userFactory = <span class="variable">$userFactory</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注入<code>UserFactory</code>，專門負責建立<code>Admin</code>或<code>Customer</code>物件。</p>
<p>19行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(string <span class="variable">$type</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$this</span>-&gt;userFactory-&gt;create(<span class="variable">$type</span>);</span><br><span class="line">    <span class="variable">$user</span>-&gt;show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>$this-&gt;userFactory</code>的<code>create()</code>建立物件，將<code>$type</code>變數傳入，由<code>UserFactory</code>決定要建立哪個物件。</p>
<p>無論建立什麼物件，都使用相同的<code>show()</code>，這就是物件導向的<strong>多型</strong>。</p>
<p><strong>AbstractUser.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/da4f54692febda4937d98834e3b2b68da219f152" target="_blank" rel="external">建立AbstractUser.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/AbstractUser.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由<code>abstract class</code>定義<code>show()</code>，如此PhpStorm就能幫我們做語法提示與語法檢查了。</p>
<p><strong>Admin.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/0f22afecf4be28d6102f3b86e0e5382a10ab0182" target="_blank" rel="external">建立Admin.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/Admin.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a admin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Admin</code>繼承<code>AbstractUser</code>，因為之前定義了<code>show()</code> abstract method，所以必須在此實作<code>show()</code>。</p>
<p><strong>Customer.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/3e86bbab2e1e14d3807cbe70d3a25d89cec17ea6" target="_blank" rel="external">建立Customer.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/Customer.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">AbstractUser</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'I am a customer'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Customer</code>繼承<code>AbstractUser</code>，因為之前定義了<code>show()</code> abstract method，所以必須在此實作<code>show()</code>。</p>
<p><strong>UserFactory</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ServiceContainer/commit/e2edbb3492b6d49b5e0a19186e28a142d4426b45" target="_blank" rel="external">建立UserFactory.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Services/User/UserFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $type</span><br><span class="line">     * <span class="doctag">@return</span> AbstractUser</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(string <span class="variable">$type</span>)</span> : <span class="title">AbstractUser</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        App::bind(AbstractUser::class, <span class="string">'App\Services\User\\'</span> . ucfirst(<span class="variable">$type</span>));</span><br><span class="line">        <span class="keyword">return</span> App::make(AbstractUser::class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重點在此，使用了<code>App::bind()</code>，將abstract class與concrete class綁定，其中concrete class的class名稱為變數。</p>
<p>然後再使用<code>App::make()</code>建立綁定後的物件。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上PHP建議先考慮使用type hint的strong type，這種方式PhpStorm支援較好，但是duck type也不是不能用，可以當成<strong>泛型</strong>使用，也就是當你不想考慮其型別時，就不要加上type hint，故意模糊其型別。</li>
<li>在PHP與Laravel，透過<code>App::bind()</code>與<code>App::make()</code>也可以使用變數建立object，還額外得到type hint與PhpStorm的支援。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a>上找到。</p>
<ol>
<li><a href="https://github.com/oomusou/VariableObject/" target="_blank" rel="external">JavaScript與PHP使用變數建立物件</a></li>
<li><a href="https://github.com/oomusou/Laravel52ServiceContainer" target="_blank" rel="external">PHP與Laravel使用Service Container建立物件</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[使用變數建立object取代if else]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://oomusou.io/tags/JavaScript/"/>
    
      <category term="PHP" scheme="http://oomusou.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用變數執行method?]]></title>
    <link href="http://oomusou.io/javascript/javascript-variable-method/"/>
    <id>http://oomusou.io/javascript/javascript-variable-method/</id>
    <published>2016-02-28T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>傳統我們會使用<code>if else</code>判斷，執行不同的method，但由於JavaScript與PHP動態語言的特性，我們可以將要執行的method名稱以<strong>變數</strong>表時，直接以該變數執行method。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 5<br>PHP 7.0</p>
<h2 id="JavaScript">JavaScript</h2><hr>
<h3 id="if_else">if else</h3><p>傳統若要根據不同的property值，執行不同method，我們會使用<code>if else</code>方式 :<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/VariableMethod/commit/6940be98f2c632a73d14d6e09fe80d11970d60d4" target="_blank" rel="external">JavaScript:傳統使用if else切換method</a></span></span></span></p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">showed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.showed = showed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.toggleShow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="keyword">this</span>.showed) &#123;</span><br><span class="line">            <span class="keyword">this</span>.show();</span><br><span class="line">    	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.hide();</span><br><span class="line">    	&#125; </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'User show'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.hide = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	print(<span class="string">'User hide'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="literal">false</span>);</span><br><span class="line">user.toggleShow();</span><br></pre></td></tr></table></figure>
<p>第4行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.toggleShow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.showed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.hide();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>if else</code>去判斷property值，執行不同method。</p>
<h3 id="Variable">Variable</h3><p>若將method名稱使用變數表示，則不需使用<code>if else</code>判斷 :<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/VariableMethod/commit/d40603aa1dd6de09c88da004ae54942cdbdf4076" target="_blank" rel="external">JavaScript:動態使用變數切換method</a></span></span></span></p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">showed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.showed = showed;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.toggleShow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> method = (<span class="keyword">this</span>.showed) ? <span class="string">'show'</span> : <span class="string">'hide'</span>;</span><br><span class="line">        <span class="keyword">this</span>[method]();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'User show'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.hide = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        print(<span class="string">'User hide'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="literal">false</span>);</span><br><span class="line">user.toggleShow();</span><br></pre></td></tr></table></figure>
<p>第4行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.toggleShow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> method = (<span class="keyword">this</span>.showed) ? <span class="string">'show'</span> : <span class="string">'hide'</span>;</span><br><span class="line">    <span class="keyword">this</span>[method]();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>判斷<code>this.showed</code>，並將要執行的method名稱存入<code>method</code>變數。</p>
<p>在JavaScript，若要執行物件的method，有以下3種方式 :</p>
<ol>
<li>object.method </li>
<li>object[‘method’] : 其中’method’是<strong>字串</strong>。</li>
<li>object[method] : 其中method是<strong>變數</strong>。</li>
</ol>
<p>因為第3種方式，我們可以將method名稱以變數方式傳入<code>[]</code>。</p>
<h2 id="PHP">PHP</h2><hr>
<p>PHP也可以達到類似JavaScript的功能。</p>
<h3 id="if_else-1">if else</h3><p>傳統若要根據不同的field值，執行不同method，我們會使用<code>if else</code>方式 :<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/VariableMethod/commit/23f3aed07bc6f922585592e84123712b4795fbf0" target="_blank" rel="external">PHP:傳統使用if else切換method</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$showed</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__constructor</span><span class="params">(bool <span class="variable">$showed</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;showed = showed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleShow</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;showed) &#123;</span><br><span class="line">            <span class="variable">$$this</span>-&gt;show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'User show'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hide</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'User hide'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> User(<span class="keyword">false</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;toggleShow();</span><br></pre></td></tr></table></figure>
<p>第10行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleShow</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;showed) &#123;</span><br><span class="line">        <span class="variable">$$this</span>-&gt;show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>if else</code>去判斷field值，執行不同method。</p>
<h3 id="Variable-1">Variable</h3><p>若將method名稱使用變數表示，則不需使用<code>if else</code>判斷 :<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/VariableMethod/commit/2e549e01e79398dd6977d4f4fde189837667c42c" target="_blank" rel="external">PHP:動態使用變數切換method</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$showed</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__constructor</span><span class="params">(bool <span class="variable">$showed</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;showed = showed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleShow</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$method</span> = (<span class="variable">$this</span>-&gt;showed) ? <span class="string">'show'</span> : <span class="string">'hide'</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'User show'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hide</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'User hide'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> User(<span class="keyword">false</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;toggleShow();</span><br></pre></td></tr></table></figure>
<p>第10行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleShow</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$method</span> = (<span class="variable">$this</span>-&gt;showed) ? <span class="string">'show'</span> : <span class="string">'hide'</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>判斷<code>$this-&gt;showed</code>，並將要執行的method名稱存入<code>$method</code>變數。</p>
<p>在PHP，允許我們在<code>-&gt;</code>之後直接加上<strong>變數</strong>，可以是field或method，若是method，還要加上<code>()</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>JavaScript與PHP都允許我們將欲執行的method名稱以變數表示。</li>
<li>因為method名稱是<strong>字串</strong>，所以我們可以將method名稱存在<strong>設定檔</strong>內，如<code>config/app.php</code>，將來若因為需求改變，須改變執行的method時，只需修改設定檔即可，並透過<code>config::get()</code>讀取method名稱，原來程式碼完全不用修改，達到<strong>開放封閉原則</strong>的要求。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/VariableMethod" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用變數執行method取代if else]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://oomusou.io/tags/JavaScript/"/>
    
      <category term="PHP" scheme="http://oomusou.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用PhpStorm實現TDD、重構與偵錯?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-tdd-refactor/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-tdd-refactor/</id>
    <published>2016-01-14T12:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>TDD要求我們先寫測試，雖然會在專案一開始多花一點時間，但只要我們選對工具，就可將花在<strong>測試</strong>、<strong>重構</strong>與<strong>偵錯</strong>的時間再省回來，讓我們雖然輸在起跑點，卻可贏在決勝點。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>OS X 10.11.2<br>PHP 7.0.0<br>Laravel 5.1.28<br>PhpStorm 10.0.3</p>
<h2 id="物件導向">物件導向</h2><hr>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/xwin000.jpg" alt=""></p>
<p>假如今天PM開的需求，就是希望我們做出一台<strong>X戰機</strong>，我們當然可以完全手刻出符合Spec的X戰機，但只要需求一變，需要我們<strong>改</strong>功能，<strong>加</strong>功能時，我們就很頭大了。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/xwin001.jpg" alt=""></p>
<p>因此我們需要將X戰機<strong>樂高化</strong>，<strong>改</strong>功能只要<strong>換</strong>樂高積木，<strong>加</strong>功能只要<strong>加</strong>樂高積木即可。</p>
<p><strong>物件導向</strong>簡單的說就是<strong>樂高導向</strong>，每個<strong>樂高積木</strong>就是<code>class</code>，樂高積木的<strong>規格</strong>就是<code>interface</code>或<code>abstract class</code>，只要符合規格的積木，我們都可以<strong>換掉</strong>或<strong>加上去</strong>。</p>
<h3 id="SOLID">SOLID</h3><p>程式語言提供了各種物件導向程式的<strong>語法</strong>，倒底要怎樣寫才是符合物件導向精神的程式呢?</p>
<p><strong>SOLID原則</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>詳細請參考大澤木小鐵的<a href="http://slides.com/jaceju/design-patterns-by-examples#/" target="_blank" rel="external">從實例學習設計模式 威力加強版 使用PHP</a></span></span></span></p>
<ol>
<li><strong>S</strong> : <strong>Single Responsibility Principle</strong> (單一職責原則)</li>
<li><strong>O</strong> : <strong>Open Closed Principle</strong> (開放封閉原則)</li>
<li><strong>L</strong> : <strong>Liskov Substitution Principle</strong> (里氏替換原則)，<strong>Least Knowledge Principle</strong> (最小知識原則)</li>
<li><strong>I</strong> : <strong>Interface Segregation Principle</strong> (介面隔離原則)</li>
<li><strong>D</strong> : <strong> Dependency Inversion Principle</strong> (依賴反轉原則)</li>
</ol>
<p>Laravel的作者Taylor Otwell曾有一段話 : <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>詳細請參考<a href="http://blog.turn.tw/?p=957" target="_blank" rel="external">Laravel之父 : 學習出色的Design Pattern</a></span></span></span></p>
<blockquote><p>如果有人想成為更棒的PHP工程師，你會怎麼建議？</p>
<p>學習出色的Design Pattern。這不只適用在PHP。你可以在任何程式語言使用這些pattern。尤其是SOLID。把這五個徹底學好，它會把你帶到新的境界，我每次寫code幾乎都在想這五個。</p>
<footer><strong>Taylor Otwell</strong></footer></blockquote>
<p>除了Design Pattern，重點在於更根本的<strong>SOLID</strong>，這5點才是物件導向的心法。</p>
<h3 id="設計模式">設計模式</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/dp.jpg" alt=""></p>
<p><strong>設計模式</strong>其實就是大神們留下來<strong>好的</strong>物件導向<strong>設計範本</strong>。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span><a href="http://www.tenlong.com.tw/items/9572054112?item_id=997944" target="_blank" rel="external">物件導向設計模式-可再利用物件導向軟體之要素</a></span></span></span></p>
<p>優點 : </p>
<ol>
<li><strong>具體方案</strong> : 至少是個具體的物件導向設計方式，不再流於抽象概念。</li>
<li><strong>用得巧就很棒</strong> : 只要在<strong>適當的場合</strong>，使用<strong>適當的模式</strong>，就會非常漂亮。</li>
</ol>
<p>缺點 :</p>
<ol>
<li><strong>學習門檻高</strong> : 理解設計模式已經<strong>不容易</strong>，要套用在實務上<strong>更難</strong>，很依賴<strong>天份</strong>。</li>
<li><strong>容易over design</strong> : 初學者容易一開始就套大量<strong>設計模式</strong>，導致系統提前<strong>過於複雜</strong>。</li>
</ol>
<h3 id="重構">重構</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor.jpg" alt=""></p>
<p>將既有的程式<strong>整形</strong>成符合物件導向精神的程式。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span><a href="http://www.tenlong.com.tw/items/9861547533?item_id=45657" target="_blank" rel="external">重構 : 改善既有程式的設計 (二版)</a></span></span></span></p>
<p>優點 :</p>
<ol>
<li><strong>學習門檻較低</strong> : 重構招式較平易近人，容易學習。</li>
<li><strong>可套用在legacy code</strong> : 不再只有新的專案才能物件導向。</li>
</ol>
<p>缺點 :</p>
<ol>
<li><strong>需要依賴測試做保障</strong> : 重構需要頻繁的測試，也需要測試保證重構沒有出錯。</li>
</ol>
<h3 id="TDD">TDD</h3><p>既然<strong>重構</strong>需要<strong>測試</strong>，到底要<strong>先</strong>寫測試，還是<strong>後</strong>寫測試呢?</p>
<p><strong>TDD</strong>的全名為<strong>Test Driven Development</strong> (測試驅動開發) 顛覆大家以往的習慣，強調<code>先寫測試，再寫程式</code>，整個流程是 :</p>
<img src="/images/phpstorm/phpstorm-tdd-refactor/solid000.svg" width="750">
<p>優點 :</p>
<ol>
<li><strong>提供重構堅固的屏障</strong> : 有寫測試，我們才敢放膽重構。</li>
<li><strong>避免over design</strong> : 只為<span class="label label-danger">紅燈</span>變成<span class="label label-success">綠燈</span>寫程式，不會寫出額外的程式。</li>
<li><strong>Top Down思維</strong> : 因為測試先寫，會以<strong>測試好寫</strong>的角度去寫程式， 會比較接近使用者，也符合物件導向的精神。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>詳細請參考<a href="/tdd/tdd-solid/">使用TDD實踐SOLID</a></span></span></span></li>
<li><strong>偵錯快速</strong> : 將來要debug時，只要一跑測試，就可以快速找到錯誤所在。</li>
</ol>
<p>缺點 :</p>
<ol>
<li><strong>先寫測試，一開始會多花一點時間</strong> : 所以我們要找更強的工具幫我們將時間省回來。</li>
<li><strong>需要學習如何寫測試</strong> : 寫測試有不少技巧，如<strong>3A原則</strong>、<strong>Mock物件</strong>、<strong>依賴注入</strong>、<strong>Assertion</strong>…。</li>
</ol>
<h2 id="設定環境">設定環境</h2><hr>
<h3 id="建立Laravel專案">建立Laravel專案</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ composer create-project laravel/laravel Laravel51Refactor_demo 5.1 --prefer-dist</span><br></pre></td></tr></table></figure>
<p>在命令列下<code>composer create-project</code>指令建立Laravel專案。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/f8cf3f177f855569ba9f80dfa4941975ec58a116" target="_blank" rel="external">composer create-project</a></span></span></span></p>
<h3 id="安裝Laravel_Elixir">安裝Laravel Elixir</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ npm install</span><br></pre></td></tr></table></figure>
<p>由於我們會使用Laravel Elixir在背後自動執行測試，因此要使用<code>npm install</code>。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/817a91c43ee3ee113dd5474fbed1995d25003de8" target="_blank" rel="external">npm install</a></span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp</span><br></pre></td></tr></table></figure>
<p>執行<code>gulp</code>之後，若能出現如下圖的<code>Sass Compiled</code>，表示Laravel Elixir已經安裝成功。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>Laravel Elixir是否能安裝成功，取決幾個因素：Node.js、Gulp與Laravel Elixir之間的版本相依，若真的搞不定，可以參考Homestead內安裝的Node.js與Gulp的版本。</span></span></span><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor011.png" alt=""></p>
<h3 id="使用PhpStorm開啟">使用PhpStorm開啟</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor000.png" alt=""></p>
<p>啟動PhpStorm。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor001.png" alt=""></p>
<p>選擇剛建立的專案目錄。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor002.png" alt=""></p>
<p>一開始<code>indexing</code>雖稍微久一點，但只要做一次即可。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>PhpStorm會對整個專案的檔案做index，以加速將來檔案的搜尋。</span></span></span></p>
<h3 id="設定Namespace_Roots">設定Namespace Roots</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor003.png" alt=""></p>
<p>第一次開啟專案，PhpStorm會跳出<code>Detect PSR-0 namespaces roots</code>要求你設定。選擇<code>Settings | Directories</code>。<span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>理論上選擇<code>automatically</code>也可以，不過由於之前下了<code>npm install</code>之後，將大量node packages安裝在<code>node_modules</code>目錄下，若由PhpStorm自動去偵測目錄，將花較長時間，因此在此採用手動設定，詳細請參考<a href="/phpstorm/phpstorm-new-laravel-project/">如何使用PhpStorm建立Laravel專案?</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor004.png" alt=""></p>
<p>設定<code>Sources</code>目錄。</p>
<p>由於Laravel預設的namespace目錄是從<code>app</code>目錄開始，因此選擇<code>app</code>目錄，按下<code>Sources</code>，右側會出現藍色<code>Sources Folders : app</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor005.png" alt=""></p>
<p>設定<strong>namespace名稱</strong>。</p>
<p>按下<code>P</code>，設定prefix。</p>
<p>根據PSR-4，我們可以有很多namespace root，因此可以對目錄設定prefix，將<code>app</code>目錄的prefix設定為<code>App</code>。<span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>這個步驟非常重要，設定好namespace root後，將來只要建立class，PhpStorm都會幫你管理namespace，不用再對namespace操心。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor006.png" alt=""></p>
<p>設定<code>Resource Root</code>目錄。</p>
<p>Laravel預設將前端的asset放在<code>resources</code>目錄，選擇<code>resources</code>，按下<code>Resource Root</code>，右側會出現紫色<code>Resource roots : resources</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor007.png" alt=""></p>
<p>設定<code>Tests</code>目錄。</p>
<p>Laravel預設將<strong>測試</strong>程式放在<code>tests</code>目錄，選擇<code>tests</code>，按下<code>Tests</code>，右側會出現綠色<code>Test Source Folders : tests</code>。</p>
<h3 id="設定PHP_Interpreter">設定PHP Interpreter</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor009.png" alt=""></p>
<p>PhpStorm允許我們直接在IDE內執行<strong>測試</strong>與<strong>偵錯</strong>，因此我們必須告訴PhpStorm，我們使用PHP的版本，以及PHP interpreter位置。<span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>詳細請參考<a href="/phpstorm/phpstorm-debug-testing/">如何使用PhpStorm測試與除錯?</a></span></span></span></p>
<h3 id="設定PHPUnit">設定PHPUnit</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor010.png" alt=""></p>
<p>PhpStorm允許我們直接在IDE內跑<strong>單元測試</strong>，因此我們必須告訴PhpStorm，PHPUnit的autoloader與<code>phpunit.xml</code>設定檔位置。<span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>詳細請參考<a href="/phpstorm/phpstorm-debug-testing/">如何使用PhpStorm測試與除錯?</a></span></span></span></p>
<h3 id="測試Gulp_TDD">測試Gulp TDD</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor012.png" alt=""></p>
<p>一開始已經使用<code>npm install</code>安裝了Laravel Elixir，為了要使Elixir能自動在背景執行PHPUnit，只要我們一存檔就執行測試，需修改<code>gulpfile.js</code>，加上<code>.phpUnit();</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor013.png" alt=""></p>
<p>在命令列執行<code>gulp tdd</code>，啟動Laravel Elixir在背景執行PHPUnit。<span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>在PhpStorm可按熱鍵：&#8997; + F12，可在下方顯示terminal直接輸入指令。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor014.png" alt=""></p>
<p>開啟<code>tests/ExampleTest.php</code>，這是Laravel所提供預設的測試，用來測試Laravel預設的首頁是否有<code>Laravel 5</code>字串。</p>
<p>將<code>5</code>改成<code>4</code>，存檔後就會在右上角顯示<span class="label label-danger">紅燈</span>，顯示測試錯誤。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor015.png" alt=""></p>
<p>若從<code>4</code>改成<code>5</code>，存檔後就會在右上角顯示<span class="label label-success">綠燈</span>，顯示測試成功。</p>
<p>若<span class="label label-danger">紅燈</span>與<span class="label label-success">綠燈</span>都能出現，表示<strong>Gulp TDD</strong>正常。</p>
<h2 id="TDD-1">TDD</h2><hr>
<h3 id="Spec">Spec</h3><p>計算一位顧客所有訂單的金額。<span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>本範例改編自<a href="http://www.books.com.tw/products/0010411649" target="_blank" rel="external">重構：改善既有程式的設計</a>的第一章範例，原書使用Java，經簡化後改成PHP版本。</span></span></span></p>
<table>
<thead>
<tr>
<th style="text-align:left">影片種類</th>
<th style="text-align:left">租期</th>
<th style="text-align:left">租金</th>
<th style="text-align:left">逾期費</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">普通片</td>
<td style="text-align:left">7天</td>
<td style="text-align:left">100</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">新片</td>
<td style="text-align:left">3天</td>
<td style="text-align:left">150</td>
<td style="text-align:left">30</td>
</tr>
<tr>
<td style="text-align:left">兒童片</td>
<td style="text-align:left">7天</td>
<td style="text-align:left">40</td>
<td style="text-align:left">10</td>
</tr>
</tbody>
</table>
<h3 id="測試案例">測試案例</h3><ol>
<li><p>普通片1支，10天<span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>寫測試的第一步，就是要將spec寫成<strong>測試案例</strong>，也就是實際的input與output結果，如此才能根據input與output判斷測試結果是否正確。</span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  100 + (10-7) * 10 = 130</div>
</li>
<li><p>新片1支，5天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  150 + (5-3) * 30 = 210</div>
</li>
<li><p>兒童片1支，8天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  40 + (8-7) * 10 = 50</div>
</li>
</ol>
<h3 id="設定Domain目錄">設定Domain目錄</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor016.png" alt=""></p>
<p>我們會將所有的class放在自己的<strong>Domain目錄</strong>下，或稱為<strong>Business Layer</strong>。<span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>詳細請參考<a href="/laravel/laravel-architecture/">Laravel的中大型專案架構</a></span></span></span></p>
<p>首先，在<code>app</code>目錄下建立<code>VideoRental</code>子目錄。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor017.png" alt=""></p>
<p>輸入<code>VideoRental</code>。<span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>在左側選擇<code>app</code>目錄，按下&#8963; + Ｎ，出現下拉選單，選擇<code>Directory</code>建立新目錄。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor018.png" alt=""></p>
<p>由於新目錄會有自己的namespace名稱，因此要修改<code>composer.json</code>的<code>psr-4</code>設定，加上<code>VideoRental</code>與其目錄。</p>
<p>執行<code>composer dumpautoload</code>建立新的autoload檔案。<span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>這一步一定要做，否則PHP會找不到我們自己建立的class，詳細請參考<a href="/laravel/laravel-architecture/">Laravel的中大型專案架構</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor019.png" alt=""></p>
<p>在PhpStorm設定<code>VideoRental</code> namespace。<span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>這一步一定要做，如此PhpStorm才會知道新的<code>VideoRental</code> namespace，將來建立新class時，才可以選的到此namespace。<br><strong><em>PhpStorm -&gt; Preferences… -&gt; Project:xxx -&gt; Directories</em></strong></span></span></span></p>
<p>選擇<code>app/VideoRental</code>目錄，按下<code>Sources</code>，右側會出現藍色<code>Sources Folders : app/VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor020.png" alt=""></p>
<p>按下<code>P</code>，設定namespace名稱。</p>
<p>將<code>app/VideoRental</code>目錄的prefix設定為<code>VideoRental</code>。<span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/d3b9a9a1b9733045a42685cd28682b955367f731" target="_blank" rel="external">新增domain目錄</a></span></span></span></p>
<h3 id="第一個測試">第一個測試</h3><p>接下來會介紹3種測試方式。</p>
<p>第一種測試方式 : <strong>使用Gulp TDD</strong></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor021.png" alt=""></p>
<p>在命令列使用<code>php artisan make:test</code>建立測試class，預設會繼承<code>tests</code>目錄下的<code>TestCase</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor040.png" alt=""></p>
<p>在命令列執行<code>gulp tdd</code>，讓Laravel Elixir在背後執行PHPUnit，將來只要我們一存檔就會自動執行測試。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor022.png" alt=""></p>
<p>建立<strong>PHPUnit Test Method</strong>。<span class="margin-note-marker"><sup>22</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">22</span>在寫測試的class內，按熱鍵 : &#8963; + N，會出現<code>Generate</code>選單，選擇<code>PHPUnit Test Method</code>，可幫我們自動建立test method。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor023.png" alt=""></p>
<p>PhpStorm自動幫我們建立以<code>test</code>為開頭的test method。<span class="margin-note-marker"><sup>23</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">23</span>PHPUnit預設會將2種method視為test method，一種是以<code>test</code>為開頭的method，一種是在PHPDoc註解加上<code>@test</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor024.png" alt=""></p>
<p>更改test method名稱，以最能描述<strong>測試案例</strong>的<code>口語命名</code>，不用遵循PSR-2。<span class="margin-note-marker"><sup>24</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">24</span>詳細請參考<a href="/php/php-psr2/">PSR-2 PHP Coding Style</a></span></span></span></p>
<p>在test method內加上<strong>arrange</strong>，<strong>act</strong>, <strong>assert</strong>，以<strong>3A</strong>原則寫測試。<span class="margin-note-marker"><sup>25</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">25</span>因為每個test method都需要3A原則當架構，建議可以自行加入PhpStorm的<strong>Live Template</strong></span></span></span></p>
<p><strong>3A原則</strong><br><strong>Arrange</strong></p>
<ul>
<li>建立物件 (待測物件，相依物件，Mock物件）。</li>
<li>建立假資料。</li>
<li>設定<strong>期望值</strong>。</li>
</ul>
<p><strong>Act</strong></p>
<ul>
<li>實際執行待測物件的method，獲得<strong>實際值</strong>。</li>
</ul>
<p><strong>Assert</strong></p>
<ul>
<li>使用PHPUnit提供的assertion，測試<strong>期望值</strong>與<strong>實際值</strong>是否相等。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor025.png" alt=""></p>
<p>依<strong>3A原則</strong>為骨架，依次將測試補上。<span class="margin-note-marker"><sup>26</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">26</span>實務上第一個會將<code>act</code>先補上，也就是先決定要測試哪一個method。</span></span></span></p>
<p>先寫測試讓我們會以<strong>測試好寫</strong>為前提設計，會幫助我們以<strong>使用者需求</strong>的<strong>抽象化角度</strong>去思考架構。</p>
<p><strong>Arrange</strong><br>因為我們的需求是：<code>計算一位顧客所有訂單的金額</code>，且<strong>金額</strong>會隨著<strong>電影</strong>種類而不同，因此最基本，我們會有<code>Movie</code>、<code>Order</code>與<code>Customer</code>三個class，且一位顧客會有多筆訂單，因此會有<code>addOrder()</code>提供新增訂單。<span class="margin-note-marker"><sup>27</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">27</span>此時<code>Movie</code>、<code>Order</code>、<code>Customer</code>、<code>addOrder</code>與<code>calculateTotalPrice()</code>都還沒建立，因此在PhpStorm會<strong>反白</strong>，這不用擔心，因為我們現在是<strong>先寫測試</strong>，以<strong>Top Down</strong>的方式去思考，不用擔心這些class與method還沒建立，只要先思考<code>這樣子我們測試最好寫</code>就好了，這是<strong>TDD</strong>很重要的心法。</span></span></span></p>
<p>將<strong>測試案例</strong>的<strong>期望值</strong>寫入<code>$expected</code>。</p>
<p><strong>Act</strong><br>實際測試<code>Customer</code>的<code>calculateTotalPrice()</code>，獲得<strong>實際值</strong><code>$actual</code>。</p>
<p><strong>Assert</strong><br>使用PHPUnit的<code>assertEquals()</code>驗證<strong>期望值</strong>與<strong>實際值</strong>是否相同。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  該自己用if else寫測試嗎？</div>
<p>這裡當然可以自己用PHP寫 <code>if ($expected == $actual)</code>判斷，不過因為牽涉到人為的邏輯判斷，當測試錯誤時，很難確定到底是測試有問題，還是我們自己寫的PHP邏輯有問題，所以在測試中<strong>不應該</strong>寫邏輯，而<strong>應該</strong>使用PHPUnit的<code>assertion</code><span class="margin-note-marker"><sup>28</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">28</span>PHPUnit提供很多assertion method，詳細請參考<a href="https://phpunit.de/manual/current/en/appendixes.assertions.html" target="_blank" rel="external">PHPUnit Assertions</a></span></span></span>，因為PHPUnit已經被<code>測試過</code>了，當測試結果有錯時，不用再懷疑是不是測試寫錯，一定是我們的程式寫錯了。</p>
<p>存檔後，會出現第一個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Class Movie not found</code>。<span class="margin-note-marker"><sup>29</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">29</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/1909e6038030b1d00050c3cadfd4224429d0521c" target="_blank" rel="external">第一個測試 : 第一個紅燈</a></span></span></span></p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  The Three Rules of TDD No.1</div>
<blockquote><p>You are not allowed to write any production code unless it is to make a failing unit test pass.</p>
<footer><strong>Uncle Bob</strong><cite>&nbsp;-The Three Rules of TDD</cite></footer></blockquote>
<p>白話就是：你必須先寫測試亮<span class="label label-danger">紅燈</span>之後，才可以寫程式。<span class="margin-note-marker"><sup>30</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">30</span><a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd" target="_blank" rel="external">The Three Rules of TDD</a></span></span></span></p>
<p>目的：</p>
<ol>
<li>先亮<span class="label label-danger">紅燈</span>，表示你已經<strong>先寫了測試</strong>，只是因為沒寫程式所以紅燈。</li>
<li>先亮<span class="label label-danger">紅燈</span>，表示你之前寫的程式沒有<strong>over design</strong>。</li>
</ol>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor026.png" alt=""></p>
<p>測試錯誤訊息告訴我們 : <code>Class Movie not found</code>。因為我們還沒建立<code>Movie</code>。</p>
<p>直接在PhpStorm內建立<code>Movie</code>。<span class="margin-note-marker"><sup>31</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">31</span>將滑鼠游標放在<code>Movie</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Create class</code>，按下可自動建立<code>Movie</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor027.png" alt=""></p>
<p>出現<strong>Create New PHP Class</strong>對話框，選擇目錄在<code>app/VideoRental</code>下，並選擇namespace : <code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor028.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>Movie</code>。</p>
<p>存檔後出現第二個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Class Order not found</code>。<span class="margin-note-marker"><sup>32</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">32</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/0588af6e93320f6b4d5ee79664378d8afb1196b9" target="_blank" rel="external">第一個測試 : 第二個紅燈</a></span></span></span></p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  The Three Rules of TDD No.2</div>
<blockquote><p>You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.</p>
<footer><strong>Uncle Bob</strong><cite>&nbsp;-The Three Rules of TDD</cite></footer></blockquote>
<p>白話就是：測試出現<span class="label label-danger">紅燈</span>之後，你就必須先改程式將<span class="label label-danger">紅燈</span>變成<span class="label label-success">綠燈</span>，而不是寫其他的測試製造更多的<strong>紅燈</strong>。<span class="margin-note-marker"><sup>33</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">33</span><a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd" target="_blank" rel="external">The Three Rules of TDD</a></span></span></span></p>
<p>目的 : </p>
<ol>
<li>將程式<strong>聚焦</strong>在目前的需求，方便程式解決目前的<span class="label label-danger">紅燈</span>。</li>
<li>不會一開始就將架構想的太複雜，造成over design，而枉費我們分拆測試範例。<span class="margin-note-marker"><sup>34</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">34</span>詳細請參考<a href="https://www.facebook.com/91agile" target="_blank" rel="external">91哥</a>的<a href="https://www.dotblogs.com.tw/hatelove/2015/12/14/explanation-the-three-laws-of-tdd" target="_blank" rel="external">The Three Laws of TDD - 從紅燈變綠燈的過程</a></span></span></span></li>
</ol>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor033.png" alt=""></p>
<p>測試錯誤訊息告訴我們 : <code>Order not found</code>。因為我們還沒建立<code>Order</code>。</p>
<p>直接在PhpStorm內建立<code>Order</code>。<span class="margin-note-marker"><sup>35</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">35</span>將滑鼠游標放在<code>Order</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Create class</code>，按下可自動建立<code>Order</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor029.png" alt=""></p>
<p>出現<strong>Create New PHP Class</strong>對話框，選擇目錄在<code>app/VideoRental</code>下，並選擇namespace : <code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor030.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>Order</code>。</p>
<p>存檔後出現第三個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Class Customer not found</code>。<span class="margin-note-marker"><sup>36</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">36</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/a7d01365221e77eaa6c1e667635313534eb18712" target="_blank" rel="external">第一個測試 : 第三個紅燈</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  不要因為在測試時看到<strong>紅燈</strong>而沮喪</div>
<p>事實上TDD的開發流程本來就是先有<span class="label label-danger">紅燈</span>才去寫程式，這也是TDD能解決<strong>over design</strong>的關鍵，因為測試案例的<strong>紅燈</strong>來自於<strong>需求</strong>，由<span class="label label-danger">紅燈</span>變成<span class="label label-success">綠燈</span>就是<strong>解決需求</strong>，若沒有<span class="label label-danger">紅燈</span>而直接<span class="label label-success">綠燈</span>，就表示程式有<strong>over design</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor034.png" alt=""></p>
<p>測試錯誤訊息告訴我們 : <code>Class Customer not found</code>。因為我們還沒建立<code>Customer</code>。</p>
<p>直接在PhpStorm內建立<code>Customer</code>。<span class="margin-note-marker"><sup>37</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">37</span>將滑鼠游標放在<code>Customer</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Create class</code>，按下可自動建立<code>Customer</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor031.png" alt=""></p>
<p>出現<strong>Create New PHP Class</strong>對話框，選擇目錄在<code>app/VideoRental</code>下，並選擇namespace : <code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor032.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>Customer</code>。</p>
<p>存檔後出現第四個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Call to undefined method VideoRental\Customer::addOrder()</code>。<span class="margin-note-marker"><sup>38</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">38</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/e67cd66246e4feae03a3c81d6134bfb9b00ec0e1" target="_blank" rel="external">第一個測試 : 第四個紅燈</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor035.png" alt=""></p>
<p>測試錯誤訊息告訴我們 : <code>Call to undefined method VideoRental\Customer::addOrder()</code>。因為我們還沒建立<code>addOrder()</code>。</p>
<p>直接在PhpStorm內建立<code>addOrder()</code>。<span class="margin-note-marker"><sup>39</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">39</span>將滑鼠游標放在<code>addOrder()</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method</code>，按下可自動建立<code>addOrder()</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor036.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>addOrder()</code>。</p>
<p>存檔後出現第五個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Call to undefined method VideoRental\Customer::calculateTotalPrice()</code>。<span class="margin-note-marker"><sup>40</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">40</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/22b2252f197b760834a8d0271339ec9212e85a78" target="_blank" rel="external">第一個測試 : 第五個紅燈</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor037.png" alt=""></p>
<p>測試錯誤訊息告訴我們 : <code>Call to undefined method VideoRental\Customer::calculateTotalPrice()</code>。因為我們還沒建立<code>calculateTotalPrice()</code>。</p>
<p>直接在PhpStorm內建立<code>calculateTotalPrice()</code>。<span class="margin-note-marker"><sup>41</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">41</span>將滑鼠游標放在<code>calculateTotalPrice()</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method</code>，按下可自動建立<code>calculateTotalPrice()</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor038.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>calculateTotalPrice()</code>。</p>
<p>存檔後出現第六個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Failed asserting that null matches expected 130</code>。<span class="margin-note-marker"><sup>42</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">42</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/6dcf3d7d431828ddc9f19a5c02d8c38ceedbac94" target="_blank" rel="external">第一個測試 : 第六個紅燈</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor039.png" alt=""></p>
<p>既然測試要求<code>130</code>，我們就直接很<strong>無恥</strong>的回傳<code>130</code>。</p>
<p>這樣我們就獲得了第一個測試的第一個綠燈。<span class="margin-note-marker"><sup>43</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">43</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/ba302b5ba8d122276bf532cd72acb303e25b1e59" target="_blank" rel="external">第一個測試 : 第一個綠燈</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  直接使用return也太無恥了吧!!</div>
<p>第一個測試為了剛好符合第一個測試案例的需求，我們可以先<strong>無恥</strong>的使用return方式，反正接下來的測試案例我們自然會重構。</p>
<h3 id="第二個測試">第二個測試</h3><p>第二種測試方式 : <strong>在命令列執行<code>vendor/bin/phpunit</code></strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor041.png" alt=""></p>
<p>將第一個測試<code>test_order_1_regular_movie_with_10_days()</code>複製貼上，改成第二個測試<code>test_order_1_new_release_movie_with_5_days()</code>。<span class="margin-note-marker"><sup>44</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">44</span>不用擔心在test code使用<strong>複製貼上</strong>，test code不用擔心duplicated code問題，只有production code才必須考慮。</span></span></span></p>
<p>先在命令列使用&#8963; + C結束<code>gulp tdd</code>，然後執行<code>vendor/bin/phpunit</code>執行測試。</p>
<p>實務上可以在PHPDoc加上<code>@group</code>標籤為test method分類，如誰寫的測試，哪一個class的測試，方便<code>vendor/bin/phpunit</code>執行時只跑該group。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor042.png" alt=""></p>
<p>執行測試後，出現第二個測試案例的第一個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Failed asserting that 130 matches expected 210</code>。<span class="margin-note-marker"><sup>45</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">45</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/7a58b7e2bfbee5b34e3e02d4f585596b132ba190" target="_blank" rel="external">第二個測試 : 第一個紅燈</a></span></span></span></p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  別忘了Uncle Bob的叮嚀，每個測試案例都要先出現第一個<span class="label label-danger">紅燈</span>，若一開始就出現<span class="label label-success">綠燈</span>，表示你之前程式有over design了。</div>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor043.png" alt=""></p>
<p>之前我們只新增了<code>addOrder()</code>，並還沒有填入程式。</p>
<p>宣告一個<code>$orders</code>陣列，並將<code>$order</code>push進<code>$orders</code>。<span class="margin-note-marker"><sup>46</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">46</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/980f01a9538f7dc35ee86bcc1a159ab2831c68de" target="_blank" rel="external">第二個測試 : 補齊Customer-&gt;addOrder()</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor044.png" alt=""></p>
<p>由於將來<code>calculateTotalPrice()</code>也要使用<code>$orders</code>陣列，因此我們想將<code>$orders</code>從method內的變數變成class的field。<span class="margin-note-marker"><sup>47</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">47</span>將滑鼠游標放在<code>$orders</code>之後，按&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Extract Field…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor045.png" alt=""></p>
<p>出現兩種重構方式，選擇第一種 : <code>$orders</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor047.png" alt=""></p>
<p>出現<strong>Introduce field</strong>對話框，預設field已經幫我們填入<code>orders</code>。</p>
<p>可以自行選擇<code>Initialize in</code>與<code>Visibility</code>的方式。</p>
<p>這裡我們選擇<code>Field declaration</code>，也就是會直接在field宣告時初始化陣列。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor048.png" alt=""></p>
<p>如我們所願，宣告成<code>protected $orders = []</code>。</p>
<p>並且push部分也自動改成field。<span class="margin-note-marker"><sup>48</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">48</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/c8c9e8d1d360e2fa3ae8db127479eed8f8164de3" target="_blank" rel="external">第二個測試：Customer-&gt;addOrder()將$orders重構成field</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor049.png" alt=""></p>
<p>由於需求是<code>計算一位顧客所有訂單的金額</code>，所以勢必有<code>$totalPrice</code>變數負責累加，然後需要一個<code>foreach</code>將整個<code>$orders</code>loop一次，計算每種影片種類的金額。</p>
<p>以Top Down的方式思考，由於我們現在是在<code>Order</code> class，所以必須透過<code>getMovie()</code>傳回<code>Movie</code>物件，並透過其<code>getType()</code> method傳回<strong>影片種類</strong>，然後將計費方式的演算法寫在裡面。<span class="margin-note-marker"><sup>49</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">49</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/ade44e32f10da6f2b77d3a0ffb391396fb376d5f" target="_blank" rel="external">第二個測試 : 補齊Customer-&gt;calculateTotalPrice()的Regular計算方式</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor050.png" alt=""></p>
<p>執行測試後，出現第二個測試案例的第二個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Call to undefined method VideoRental\Order::getMovie()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor051.png" alt=""></p>
<p>錯誤訊息告訴我們 : <code>Call to undefined method VideoRental\Order::getMovie()</code>，因為我們還沒建立<code>getMovie()</code>。</p>
<p>直接在PhpStorm內建立<code>getMovie()</code>。<span class="margin-note-marker"><sup>50</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">50</span>將滑鼠游標放在<code>getMovie()</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method</code>，按下可自動建立<code>getMovie()</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor052.png" alt=""></p>
<p>出現<code>Can not find target class for modification</code>的錯誤訊息，因為PhpStorm無法得知<code>$order</code>變數的型別，因此不知道要將<code>getMovie()</code>建立在哪一個class。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor053.png" alt=""></p>
<p>加上註解描述<code>$order</code>的型別為<code>Order</code>。<span class="margin-note-marker"><sup>51</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">51</span>這種寫法雖然可行，但不是最漂亮的寫法，最漂亮的寫法應該是直接在field註解型別，也就使在<code>protected $order = []</code>之前直接<code>@var Order[]</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor054.png" alt=""></p>
<p>之後PhpStorm就會自動在<code>Order</code>建立<code>getMovie()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor055.png" alt=""></p>
<p>由於<code>getMovie()</code>的<code>$movie</code>來自於field，因此在constructor先將參數補全。</p>
<p>由於我們對constructor加了參數，因此出現了<code>Argument PHPDoc missing</code>的警告。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor056.png" alt=""></p>
<p>使用PhpStorm幫我們補齊PHPDoc。<span class="margin-note-marker"><sup>52</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">52</span>將滑鼠游標放在<code>int $days</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Update PHPDoc Comment</code>，按下可自動將參數新增至PHPDoc。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor057.png" alt=""></p>
<p>PhpStorm幫我們將新的參數註解加入了PHPDoc，將原來的參數註解改成<code>@internal</code>，這顯然是多餘的。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor058.png" alt=""></p>
<p>刪除多餘的<code>@internal</code>註解。<br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor059.png" alt=""></p>
<p>使用PhpStorm幫我們建立field。<span class="margin-note-marker"><sup>53</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">53</span>將滑鼠游標放在<code>int $days</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Initialize fields</code>，按下可自動將constructor參數新增成field。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor060.png" alt=""></p>
<p>選擇所要建立field的參數。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor061.png" alt=""></p>
<p>PhpStorm自動幫我們宣告field，並在contructor自動加上初始化的程式。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor062.png" alt=""></p>
<p>回到<code>getMovie()</code>，除了加上<code>return $this-&gt;movie</code>之外，還補上了回傳型別<code>Movie</code>。</p>
<p>使用PhpStorm自動幫我們加上<code>getMovie()</code>註解。<span class="margin-note-marker"><sup>54</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">54</span>將滑鼠游標放在<code>Movie</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Generate PHPDoc for function</code>，按下可自動替<code>getMovie()</code>產生註解。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor063.png" alt=""></p>
<p>在註解第一行加上人看得懂的註解。<span class="margin-note-marker"><sup>55</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">55</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/afe5ea8ecea60a562875e2a61a6ba4b93fbd8603" target="_blank" rel="external">第二個測試 : 補齊Order-&gt;getMovie()</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor064.png" alt=""></p>
<p> 執行測試後，出現第二個測試案例的第三個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Call to undefined method ViderRental\Movie::getType()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor066.png" alt=""></p>
<p>錯誤訊息告訴我們 : <code>Call to undefined method ViderRental\Movie::getType()</code>，因為我們還沒建立<code>getType()</code>。</p>
<p>直接在PhpStorm內建立<code>getType()</code>。<span class="margin-note-marker"><sup>56</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">56</span>將滑鼠游標放在<code>getType()</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method</code>，按下可自動建立<code>getType()</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor065.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>getType()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor067.png" alt=""></p>
<p>由於<code>getType()</code>的<code>$type</code>來自於field，因此在constructor先將參數補全。</p>
<p>由於我們對constructor加了參數，因此出現<code>Argument PHPDoc missing</code>的警告。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor068.png" alt=""></p>
<p>使用PhpStorm幫我們補齊PHPDoc。<span class="margin-note-marker"><sup>57</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">57</span>將滑鼠游標放在<code>$type</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Update PHPDoc Comment</code>，按下可自動將參數新增至PHPDoc。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor069.png" alt=""></p>
<p>PhpStorm幫我們將新的參數註解加入了PHPDoc，將原來的參數改成<code>@internal</code>，這顯然是多餘的。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor070.png" alt=""></p>
<p>刪除多餘的<code>@internal</code>註解。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor071.png" alt=""></p>
<p>使用PhpStorm幫我們建立field。<span class="margin-note-marker"><sup>58</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">58</span>將滑鼠游標放在<code>string $type</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Initialize fields</code>，按下可自動將constructor參數新增成field。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor072.png" alt=""></p>
<p>選擇所要建立field的參數。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor073.png" alt=""></p>
<p>PhpStorm自動幫我們宣告field，並在contructor自動加上初始化的程式。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor074.png" alt=""></p>
<p>回到<code>getType()</code>，補上了回傳型別<code>string</code>。</p>
<p>使用PhpStorm自動幫我們加上<code>getType()</code>註解。<span class="margin-note-marker"><sup>59</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">59</span>將滑鼠游標放在<code>string</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Generate PHPDoc for function</code>，按下可自動替<code>getType()</code>產生註解。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor075.png" alt=""></p>
<p>加上<code>return $this-&gt;type</code>。</p>
<p>在註解第一行加上人看得懂的註解。<span class="margin-note-marker"><sup>60</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">60</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/86e838dc3e42ae07cdc645b37b71c76367a1cdff" target="_blank" rel="external">第二個測試：補齊Order-&gt;getType()</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor076.png" alt=""></p>
<p>執行測試後，出現第二個測試案例的第四個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Call to undefined method VideoRental\Order::getDays()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor077.png" alt=""></p>
<p>錯誤訊息告訴我們 : <code>Call to undefined method VideoRental\Order::getDays()</code>，因為我們還沒建立<code>getDays()</code>。</p>
<p>直接在PhpStorm內建立<code>getDays()</code>。<span class="margin-note-marker"><sup>61</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">61</span>將滑鼠游標放在<code>getDays()</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method</code>，按下可自動建立<code>getDays()</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor078.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>getDays()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor079.png" alt=""></p>
<p>之前已經建立好<code>$days</code> field，所以可以直接<code>return $this-&gt;days</code>，並加上註解。<span class="margin-note-marker"><sup>62</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">62</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/cbf036f75148c94bf87618687451b3ba820ad3db" target="_blank" rel="external">第二個測試：補齊Order-&gt;getDays()</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor080.png" alt=""></p>
<p>執行測試後，出現第二個測試案例的第五個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Failed asserting that 0 matches expected 210</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor081.png" alt=""></p>
<p>錯誤訊息告訴我們 : <code>Failed asserting that 0 matches expected 210</code>，因為我們還沒寫<code>NewRelease</code>的計費方式的演算法。</p>
<p>補上<code>NewRelease</code>的計費方式演算法。</p>
<p>這樣我們就獲得了第二個測試的第一個綠燈。<span class="margin-note-marker"><sup>63</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">63</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/c41afb2986be6d4b67090426a7755da646472ec8" target="_blank" rel="external">第二個測試 : 第一個綠燈</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  其實Children的計費方式也蠻接近的，我就順便elseif將Children補上好了!!</div>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  The Three Rules of TDD No.3</div>
<blockquote><p>You are not allowed to write any more production code than is sufficient to pass the one failing unit test.</p>
<footer><strong>Uncle Bob</strong><cite>&nbsp;-The Three Rules of TDD</cite></footer></blockquote>
<p>白話就是：若沒有<strong>測試案例</strong>，就不要自作聰明去寫程式。<span class="margin-note-marker"><sup>64</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">64</span><a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd" target="_blank" rel="external">The Three Rules of TDD</a></span></span></span></p>
<p>目的 : </p>
<ol>
<li>避免<strong>over design</strong>，導致系統提早無謂的複雜。</li>
<li>將來若有新的測試案例，到時候再<strong>重構</strong>就好，不用現在去擔心。</li>
</ol>
<h3 id="第三個測試">第三個測試</h3><p>第三種測試方式 : <strong>直接在PhpStorm測試</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor082.png" alt=""></p>
<p>將第一個測試<code>test_order_1_regular_movie_with_10_days()</code>複製貼上，改成第三個測試<code>test_order_1_children_movie_with_8_days()</code>。<span class="margin-note-marker"><sup>65</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">65</span>不用擔心在test code使用<strong>複製貼上</strong>，test code不用擔心duplicated code問題，只有production code才必須考慮。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor083.png" alt=""></p>
<p>直接在PhpStorm執行測試。<span class="margin-note-marker"><sup>66</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">66</span>在左側選擇<code>CustomerTest.php</code>，按熱鍵&#8963; + &#8679; + R。</span></span></span></p>
<p>我們發現前兩個測試案例都是<span class="label label-success">綠燈</span>，只有第三個測試案例是<span class="label label-danger">紅燈</span>。</p>
<p>這是第三個測試案例的第一個<span class="label label-danger">紅燈</span>，錯誤訊息為<code>Failed asserting that 130 matches expected 210</code>。<span class="margin-note-marker"><sup>67</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">67</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/a041e0d318e7f7e7d16689662ac22bc0d1221977" target="_blank" rel="external">第三個測試 : 第一個紅燈</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor084.png" alt=""></p>
<p>錯誤訊息告訴我們 : <code>Failed asserting that 130 matches expected 210</code>，因為我們還沒寫<code>Childer</code>的計費方式演算法。</p>
<p>補上<code>Children</code>的計費方式演算法。</p>
<p>這樣我們就獲得了第三個測試案例的第一個<span class="label label-success">綠燈</span>。<span class="margin-note-marker"><sup>68</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">68</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/0b76208d1e94bbe1347fbf92166735c0b6692941" target="_blank" rel="external">第三個測試 : 第一個綠燈</a></span></span></span></p>
<h2 id="重構-1">重構</h2><hr>
<p>3個測試案例都通過，代表程式基本上已經符合Spec要求，可以即時交付程式。</p>
<p>但是符合Spec的程式並不代表這是<strong>好的程式</strong>，一個好的程式至少要符合5個要求：</p>
<ol>
<li>容易維護。</li>
<li>容易新增功能。</li>
<li>容易重複使用。</li>
<li>容易寫測試。</li>
<li>容易上Git，不易與其他人發生衝突。</li>
</ol>
<p>若更簡單的說，就是要符合<strong>SOLID</strong>原則的程式，才算是好程式。</p>
<p>接下來我們將使用<strong>重構</strong>，將目前的程式調整成符合<strong>SOLID</strong>原則的好程式。</p>
<h3 id="if_else改成switch">if else改成switch</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor168.png" alt=""></p>
<p>在<code>Customer</code>的<code>calculateTotalPrice()</code>，有個<code>if...elseif</code>，因為都是判斷<code>$order-&gt;getMovie()-&gt;getType()</code>，將<code>if...elseif</code>改成<code>switch</code>，會讓程式碼比較容易閱讀。<span class="margin-note-marker"><sup>69</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">69</span>這並不是<strong>重構</strong>這本書所談的重構手法，不過<code>switch</code>的確比<code>if...elseif</code>容易閱讀，所以實務上也常常會將<code>if...elseif</code>重構成<code>switch</code>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor085.png" alt=""></p>
<p>重構成<code>switch</code>之後，馬上跑測試，確認<strong>重構</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>70</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">70</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/17a116a80867482da508d9c8a2c015b269bd3eaf" target="_blank" rel="external">重構 : if else改switch</a></span></span></span></p>
<h3 id="Extract_Method">Extract Method</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor086.png" alt=""></p>
<p>改成<code>switch</code>之後，雖然程式碼已經比較容易閱讀了，但是在<code>calculateTotalPrice()</code>內還是顯得很臃腫，因此想使用<strong>重構</strong>的<strong>Extract Method</strong>將此<code>switch</code>重構成一個<code>method</code>。<span class="margin-note-marker"><sup>71</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">71</span>使用滑鼠選擇想要重構的程式碼，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Extract Method…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor087.png" alt=""></p>
<p>出現<strong>Extract Method</strong>對話框，輸入重構後method名稱與選擇Visibility。</p>
<p>還可以選擇回傳值的處理方式，可以是<code>return</code>，也可以是<code>pass by reference</code>。</p>
<p>最後對於<code>switch</code>的處理方式，可以選擇在<code>case</code>內直接<code>return</code>，還是最後一起<code>return</code>，這裡選擇每個<code>case</code>內直接<code>return</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor088.png" alt=""></p>
<p>重構之後，PhpStorm會自動幫你建立<code>calculatePrice()</code>，且原來程式也幫你自動呼叫<code>calculatePrice()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor089.png" alt=""></p>
<p>馬上跑測試，確認PhpStorm的<strong>Extract Method</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>72</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">72</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/c7ec6a41092a59c4c9b283c3859a08c8fb7900c0" target="_blank" rel="external">重構 : Extract Method (switch -&gt; Customer-&gt;calculatePrice())</a></span></span></span></p>
<h3 id="Inline">Inline</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor090.png" alt=""></p>
<p>經過<strong>Extract Method</strong>重構之後，我們發現<code>$price</code>這個暫存變數沒有存在的價值了。可使用<strong>重構</strong>的<strong>Inlilne</strong>將此暫存變數移除。<span class="margin-note-marker"><sup>73</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">73</span>將滑鼠游標放在<code>$price</code>之後，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Inline…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor091.png" alt=""></p>
<p>PhpStorm會詢問你是否將所有的<code>$price</code>變數都inline。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor092.png" alt=""></p>
<p>Inline之後，程式就變成我們所預期的只有一行。</p>
<p>馬上跑測試，確認PhpStorm的<strong>Inline</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>74</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">74</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/7847894ea3ee56999834ff20c27d67cd05efac5c" target="_blank" rel="external">重構 : Inline</a></span></span></span></p>
<h3 id="Move_Method">Move Method</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor169.png" alt=""></p>
<p>經過重構產生的<code>calculatePrice()</code>，但程式內卻一直使用<code>$order</code>物件的method，看起來<code>calculatePrice()</code>不應該放在<code>Customer</code>內，而應該放在<code>Order</code>內。<br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor093.png" alt=""></p>
<p>使用<strong>重構</strong>的<strong>Move Method</strong>將<code>calculatePrice()</code>從<code>Customer</code>搬到<code>Order</code>內。<span class="margin-note-marker"><sup>75</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">75</span>將滑鼠游標放在<code>calculatePrice</code>之後，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Move…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor094.png" alt=""></p>
<p>出現<code>Move non-static method is not supported</code>錯誤訊息，也就是PhpStorm目前只能支援將對<code>static method</code>進行<strong>重構</strong>的<strong>Move Method</strong>，而一般<code>method</code>不支援。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor095.png" alt=""></p>
<p>因為PhpStorm目前僅支援<code>static method</code>的<strong>Move Method</strong>，因此先暫時將<code>calculatePrice()</code>改成<code>static method</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor096.png" alt=""></p>
<p>重新對<code>calculatePrice()</code>執行<strong>重構</strong>的<strong>Move Method</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor097.png" alt=""></p>
<p>出現<strong>Move Static Member</strong>對話框，因為我們要將<code>calculatePrice()</code>搬到<code>Order</code>，要連namespace一起輸入。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor098.png" alt=""></p>
<p>重構之後，因為<code>calculatePrice()</code>已經變成<code>static method</code>，原來的<code>calculateTotalPrice()</code>內是使用<code>$this-&gt;calculatePrice($order)</code>，已經被PhpStorm重構成<code>Order::calculatePrice($order)</code>。</p>
<p>但這顯然不是我們要的。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor099.png" alt=""></p>
<p>將<code>Order::</code>改成<code>$order-&gt;</code>。<span class="margin-note-marker"><sup>76</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">76</span>加上註解描述<code>$order</code>的型別為<code>Order</code>這種寫法雖然可行，但不是最漂亮的寫法，最漂亮的寫法應該是直接在field註解型別，也就使在<code>protected $order = []</code>之前直接<code>@var Order[]</code>，之後所有的<code>foreach</code>內都不用再加上註釋。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor100.png" alt=""></p>
<p>PhpStorm雖然已經幫我們把<code>calculatePrice()</code>搬到<code>Order</code>，但顯然<code>static</code>是多餘的，且因為已經在<code>Order</code>，所以不需再傳入<code>$order</code>了。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor101.png" alt=""></p>
<p>將<code>static</code>刪除。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor102.png" alt=""></p>
<p>因為已經搬到<code>Order</code>，所以如<code>getMovie()</code>與<code>getDays()</code>都不在需要<code>$order</code>，而是需要改成<code>$this</code>。</p>
<p>使用<strong>重構</strong>的<strong>Rename</strong>，將<code>$order</code>改成<code>$this</code>。<span class="margin-note-marker"><sup>77</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">77</span>將滑鼠游標放在<code>$order</code>之後，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Rename…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor103.png" alt=""></p>
<p>將全部的<code>$order</code>都改成<code>$this</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor104.png" alt=""></p>
<p>剛才我們只是借用<strong>重構</strong>的<strong>Rename</strong>將<code>$order</code>改成<code>$this</code>，事實上<code>calculatePrice()</code>根本不需要任何參數，將<code>Order $this</code>刪除。</p>
<p>馬上跑測試，確認PhpStorm的<strong>Rename</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>78</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">78</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/05adad763fc534f81400880f8bbf98168e90bf66" target="_blank" rel="external">重構 : Move Method : Order-&gt;calculatePrice()</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor105.png" alt=""></p>
<p>在剛剛重構產生的<code>Order</code>的<code>calculatePrice()</code>內，我們發現<code>switch</code>竟然是去判斷<code>Movie</code>的<code>getType()</code>，這是不合理的，似乎暗示著應該將這個<code>switch</code>判斷搬到<code>Movie</code>內。<span class="margin-note-marker"><sup>79</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">79</span>使用滑鼠選擇想要重構的程式碼，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Extract Method…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor106.png" alt=""></p>
<p>出現<strong>Extract Method</strong>對話框，原本我們是想將此<code>switch</code>重構成<code>Movie</code>的<code>calculatePrice()</code>，但PhpStorm的<strong>Extract Method</strong>無法跨class，我們只好先<strong>Extract Method</strong>在<code>Order</code>內，然後再使用<strong>Move Method</strong>搬到<code>Movie</code>。</p>
<p>因為同一個class不能存在兩個<code>calculatePrice()</code>，因此先取名為<code>MovieCalculatePrice()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor107.png" alt=""></p>
<p>使用<strong>Move Method</strong>將<code>MovieCalculatePrice()</code>搬到<code>Movie</code>。</p>
<p>因為目前PhpStorm只支援<code>static method</code>的<strong>Movie Method</strong>，因此先改成<code>static</code>。<span class="margin-note-marker"><sup>80</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">80</span>將滑鼠游標放在<code>MovieCalculatePrice</code>之後，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Move…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor108.png" alt=""></p>
<p>出現<strong>Move Static Member</strong>對話框，因為我們要將<code>MovieCalculatePrice()</code>搬到<code>Movie</code>，要連namespace一起輸入。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor109.png" alt=""></p>
<p>重構之後，因為<code>MovieCalculatePrice()</code>已經變成<code>static method</code>，原來的<code>calculatePrice()</code>內是使用<code>$this-&gt;MovieCalculatePrice()</code>，已經被PhpStorm重構成<code>Movie::MovieCalculatePrice()</code>。</p>
<p>但這顯然不是我們要的。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor110.png" alt=""></p>
<p>將<code>Movie::MovieCalculatePrice()</code>改成<code>$this-&gt;getMovie()-&gt;calculatePrice()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor111.png" alt=""></p>
<p>PhpStorm雖然已經幫我們把<code>MovieCalculatePrice()</code>搬到<code>Movie</code>，但顯然<code>static</code>是多餘的。</p>
<p>且<code>$this-&gt;getMovie()</code>也不需要了，因為已經在<code>Movie</code>內，改用<code>$this</code>就好。</p>
<p><code>$this-&gt;getDays()</code>則比較麻煩，因為這原本是<code>Order-&gt;getDays()</code>，現在搬到Movie之後，勢必要靠參數從<code>Order</code>傳進來。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor112.png" alt=""></p>
<p>將<code>static</code>刪除。</p>
<p>將<code>$this-&gt;getMovie()</code>改成<code>$this</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor113.png" alt=""></p>
<p>我們是希望將<code>$this-&gt;getDays()</code>能<strong>Extract Parameter</strong>，不過目前在PhpStorm無法將一個method直接<strong>Extract Parameter</strong>，需要透過一些技巧。</p>
<p>先使用PhpStorm將<code>$this-&gt;getDays()</code>透過<strong>Extract Variable</strong>成變數。<span class="margin-note-marker"><sup>81</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">81</span>選擇<code>$this-&gt;getDays()</code>，按熱鍵&#8963; + T，會出現PhpStorm所有的<strong>重構</strong>選單，選擇<strong><em>Extract Variable…</em></strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor114.png" alt=""></p>
<p>出現<strong>Introduce variable</strong>對話框，我們希望重構成<code>$days</code>變數。</p>
<p>將<code>Replace all occurrences</code>打勾，我們打算將全部的<code>$this-&gt;getDays()</code>都取代。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor115.png" alt=""></p>
<p>我們看到<code>$this-&gt;getDays()</code>已經全部被<code>$days</code>所取代。</p>
<p>但<code>$days = $this-&gt;getDays()</code>顯然是多餘的。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor116.png" alt=""></p>
<p>將<code>$days = $this-&gt;getDays()</code>刪除。</p>
<p>加上<code>int $days</code>參數，並加上註解。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor117.png" alt=""></p>
<p>由於多了<code>int $days</code>參數，因此在<code>Order-&gt;calculatePrice()</code>要多傳<code>$this-&gt;getDays()</code>進來。</p>
<p>馬上跑測試，確認PhpStorm沒將程式改壞掉。<span class="margin-note-marker"><sup>82</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">82</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/24c5b86e246690a8d6717974ab3dd3a9a4bef43d" target="_blank" rel="external">重構 : Move Method : Movie-&gt;calculatePrice()</a></span></span></span></p>
<h3 id="Replace_Type_Code_with_State/Stratgey">Replace Type Code with State/Stratgey</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor170.png" alt=""></p>
<p>在<strong>重構</strong>的技巧中，有一招叫做<strong>Replace Type Code with State/Strategy</strong>，簡單的說，當你的程式會使用<code>switch</code>對同一個變數去做判斷時，可以改用物件導向的<strong>多型</strong>來處理，或者更白話的說，改用<strong>設計模式</strong>的<strong>State模式</strong>或<strong>Strategy模式</strong>去處理。</p>
<p>這樣的好處是會使你的程式符合<strong>SOLID</strong>的<strong>開放封閉原則</strong>，將來若新的需求要新增，將不用去改原來程式的<code>switch</code>，只要去新增class即可。<span class="margin-note-marker"><sup>83</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">83</span><strong>開放封閉原則</strong> : 軟體中的類別、函式對於擴展是開放的，對於修改是封閉的。</span></span></span></p>
<h3 id="Self_Encapsulate_Field">Self Encapsulate Field</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor118.png" alt=""></p>
<p>我們即將重構成<strong>State模式</strong>，因為<strong>State模式</strong>會將變化抽象化成一個<strong>物件</strong>，也就是需要將原本的字串，如<code>Regular</code>、<code>NewRelease</code>、<code>Children</code>最後抽象化成<strong>物件</strong>，因此<strong>重構</strong>教我們要使用<strong>Replace Type Code with State/Strategy</strong>前，先執行另一招重構 : <strong>Self Encapsulate Field</strong>。</p>
<p><strong>Self Encapsulate Field</strong>簡單的說，就是將field全部改用<code>setter</code>的方式寫入，這樣我們就可以在<code>setter</code>內將<strong>字串</strong>抽象化成<strong>物件</strong>。<span class="margin-note-marker"><sup>84</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">84</span>將滑鼠游標放在<code>$type</code>之後，按熱鍵&#8984; + N，會出現<code>Generate</code>選單，選擇<code>Setters</code>，可幫我們自動建立<code>$type</code>的setter。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor119.png" alt=""></p>
<p>選擇所要建立setter的field。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor120.png" alt=""></p>
<p>PhpStorm自動幫我們加上<code>$type</code>的setter : <code>setType()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor121.png" alt=""></p>
<p>將setType()的參數加上type hint。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor122.png" alt=""></p>
<p>建立setter只是<strong>Self Encapsulate Field</strong>的第一步，接下來就將程式所有地方改用setter去寫入<code>$type</code> field。<span class="margin-note-marker"><sup>85</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">85</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/3f0729de0f88c44dc4679e780809421eb5369072" target="_blank" rel="external">重構 : Self Encapsulate Field</a></span></span></span></p>
<h3 id="將變化封裝在class">將變化封裝在class</h3><p><strong>State模式</strong>會將變化封裝在class內，也就是以物件導向的<strong>多型</strong>取代<code>switch</code>，無論將來怎麼變化，對使用者看起來都是相同的<code>abstract class</code>。</p>
<p><strong>建立Abstract Class</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor123.png" alt=""></p>
<p>在<code>VideoRental</code>目錄下建立<code>AbstractMovieType</code>。<span class="margin-note-marker"><sup>86</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">86</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor124.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>AbstractMovieType</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor125.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>AbstractMovieType</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor126.png" alt=""></p>
<p>因為我們要建立的是abstract class，所以在class前面加上<code>abstract</code>。</p>
<p>另外定義一個abstract method : <code>calculatePrice()</code>。<span class="margin-note-marker"><sup>87</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">87</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/6c746df7b7486505520b9b8f9e7cfe9d07577b46" target="_blank" rel="external">重構 : 建立AbstractMovieType</a></span></span></span></p>
<p><strong>建立RegularMovieType Class</strong></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor127.png" alt=""></p>
<p>接著我們要將各種影片類型的計費方式，封裝在class內。</p>
<p>新增<code>RegularMovieType</code>，負責<strong>普通片</strong>的計費方式。<span class="margin-note-marker"><sup>88</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">88</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor128.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>RegularMovieType</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor129.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>RegularMovieType</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor130.png" alt=""></p>
<p>繼承<code>AbstractMovieType</code>，使用PhpStorm幫我們建立abstract class所定義的method。<span class="margin-note-marker"><sup>89</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">89</span>將滑鼠游標放在<code>AbstractMovieType</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method stubs</code>，按下可自動根據所繼承的<code>abstract class</code>建立method。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor131.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>calculatePrice()</code>，連註解也會一併建立。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor132.png" alt=""></p>
<p>將原本在<code>Movie-&gt;calculatePrice()</code>內的<strong>普通片</strong>計費方式<strong>剪下</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor133.png" alt=""></p>
<p>貼到<code>RegularMovieType</code>的<code>calculatePrice()</code>內。</p>
<p>直接將<code>$price</code>的初始值指定為<code>100</code>即可。<span class="margin-note-marker"><sup>90</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">90</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/19bdc0e9380da49ca6d90f54e3f2c4d0490cbe2e" target="_blank" rel="external">重構 : 建立RegularMovieType</a></span></span></span></p>
<p><strong>建立NewReleaseMovieType Class</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor134.png" alt=""></p>
<p>新增<code>NewReleaseMovieType</code>，負責<strong>新片</strong>的計費方式。<span class="margin-note-marker"><sup>91</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">91</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor135.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>NewReleaseMovieType</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor136.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>NewReleaseMovieType</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor137.png" alt=""></p>
<p>繼承<code>AbstractMovieType</code>，使用PhpStorm幫我們建立abstract class所定義的method。<span class="margin-note-marker"><sup>92</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">92</span>將滑鼠游標放在<code>AbstractMovieType</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method stubs</code>，按下可自動根據所繼承的<code>abstract class</code>建立method。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor138.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>calculatePrice()</code>，連註解也會一併建立。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor139.png" alt=""></p>
<p>將原本在<code>Movie-&gt;calculatePrice()</code>內的<strong>新片</strong>計費方式<strong>剪下</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor140.png" alt=""></p>
<p>貼到<code>NewReleaseMovieType</code>的<code>calculatePrice()</code>內。</p>
<p>直接將<code>$price</code>的初始值指定為<code>150</code>即可。<span class="margin-note-marker"><sup>93</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">93</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/ebf4d2057d46625018058426d9cf2b03c21151fc" target="_blank" rel="external">重構 : 建立NewReleaseMovieType</a></span></span></span></p>
<p><strong>建立ChildrenMovieType Class</strong></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor141.png" alt=""></p>
<p>新增<code>ChildrenMovieType</code>，負責<strong>兒童片</strong>的計費方式。<span class="margin-note-marker"><sup>94</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">94</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor142.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>ChildrenMovieType</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor143.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>ChildrenMovieType</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor144.png" alt=""></p>
<p>繼承<code>AbstractMovieType</code>，使用PhpStorm幫我們建立abstract class所定義的method。<span class="margin-note-marker"><sup>95</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">95</span>將滑鼠游標放在<code>AbstractMovieType</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method stubs</code>，按下可自動根據所繼承的<code>abstract class</code>建立method。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor145.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>calculatePrice()</code>，連註解也會一併建立。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor146.png" alt=""></p>
<p>將原本在<code>Movie-&gt;calculatePrice()</code>內的<strong>兒童片</strong>計費方式<strong>剪下</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor147.png" alt=""></p>
<p>貼到<code>ChildrenMovieType</code>的<code>calculatePrice()</code>內。</p>
<p>直接將<code>$price</code>的初始值指定為<code>40</code>即可。<span class="margin-note-marker"><sup>96</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">96</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/12b737c2e5c9cd4c98557aa01fdff20b84663bc5" target="_blank" rel="external">重構 : 建立ChildrenMovieType</a></span></span></span></p>
<p><strong>重構setType()</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor148.png" alt=""></p>
<p>之前的<code>setType()</code>只是單純的<code>$type</code> field的setter，不過使用<strong>State模式</strong>之後，<code>setType()</code>的角色就有了改變，不再只是單存的setter，而是要建立適當的<code>AbstractMovieType</code>物件。</p>
<p>將<code>calculatePrice()</code>剩下的<code>switch</code><strong>剪下</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor149.png" alt=""></p>
<p>貼到<code>setType()</code>內。</p>
<p>將<code>$this-&gt;getType()</code>改成<code>$type</code>。</p>
<p>將<code>$this-&gt;type</code>改<code>new</code>我們剛剛建立，用來封裝<strong>計費方式</strong>的物件。</p>
<p><code>private $type</code>的PHPDoc註解型別，也從原來的<code>string</code>改成<code>AbstractMovieType</code>。</p>
<p><strong>重構getType()</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor150.png" alt=""></p>
<p>因為<code>$type</code> field的型別已經從原本的<code>string</code>改成<code>AbstractMovieType</code>，因此<code>getType()</code>的回傳型別與PHPDoc註解也要更新。</p>
<p><strong>重構calculatePrice()</strong><br><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor151.png" alt=""></p>
<p>由於<code>setType()</code>已經幫我們切換<strong>計費方式</strong>物件，據<strong>SOLID</strong>的<strong>里氏替換原則</strong>，且這些物件都是繼承於<code>AbstractMovieType</code>，根我們可以直接呼叫子類別的<code>calculatePrice()</code>。</p>
<p>馬上跑測試，確認<strong>重構</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>97</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">97</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/2febe67cb64bf893de17ac2e0c2ea99ca2c99de2" target="_blank" rel="external">重構 : Movie-&gt;setType(), getType()與calculatePrice()</a></span></span></span></p>
<h3 id="Replace_Constructor_with_Factory_Method">Replace Constructor with Factory Method</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor152.png" alt=""></p>
<p>在<strong>重構</strong>的技巧中，有一招叫做<strong>Replace Constructor with Factory Method</strong>，簡單的說，當你使用<code>new</code>去建立物件時，就直接相依了該物件，我們可將<code>new</code>物件的邏輯封裝在<strong>Simple Factory模式</strong>內，如此我們就只相依<strong>工廠物件</strong>，而不會直將相依於<strong>計費方式</strong>物件。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor153.png" alt=""></p>
<p>新增<code>MovieTypeFactory</code>，負責建立<strong>計費方式</strong>物件。<span class="margin-note-marker"><sup>98</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">98</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor154.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>MovieTypeFactory</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor155.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>MovieTypeFactory</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor156.png" alt=""></p>
<p>建立<code>create()</code>，並宣告成static。</p>
<p>將原本在<code>Movie-&gt;setType()</code>的程式全部貼到<code>create()</code>內。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor157.png" alt=""></p>
<p><code>create()</code>加上<code>string $type</code>參數，並加上回傳型別<code>AbstractMovieType</code>。</p>
<p>因為<code>create()</code>功能就是在建立物件，所以全部改成<code>return</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor158.png" alt=""></p>
<p>原本<code>Movie-&gt;setType()</code>，改由<code>MovieFactory::create()</code>來建立<strong>計費方式</strong>物件。</p>
<p>如此<code>Movie</code>將不再直接相依於每個<strong>計費物件</strong>，只相依於<code>MovieTypeFactory</code>。</p>
<p>馬上跑測試，確認<strong>重構</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>99</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">99</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/265b345f75793f67e0e044b2b004fbe04a97934a" target="_blank" rel="external">重構 : Simple Factory</a></span></span></span></p>
<h3 id="Replace_Conditional_with_Polymorphism">Replace Conditional with Polymorphism</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor159.png" alt=""></p>
<p>在<strong>重構</strong>技巧中，有一招叫做<strong>Replace Conditional with Polymorphism</strong>，簡單的說，就是要使用物件導向的<strong>多型</strong>來取代<code>switch</code>，達到<strong>SOLID</strong>的<strong>開放封閉原則</strong>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor160.png" alt=""></p>
<p>使用Laravel的service container，利用<code>App::bind()</code>將<code>AbstractMovieType</code>與實際的<strong>計費方式</strong>連結。</p>
<p>使用<code>App::make()</code>建立<code>AbstractMovieType</code>型別的物件。</p>
<p>也就是說，只要<strong>計費方式</strong>物件改變，<code>App::bind()</code>會重新與<code>AbstractMovieType</code>連結，但對於<code>App::make()</code>來說，都是建立<code>AbstractMovieType</code>型別的物件，這就是物件導向的<strong>多型</strong>。<span class="margin-note-marker"><sup>100</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">100</span>詳細請參考<a href="/laravel/laravel-service-provider/">深入探討Service Provider</a></span></span></span></p>
<p>馬上跑測試，確認<strong>重構</strong>沒將程式改壞掉。<span class="margin-note-marker"><sup>101</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">101</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/182e7025e5fff605dc99419de774f2c72cd719be" target="_blank" rel="external">重構 : 多型App::bind()</a></span></span></span></p>
<h3 id="開放封閉原則">開放封閉原則</h3><table>
<thead>
<tr>
<th style="text-align:left">影片種類</th>
<th style="text-align:left">租期</th>
<th style="text-align:left">租金</th>
<th style="text-align:left">逾期費</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">普通片</td>
<td style="text-align:left">7天</td>
<td style="text-align:left">100</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">新片</td>
<td style="text-align:left">3天</td>
<td style="text-align:left">150</td>
<td style="text-align:left">30</td>
</tr>
<tr>
<td style="text-align:left">兒童片</td>
<td style="text-align:left">7天</td>
<td style="text-align:left">40</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">國片</td>
<td style="text-align:left">10天</td>
<td style="text-align:left">80</td>
<td style="text-align:left">10</td>
</tr>
</tbody>
</table>
<div class="alert alert-info"><i class="fa fa-info"></i>  現在需求改變，為了鼓勵<strong>國片</strong>，決定<strong>調降租金</strong>，並且<strong>延長租期</strong>。</div>
<p><strong> 測試案例 </strong></p>
<ol>
<li><p>普通片1支，10天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  100 + (10-7) * 10 = 130</div>
</li>
<li><p>新片1支，5天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  150 + (5-3) * 30 = 210</div>
</li>
<li><p>兒童片1支，8天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  40 + (8-7) * 10 = 50</div>
</li>
<li><p>國片1支，12天</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  80 + (12-10) * 10 = 100</div>
</li>
</ol>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor161.png" alt=""></p>
<p>新增<strong>國片</strong>測試案例，得到第一個<span class="label label-danger">紅燈</span>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor162.png" alt=""></p>
<p>新增<code>TaiwanMovieType</code>，負責<strong>國片</strong>的計費方式。<span class="margin-note-marker"><sup>102</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">102</span>在左側選擇<code>VideoRental</code>目錄，按熱鍵&#8963; + N，會出現<code>New</code>選單，選擇<code>PHP Class</code>，可幫我們自動建立新的class。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor163.png" alt=""></p>
<p>出現<strong>Create New PHP class</strong>對話框，class名稱輸入<code>TaiwanMovieType</code>，namespace選擇<code>VideoRental</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor164.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>TaiwanMovieType</code>。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor165.png" alt=""></p>
<p>繼承<code>AbstractMovieType</code>，使用PhpStorm幫我們建立abstract class所定義的method。<span class="margin-note-marker"><sup>103</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">103</span>將滑鼠游標放在<code>AbstractMovieType</code>之後，按熱鍵&#8997; + &#8617;，會出現<code>Add method stubs</code>，按下可自動根據所繼承的<code>abstract class</code>建立method。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor166.png" alt=""></p>
<p>PhpStorm會幫我們建立<code>calculatePrice()</code>，連註解也會一併建立。</p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor167.png" alt=""></p>
<p>補上<strong>國片</strong>的<strong>計費方式</strong>。</p>
<p>馬上跑測試，確認新增的<strong>國片</strong>測試案例是否正常。<span class="margin-note-marker"><sup>104</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">104</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel51Refactor_demo/commit/fd60eb1e598c37d2c4fac0f1eb48fc7fa42fa528" target="_blank" rel="external">重構 : 開放封閉原則</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  若使用原本<strong>switch</strong>的方式，無論<strong>switch</strong>寫在哪裡，只要新增功能，就一定要去改<strong>switch</strong>，這就違反了<strong>SOLID</strong>的<strong>開放封閉原則</strong>，若使用物件導向的<strong>多型</strong>之後，若新增功能，只要新增class，繼承abstract class即可，原來的程式完全不用修改，完全達到<strong>開放封閉原則</strong>的要求。</div>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  我們做了哪些重構?</div>
<ol>
<li><strong>Extract Method</strong> : 將原本很長的函式利用<strong>Extract Method</strong>拆解成數個小小的method。</li>
<li><strong>Move Method</strong> : 利用<strong>Move Method</strong>將method搬到它適合的class內。</li>
<li><strong>使用多型取代switch</strong> : 若程式內有<code>switch</code>，考慮使用物件導向<strong>多型</strong>的<strong>State模式</strong>或<strong>Strategy模式</strong>取代，達成<strong>SOLID</strong>的<strong>開放封閉原則</strong>。</li>
</ol>
<h2 id="偵錯">偵錯</h2><hr>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor171.png" alt=""></p>
<p>假設在<strong>國片</strong>的<strong>計費方式</strong>，故意將<strong>逾期費用</strong><code>10</code>元改成<code>5</code>元，我們該如何找到這個bug呢?</p>
<h3 id="使用測試案例偵錯">使用測試案例偵錯</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor172.png" alt=""></p>
<p>執行測試，發現錯在<code>test_order_1_taiwan_movie_with_12_days()</code>這個測試案例，且期望值是100，而實際值是90。</p>
<p>且由於每個測試案例是針對單一class的method，我們可以很快的鎖定問題是出在<code>Customer-&gt;calculatePrice()</code>的錯誤。</p>
<h3 id="使用PhpStorm偵錯">使用PhpStorm偵錯</h3><p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor173.png" alt=""></p>
<p>PhpStorm允許我們直接在PHP內下中斷點，假如你知道問題在哪裡，可以直接在該class的method內下中斷點，若完全沒有頭緒，可以在<code>act</code>之處下中斷點，最少在執行target的method前會停下來。<span class="margin-note-marker"><sup>105</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">105</span>在欲中斷的程式之處按熱鍵 : &#8984; + F8，可<strong>設定</strong>或<strong>取消</strong>中斷點。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor174.png" alt=""></p>
<p>啟動<strong>偵錯</strong>模式。<span class="margin-note-marker"><sup>106</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">106</span>在欲啟動<strong>偵錯</strong>的測試案例內，按熱鍵 : &#8963; + &#8679; + D啟動偵錯模式，程式會停在剛剛建立的<strong>中斷點</strong>。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor175.png" alt=""></p>
<p>Step Into進<code>Customer-&gt;calculateTotalPrice()</code>。<span class="margin-note-marker"><sup>107</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">107</span>Step Into : 熱鍵 : F7<br>Step Over : 熱鍵 : F8<br>Step Out : 熱鍵 : &#8679; + F8</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor176.png" alt=""></p>
<p>找到root cause在<code>TaiwanMovieType</code>的<code>calculatePrice()</code>的18行有問題。</p>
<h2 id="學習資源">學習資源</h2><hr>
<ul>
<li>測試 : <a href="https://laracasts.com/series/phpunit-testing-in-laravel" target="_blank" rel="external">PHPUnit Testing with Laravel</a></li>
</ul>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor177.png" alt=""></p>
<ul>
<li>重構 : <a href="http://www.tenlong.com.tw/items/9861547533?item_id=45657" target="_blank" rel="external">重構 : 改善既有程式的設計 (二版)</a></li>
</ul>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/refactor.jpg" alt=""></p>
<ul>
<li>設計模式 : <a href="http://www.tenlong.com.tw/items/9866761797?item_id=45056" target="_blank" rel="external">大話設計模式</a></li>
</ul>
<p><img src="/images/phpstorm/phpstorm-tdd-refactor/dp_easy.jpg" alt=""></p>
<h2 id="學習方式">學習方式</h2><hr>
<img src="/images/phpstorm/phpstorm-tdd-refactor/roadmap.svg" width="750">
<ul>
<li>直接由<strong>設計模式</strong>學習物件導向的學習曲線較為陡峭，很吃天份，失敗機率較高。</li>
<li>學習<strong>測試</strong>與<strong>重構</strong>達成<strong>設計模式</strong>的學習曲線較為平緩，適合常人，成功機率較高。</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>好程式不是<strong>設計</strong>出來的，而是<strong>重構</strong>出來的。</li>
<li>重構一定要搭配測試。TDD讓我們以<strong>Top Down</strong>方式，以需求出發，幫助我們抽象化思考，不用太早就去思考細節，可以更容易設計出符合SOLID的物件導向程式。</li>
<li>測試重構會多花一點時間，因此我們要選擇更強悍的工具將時間省回來。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel51Refactor_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用正確的工具將會事半功倍]]>
    
    </summary>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用Eloquent處理一對一的資料?]]></title>
    <link href="http://oomusou.io/laravel/eloquent/laravel-relation-one-to-one/"/>
    <id>http://oomusou.io/laravel/eloquent/laravel-relation-one-to-one/</id>
    <published>2016-01-03T13:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>除了傳統<strong>關聯式資料</strong>的<strong>Join</strong>外，Laravel的<strong>Eloquent</strong>還提出了<strong>Relation</strong>，這兩個看似相同的東西，事實上還是有些差異，其相關的SQL與Blade寫法也不太一樣。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.6</p>
<h2 id="關聯性資料">關聯性資料</h2><hr>
<p>依然使用最經典的<code>users</code>與<code>posts</code> table，由於本文只討論<strong>一對一關係</strong>，也就是一個user只有一篇post，其中primary key為<code>users.id</code>，foreign key為<code>posts.user_id</code>。</p>
<h2 id="條件在users">條件在users</h2><hr>
<h3 id="使用Join">使用Join</h3><h4 id="Repository">Repository</h4><figure class="highlight php"><figcaption><span>app/Repositories/UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserPost</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::join(<span class="string">'posts'</span>, <span class="string">'users.id'</span>, <span class="string">'='</span>, <span class="string">'posts.user_id'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'users.id'</span>, <span class="string">'&gt;'</span>, <span class="number">2</span>)</span><br><span class="line">            -&gt;where(<span class="string">'users.id'</span>, <span class="string">'&lt;'</span>, <span class="number">6</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>join()</code>去描述<code>users</code>與<code>posts</code>的關係。</p>
<p>使用<code>where()</code>去篩選條件，因為<code>users</code>與<code>posts</code>都有<code>id</code>欄位，所以在<code>where()</code>要明確指定哪一個table的<code>id</code>。</p>
<h4 id="SQL">SQL</h4><p><img src="/images/laravel/eloquent/laravel-relation-one-to-one/one2one000.png" alt=""></p>
<p>若使用<a href="https://github.com/barryvdh/laravel-debugbar" target="_blank" rel="external">Laravel Debugbar</a>去觀察，可以發現Eloquent產出的是一句SQL，如我們所預期。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於<a href="https://github.com/barryvdh/laravel-debugbar" target="_blank" rel="external">Laravel Debugbar</a>，詳細請參考<a href="/laravel/laravel-debugbar/">如何使用Laravel Debugbar?</a></span></span></span></p>
<h4 id="Blade">Blade</h4><p><img src="/images/laravel/eloquent/laravel-relation-one-to-one/one2one001.png" alt=""></p>
<p>由於Eloquent產出的是1句SQL，回傳的是一個collection，所以<code>title</code>雖然是在<code>posts</code> table，但經過join之後相當於在同一個table，因此在Blade中存取<code>title</code>如同存取<code>users</code>其他欄位一樣。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>完整程式碼在我的<a href="https://github.com/oomusou/Laravel52UsersJoinOneToOne_demo" target="_blank" rel="external">GitHub</a></span></span></span></p>
<h3 id="使用Relation">使用Relation</h3><h4 id="Model">Model</h4><figure class="highlight php"><figcaption><span>app/User.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Relations</span>\<span class="title">HasOne</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes that are mass assignable.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [</span><br><span class="line">        <span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes excluded from the model's JSON form.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hidden</span> = [</span><br><span class="line">        <span class="string">'password'</span>, <span class="string">'remember_token'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * users與posts為一對一關係</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@return</span> HasOne</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">()</span> : <span class="title">HasOne</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;hasOne(Post::class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>31行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * users與posts為一對一關係</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> HasOne</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">()</span> : <span class="title">HasOne</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;hasOne(Post::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新增<code>post()</code>，描述<code>users</code>與<code>posts</code>的<strong>一對一關係</strong>，<code>hasOne()</code>的第一個參數傳入為<strong>一對一關係</strong>的class字串。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>若foreign key的命名依照<code>pararent tabel單數名稱</code> + <code>id</code>的命名方式，Laravel將可自動抓到foreign key與primary key的對應關係，不用特別指定。</span></span></span></p>
<h4 id="Repository-1">Repository</h4><figure class="highlight php"><figcaption><span>app/Repositories/UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserPost</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::where(<span class="string">'id'</span>, <span class="string">'&gt;'</span>, <span class="number">2</span>)</span><br><span class="line">            -&gt;where(<span class="string">'id'</span>, <span class="string">'&lt;'</span>, <span class="number">6</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不指定任何relation。</p>
<p>使用<code>where()</code>去篩選條件，雖然<code>users</code>與<code>posts</code>都有<code>id</code>欄位，但<code>where()</code>只作用在<code>users</code>，所以不用明確指定哪一個table的<code>id</code>。</p>
<h4 id="SQL-1">SQL</h4><p><img src="/images/laravel/eloquent/laravel-relation-one-to-one/one2one008.png" alt=""></p>
<p>雖然結果完全一樣，但產生的SQL卻不一樣。</p>
<p>使用relation後，可以發現Eloquent產出了4句SQL，而<code>where()</code>全落在第1句SQL，這也是為什麼儘管<code>id</code>欄位重複，在<code>where()</code>卻不用特別指定table名稱。</p>
<p>若結果<code>posts</code>有n筆資料，則會產生 (n + 1) 句SQL。</p>
<h4 id="Repository-2">Repository</h4><figure class="highlight php"><figcaption><span>app/Repositories/UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserPost</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::with(<span class="string">'post'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'id'</span>, <span class="string">'&gt;'</span>, <span class="number">2</span>)</span><br><span class="line">            -&gt;where(<span class="string">'id'</span>, <span class="string">'&lt;'</span>, <span class="number">6</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>with()</code>指定要使用哪一個relation。</p>
<p>使用<code>where()</code>去篩選條件，雖然<code>users</code>與<code>posts</code>都有<code>id</code>欄位，但<code>where()</code>只作用在<code>users</code>，所以不用明確指定哪一個table的<code>id</code>。</p>
<h4 id="SQL-2">SQL</h4><p><img src="/images/laravel/eloquent/laravel-relation-one-to-one/one2one002.png" alt=""></p>
<p>雖然結果完全一樣，但產生的SQL卻不一樣。</p>
<p>使用<code>with()</code>後，可以發現Eloquent只產出了2句SQL，而<code>where()</code>全落在第1句SQL，這也是為什麼儘管<code>id</code>欄位重複，在<code>where()</code>卻不用特別指定table名稱。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  使用<strong>Relation</strong>後，會有 (n + 1) query問題，若搭配<strong>with()</strong>，將只產生2句SQL。</div>
<h4 id="Blade-1">Blade</h4><p><img src="/images/laravel/eloquent/laravel-relation-one-to-one/one2one003.png" alt=""></p>
<p>由於Eloquent產出的是2句SQL，回傳的是兩個collection，因此Blade在存取<code>title</code>時，必須透過<code>post()</code>這個relation去存取。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>完整程式碼在我的<a href="https://github.com/oomusou/Laravel52UsersRelationOneToOne_demo" target="_blank" rel="external">GitHub</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  使用<strong>with()</strong>後，由於SQL已經改變，Blade必須靠relation才能存取其他table的欄位。</div>
<h2 id="條件在posts">條件在posts</h2><hr>
<p>前面的範例，<code>where()</code>條件都落在<code>users</code>，已經發現<strong>Join</strong>與<strong>Relation</strong>的寫法之差異，但實務上不可能條件都落在<code>users</code>，也會落在<code>posts</code>，這樣該怎麼寫呢?</p>
<h3 id="使用Join-1">使用Join</h3><h4 id="Repository-3">Repository</h4><figure class="highlight php"><figcaption><span>app/Repositories/UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserPost</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::join(<span class="string">'posts'</span>, <span class="string">'users.id'</span>, <span class="string">'='</span>, <span class="string">'posts.user_id'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'users.id'</span>, <span class="string">'&gt;'</span>, <span class="number">2</span>)</span><br><span class="line">            -&gt;where(<span class="string">'posts.id'</span>, <span class="string">'&lt;'</span>, <span class="number">6</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt;where(<span class="string">'posts.id'</span>, <span class="string">'&lt;'</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure></p>
<p>將<code>where()</code>條件改到<code>posts</code>上。</p>
<h4 id="SQL-3">SQL</h4><p><img src="/images/laravel/eloquent/laravel-relation-one-to-one/one2one004.png" alt=""></p>
<p>執行結果一樣，但SQL的條件已經從<code>users.id</code>改成<code>posts.id</code>，符合我們預期。</p>
<h4 id="Blade-2">Blade</h4><p><img src="/images/laravel/eloquent/laravel-relation-one-to-one/one2one001.png" alt=""></p>
<p>Blade則完全一樣，不必修改。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>完整程式碼在我的<a href="https://github.com/oomusou/Laravel52PostsJoinOneToOne_demo" target="_blank" rel="external">GitHub</a></span></span></span></p>
<h3 id="使用Relation-1">使用Relation</h3><h4 id="Repository-4">Repository</h4><figure class="highlight php"><figcaption><span>app/Repositories/UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserPost</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::with(<span class="string">'post'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'users.id'</span>, <span class="string">'&gt;'</span>, <span class="number">2</span>)</span><br><span class="line">            -&gt;where(<span class="string">'posts.id'</span>, <span class="string">'&lt;'</span>, <span class="number">6</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為<code>users</code>與<code>posts</code>都有<code>id</code>欄位，直覺只要在<code>id</code>前面加上table名稱即可。</p>
<p>但一執行就會出現錯誤。</p>
<p><img src="/images/laravel/eloquent/laravel-relation-one-to-one/one2one005.png" alt=""></p>
<p>還記得之前在relation下<code>where()</code>條件時，所有的條件都會落在<code>users</code>嗎? 因為都落在<code>users</code>，所以自然找不到<code>posts.id</code>這個欄位。</p>
<figure class="highlight php"><figcaption><span>app/Repositories/UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserPost</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::with([<span class="string">'post'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(HasOne <span class="variable">$query</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$query</span>-&gt;where(<span class="string">'id'</span>, <span class="string">'&lt;'</span>, <span class="string">'6'</span>);</span><br><span class="line">            &#125;])</span><br><span class="line">            -&gt;where(<span class="string">'id'</span>, <span class="string">'&gt;'</span>, <span class="number">2</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若要將<code>where()</code>下在<code>posts</code>，必須改用這種寫法，在closure內下<code>where()</code>條件。</p>
<h4 id="SQL-4">SQL</h4><p><img src="/images/laravel/eloquent/laravel-relation-one-to-one/one2one006.png" alt=""></p>
<p><code>where()</code>條件雖然加到<code>posts</code>上了，但結果是錯的。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  使用<strong>with()</strong>後，由於SQL已經改變，要小心結果是不是錯的。</div>
<h4 id="Blade-3">Blade</h4><p><img src="/images/laravel/eloquent/laravel-relation-one-to-one/one2one007.png" alt=""></p>
<p>加了<code>posts.id &lt; 6</code>的條件之後，其實7, 8, 9, 10都不成立，所以不一定有<code>post</code>物件，需要特別判斷是否為null。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>完整程式碼在我的<a href="https://github.com/oomusou/Laravel52PostsRelationOneToOne_demo" target="_blank" rel="external">GitHub</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  使用<strong>with()</strong>後，由於SQL已經改變，Blade要小心物件是否存在。</div>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>使用relation寫法，看似只是將原本join的條件式改寫到model內，但事實上SQL與結果完全不一樣，還順便影響了Blade的寫法。</li>
<li>Relation寫法並沒有辦法取代join，<strong>有些join用relation還是寫不出來</strong>，relation只能讓我們的工具箱多一種處理<strong>關聯式資料</strong>的工具，必須自己依照實務上的需求，決定該使用join還是relation。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a>上找到。</p>
<ul>
<li>條件在<code>users</code><ul>
<li><a href="https://github.com/oomusou/Laravel52UsersJoinOneToOne_demo" target="_blank" rel="external">使用join</a></li>
<li><a href="https://github.com/oomusou/Laravel52UsersRelationOneToOne_demo" target="_blank" rel="external">使用relation</a></li>
</ul>
</li>
<li>條件在<code>posts</code><ul>
<li><a href="https://github.com/oomusou/Laravel52PostsJoinOneToOne_demo" target="_blank" rel="external">使用join</a></li>
<li><a href="https://github.com/oomusou/Laravel52PostsRelationOneToOne_demo" target="_blank" rel="external">使用relation</a></li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[比較使用Join與Relation寫法的差異]]>
    
    </summary>
    
      <category term="Eloquent" scheme="http://oomusou.io/tags/Eloquent/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何讓Git不要管理.idea/workspace.xml?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-git-rm-idea/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-git-rm-idea/</id>
    <published>2016-01-02T12:32:02.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>回想我剛開始使用PhpStorm與git時，只要稍微在PhpStorm做些操作，PhpStorm就會去更新它自己的<code>.idea/workspace.xml</code>，而造成整個project在沒有commit狀態，但無論我怎麼寫<code>.gitignore</code>，git還是會去追蹤<code>.idea/workspace.xml</code>，怎樣也移除不掉。本文整理出3個方法解決此問題。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PhpStorm 10.0.1<br>git 2.6.0<br>SourceTree 2.0.5.2</p>
<h2 id="初學者使用PhpStorm與Git">初學者使用PhpStorm與Git</h2><hr>
<p>回想我之前使用PhpStorm與git的流程是 :<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow000.svg" width="700"></p>
<p>從此之後，惱人的<code>`.idea/workspace.xml</code>就不時出現，讓我的專案常常在沒有commit狀態，就算我在<code>.gitignore</code>加上了<code>.idea/workspace.xml</code>還是沒用，一度以為是git或SourceTree的bug。</p>
<h2 id="為什麼Git會一直追蹤？">為什麼Git會一直追蹤？</h2><hr>
<p>一旦PhpStorm開啟過專案後，就會建立<code>.idea</code>目錄，目錄下的檔案都是PhpStorm自己所用的檔案，包括最常更新的<code>workspace.xml</code>，之後在使用git時，又使用了<code>git add .</code>，所以連<code>.idea</code>目錄下<strong>所有檔案</strong>都進了Git repository。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow001.png" alt=""></p>
<p>只要檔案進了git repository之後，<code>.gitignore</code>就擋不住了，無論你在<code>.gitignore</code>怎麼加<code>.idea/workspace.xml</code>也沒用。</p>
<h2 id="方法1_:_修改-gitignore">方法1 : 修改.gitignore</h2><hr>
<h3 id="使用Composer建立Laravel專案">使用Composer建立Laravel專案</h3><p>(略)</p>
<h3 id="修改-gitignore">修改.gitignore</h3><figure class="highlight php"><figcaption><span>.gitignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/vendor</span><br><span class="line">/node_modules</span><br><span class="line">Homestead.yaml</span><br><span class="line">Homestead.json</span><br><span class="line">.env</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure> 
<p>一開始就將<code>.idea</code>目錄加進<code>.gitignore</code>，確保將來<code>git add .</code>時，<code>.idea</code>目錄下所有檔案都不會進Git。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若你有使用<a href="/laravel/homestead/homestead-per-project/">一個專案使用一個Homestead</a>，建議一開始也在<code>.gitignore</code>加上<code>.vagrant</code>，如此連Homestead所建立的暫存檔也不會進入Git repository。</span></span></span></p>
<h3 id="建立Git_Repository">建立Git Repository</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ git init&#10;oomusou@mac:~/MyProject$ git add .&#10;oomusou@mac:~/MyProject$ git commit -m &#34;Initial commit.&#34;</span><br></pre></td></tr></table></figure>
<h3 id="使用PhpStorm開啟專案">使用PhpStorm開啟專案</h3><p>此時PhpStorm還是如往常會建立<code>.idea</code>目錄。</p>
<p>因為事先寫在<code>.gitignore</code>加了<code>.idea</code>，所以<code>.idea</code>目錄不會進入Git repository。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow002.png" alt=""></p>
<p>以後Git再也不會track <code>.idea/workspace.xml</code>。</p>
<h2 id="方法2_:_修改-gitignore_global">方法2 : 修改.gitignore_global</h2><hr>
<p>將home directory下的<code>.gitignore_global</code>，修改成如下 :<br><figure class="highlight php"><figcaption><span>~/.gitignore_global</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*~</span><br><span class="line">.DS_Store</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure></p>
<p>由於每個目錄下的<code>.gitignore</code>都會繼承<code>.gitignore_global</code>的設定，因此將來再也不用修改Laravel專案目錄下的<code>.gitignore</code>。</p>
<h2 id="方法3_:_將-idea從Repository移除">方法3 : 將.idea從Repository移除</h2><hr>
<p>剛剛的方法只適用於<strong>新專案</strong>，若<code>.idea</code>目錄已經在Git repository者，就不能用以上方法。<br>如下圖，一開始就<strong>誤入歧途</strong>，將<code>.idea</code>目錄送進Git repository了。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow001.png" alt=""></p>
<p>接下來介紹2種方法，分別使用Git指令與使用SourceTree。</p>
<h3 id="使用Git指令">使用Git指令</h3><h4 id="刪除-idea目錄">刪除.idea目錄</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ git rm --cached -r .idea</span><br></pre></td></tr></table></figure>
<p><code>rm --cached</code> : 表示從此以後Git repository不需要track這個檔案或目錄，也就是這個檔案會從tracked變成untracked狀態，而這個檔案或目錄在index也會被刪除，不過並不會刪除實體檔案或目錄。<br><code>-r</code>: <code>recursive</code>，表示目錄下的檔案也一併刪除。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow003.png" alt=""></p>
<p>SourceTree上方馬上顯示在index裡，<code>.idea</code>目錄下的檔案被刪除。下方則顯示<code>.idea</code>目錄下的檔案變成untracked，並且成為<code>Uncommitted changes</code>狀態。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow004.png" alt=""></p>
<h4 id="修改-gitignore-1">修改.gitignore</h4><figure class="highlight php"><figcaption><span>.gitignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/vendor</span><br><span class="line">/node_modules</span><br><span class="line">Homestead.yaml</span><br><span class="line">Homestead.json</span><br><span class="line">.env</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure> 
<p>因為現在<code>.idea</code>目錄下的檔案都是<code>untracked</code>，所以<code>.gitignore</code>有效。<br>趕快修改<code>.gitignore</code>，將<code>.idea</code>加進去。</p>
<h4 id="重新Commit">重新Commit</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ git add .&#10;oomusou@mac:~/MyProject$ git commit -m &#34;remove .idea&#34;</span><br></pre></td></tr></table></figure>
<p><img src="/images/phpstorm/phpstorm-git-rm-idea/flow005.png" alt=""></p>
<p>剛修改的<code>.gitignore</code>已經加入，且<code>.idea</code>目錄下的檔案已經從Git repository移除，以後<code>workspace.xml</code>再也不會煩你了。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow006.png" alt=""></p>
<h3 id="使用SourceTree">使用SourceTree</h3><h4 id="Stop_Tracking">Stop Tracking</h4><p>選擇要移除的<code>.idea</code>目錄諸檔，<strong><em>Actions -&gt; Stop Tracking</em></strong>。<br>其實這就相當於<code>git rm --cached -r .idea</code>。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow007.png" alt=""></p>
<p>SourceTree上方馬上顯示在index裡，<code>.idea</code>目錄下的檔案被刪除。下方則顯示<code>.idea</code>目錄下的檔案變成untracked，並且成為<code>Uncommitted changes</code>狀態。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow004.png" alt=""></p>
<h4 id="修改-gitignore-2">修改.gitignore</h4><p>在<code>Unstaged files</code>後方的<code>...</code>，選擇<code>Ignore file</code>。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow008.png" alt=""></p>
<p>選<code>Ignore everything beneath .idea</code>。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow009.png" alt=""></p>
<p>我們發現SourceTree幫我們在<code>.gitignore</code>加上了<code>.idea</code>。這相當於在<code>.gitignore</code>中加入<code>.idea</code>。</p>
<h4 id="重新Commit-1">重新Commit</h4><p><img src="/images/phpstorm/phpstorm-git-rm-idea/flow010.png" alt=""></p>
<p>將<code>.gitignore</code>加進<code>Staged files</code>。這相當於<code>git add .</code>。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow011.png" alt=""></p>
<p>按下右上角<code>Commit</code>，寫下註解，按右下角<code>Commit</code>正式commit。這相當於<code>git commit -m &quot;remove .idea&quot;</code>。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow012.png" alt=""></p>
<p>最後如同自己下git指令一樣，剛修改的<code>.gitignore</code>已經加入，且<code>.idea</code>目錄下的檔案已經從git repository移除，以後<code>workspace.xml</code>再也不會煩你了。<br><img src="/images/phpstorm/phpstorm-git-rm-idea/flow006.png" alt=""></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>一個看似很基本的問題，卻要大費周章才能用Git解決。</li>
<li>修改<code>.gitignore_global</code>的方式，可以一勞永逸解決掉<code>.idea/workspace.xml</code>的問題。</li>
<li>其實現在學Git，不用再很執著一定要用Git指令，應該<strong>Git指令 + SourceTree</strong>，指令只是幫助理解，但實務上還是要用SourceTree才有效率。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[徹底解決惱人的.idea/workspace.xml]]>
    
    </summary>
    
      <category term="Git" scheme="http://oomusou.io/tags/Git/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="SourceTree" scheme="http://oomusou.io/tags/SourceTree/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用Model Factory建立關聯性資料?]]></title>
    <link href="http://oomusou.io/laravel/eloquent/laravel-model-factory-relation/"/>
    <id>http://oomusou.io/laravel/eloquent/laravel-model-factory-relation/</id>
    <published>2016-01-02T10:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>實務上我們會使用<strong>Seeder</strong> + <strong>Model Factory</strong>來建立測試的假資料，由於關聯性資料的primary key與foreign key必須成對出現，若使用Laravel的<strong>Relation</strong>，則可很方便的建立測試資料。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.6</p>
<h2 id="沒有使用Relation">沒有使用Relation</h2><hr>
<p>如經典的<code>users</code>與<code>posts</code> table，一個user可以只有一篇post，所謂<strong>一對一關係</strong>；也可以一個user有多篇post，所謂<strong>一對多關係</strong>，其中primary key為<code>users.id</code>，foreign key為<code>posts.user_id</code>。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  若不使用relation，該如何對<strong>users</strong>與<strong>posts</strong>建立一對一關連性的假資料呢?</div>
<figure class="highlight php"><figcaption><span>database/factories/ModelFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$factory</span>-&gt;define(User::class, <span class="function"><span class="keyword">function</span> <span class="params">(Generator <span class="variable">$faker</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'name'</span>           =&gt; <span class="variable">$faker</span>-&gt;name,</span><br><span class="line">        <span class="string">'email'</span>          =&gt; <span class="variable">$faker</span>-&gt;email,</span><br><span class="line">        <span class="string">'password'</span>       =&gt; bcrypt(str_random(<span class="number">10</span>)),</span><br><span class="line">        <span class="string">'remember_token'</span> =&gt; str_random(<span class="number">10</span>),</span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$factory</span>-&gt;define(Post::class, <span class="function"><span class="keyword">function</span> <span class="params">(Generator <span class="variable">$faker</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'title'</span>   =&gt; <span class="variable">$faker</span>-&gt;sentence,</span><br><span class="line">        <span class="string">'content'</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph,</span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第14行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$factory</span>-&gt;define(Post::class, <span class="function"><span class="keyword">function</span> <span class="params">(Generator <span class="variable">$faker</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'title'</span>   =&gt; <span class="variable">$faker</span>-&gt;sentence,</span><br><span class="line">        <span class="string">'content'</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph,</span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>使用model factory建立<code>posts</code>的假資料，雖然<code>posts</code>有<code>user_id</code>、<code>title</code>與<code>content</code>三個欄位，但因為<code>user_id</code>為foreign key，必須與<code>users</code>的<code>id</code>連動，所以無法使用faker建立。</p>
<figure class="highlight php"><figcaption><span>database/seeds/UserTableSeeder.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Seeder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTableSeeder</span> <span class="keyword">extends</span> <span class="title">Seeder</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run the database seeds.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        factory(User::class, <span class="number">10</span>)-&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用seeder建立<code>users</code>的假資料，以前我們會在seeder使用faker，現在則在model factory使用faker，因此seeder只要告訴model factory要建立<strong>幾筆</strong>資料即可。</p>
<figure class="highlight php"><figcaption><span>database/seeds/PostTableSeeder.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Seeder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostTableSeeder</span> <span class="keyword">extends</span> <span class="title">Seeder</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run the database seeds.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        collect(range(<span class="number">1</span>, <span class="number">10</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$userId</span>)</span> </span>&#123;</span><br><span class="line">            factory(Post::class)-&gt;create([</span><br><span class="line">                <span class="string">'user_id'</span> =&gt; <span class="variable">$userId</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為<code>users</code>與<code>posts</code>為<strong>一對一關係</strong>，所以<code>users</code>建立10筆資料，<code>posts</code>也必須建立10筆資料。</p>
<p>傳統會使用<code>for迴圈</code>的方式產生<code>$userId</code> :<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$userId</span> = <span class="number">1</span>; <span class="variable">$userId</span> &lt;= <span class="number">10</span>; <span class="variable">$userId</span>++) &#123;</span><br><span class="line">    factory(Post::class)-&gt;create([</span><br><span class="line">        <span class="string">'user_id'</span> =&gt; <span class="variable">$userId</span>,</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若使用<code>factory()-&gt;create()</code>建立假資料時，若有某些欄位不想透過model factory產生，可以將陣列傳入<code>create()</code>，其中key為<strong>欄位名稱</strong>，而value為<strong>自訂假資料</strong>。</p>
<p>13行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">collect(range(<span class="number">1</span>, <span class="number">10</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$userId</span>)</span> </span>&#123;</span><br><span class="line">    factory(Post::class)-&gt;create([</span><br><span class="line">        <span class="string">'user_id'</span> =&gt; <span class="variable">$userId</span></span><br><span class="line">    ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>這裡改用closure的方式。</p>
<p>其中<code>collect()</code>為Laravel的helper function，相當於<code>new Collection()</code>。</p>
<p><code>each()</code>為collection所提供，會<strong>iterate</strong> collection中每個item，效果相當於<code>foreach</code>，並可將collection中的item傳入closure，也就是<code>range(1, 10)</code>的會依序傳入<code>$userId</code>。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  這種方式雖然可行，但必須另外在<strong>PostTableSeeder</strong>中靠<strong>for迴圈</strong>或<strong>range(1, 10)</strong>產生<strong>user_id</strong>，是否有更快更直覺的方式呢?</div>
<h2 id="使用Relation">使用Relation</h2><hr>
<p>Laravel的eloquent提供了<strong>Relation</strong>機制，seeder與model factory可以使用更簡單的方式新增關聯性資料。</p>
<h3 id="一對一資料">一對一資料</h3><figure class="highlight php"><figcaption><span>app/User.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Relations</span>\<span class="title">HasOne</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes that are mass assignable.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [</span><br><span class="line">        <span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes excluded from the model's JSON form.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hidden</span> = [</span><br><span class="line">        <span class="string">'password'</span>, <span class="string">'remember_token'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立users與posts一對一關係</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> HasOne</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">()</span> : <span class="title">HasOne</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;hasOne(Post::class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>26行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 建立users與posts一對一關係</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> HasOne</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">()</span> : <span class="title">HasOne</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$this</span>-&gt;hasOne(Post::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新增<code>post()</code>，描述<code>users</code>與<code>posts</code>的<strong>一對一關係</strong>，<code>hasOne()</code>的第一個參數傳入為<strong>一對一關係</strong>的class字串。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若foreign key的命名依照<code>pararent tabel名稱</code> + <code>id</code>的命名方式，Laravel將可自動抓到foreign key與primary key的對應關係，不用特別指定。</span></span></span></p>
<p>Model factory的寫法不變。</p>
<figure class="highlight php"><figcaption><span>database/seeds/UserTableSeeder.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Seeder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTableSeeder</span> <span class="keyword">extends</span> <span class="title">Seeder</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run the database seeds.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        factory(User::class, <span class="number">10</span>)</span><br><span class="line">            -&gt;create()</span><br><span class="line">            -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(User <span class="variable">$user</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$user</span>-&gt;post()-&gt;save(factory(Post::class)-&gt;make());</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">factory(User::class, <span class="number">10</span>)</span><br><span class="line">    -&gt;create()</span><br><span class="line">    -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(User <span class="variable">$user</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$user</span>-&gt;post()-&gt;save(factory(Post::class)-&gt;make());</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>有了relation之後，<code>UserTableSeeder</code>寫法有了重大的改變。</p>
<p>關鍵在於model factory的<code>create()</code>除了可新增資料外，還會傳回所新增資料的collection，因此可以使用fluent的寫法，繼續使用collection的<code>each()</code>來新增<code>posts</code>的一對一資料。</p>
<p>Closure會傳進每一筆<code>User</code> model，也就是<code>$user</code>，然後藉由<code>$user-&gt;post()</code>的relation找到一對一的<code>Post</code> model。</p>
<p>這裡用到了一個相當漂亮的技巧，使用了<code>factory()-&gt;make()</code>產生了<code>Post</code> model，注意這裡不是使用<code>create()</code>，而是使用<code>make()</code>，因為<code>create()</code>會直接存檔，但是<code>Post</code>的model factory並沒有描述<code>id</code>與<code>user_id</code>，所以只使用<code>make()</code>產生<code>Post</code> model，然後傳給<code>save()</code>去產生<code>id</code>與<code>user_id</code>存檔。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>事實上這個漂亮的寫法並不是我寫出來的，而是出自於Laravel的官方說明文件<a href="https://laravel.com/docs/5.2/seeding#using-model-factories" target="_blank" rel="external">Database: Seeding, Using Model Factory</a></span></span></span></p>
<p>有了relation之後，也不需要<code>PostTableSeeder</code>了，<code>UserTableSeeder</code>已經把<code>users</code>與<code>posts</code>的假資料都搞定了。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  使用<strong>Relation</strong>之後，<strong>一對一關係</strong>的假資料果然可以很漂亮的新增，不過實務上更常見的是<strong>一對多關係</strong>的資料吧?</div>
<h3 id="一對多資料">一對多資料</h3><figure class="highlight php"><figcaption><span>app/User.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Relations</span>\<span class="title">HasMany</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes that are mass assignable.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [</span><br><span class="line">        <span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes excluded from the model's JSON form.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hidden</span> = [</span><br><span class="line">        <span class="string">'password'</span>, <span class="string">'remember_token'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 建立uses與posts一對多關係</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> HasMany</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">posts</span><span class="params">()</span> : <span class="title">HasMany</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;hasMany(Post::class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>27行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 建立uses與posts一對多關係</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> HasMany</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">posts</span><span class="params">()</span> : <span class="title">HasMany</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;hasMany(Post::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新增<code>posts()</code>，描述<code>users</code>與<code>posts</code>的<strong>一對多關係</strong>，<code>hasMany()</code>的第一個參數傳入為<strong>一對多關係</strong>的class字串。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>若foreign key的命名依照<code>pararent tabel名稱</code> + <code>id</code>的命名方式，Laravel將可自動抓到foreign key與primary key的對應關係，不用特別指定。</span></span></span></p>
<p>Model factory的寫法不變。</p>
<figure class="highlight php"><figcaption><span>database/seeds/UserTableSeeder.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Seeder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTableSeeder</span> <span class="keyword">extends</span> <span class="title">Seeder</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run the database seeds.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        factory(User::class, <span class="number">10</span>)</span><br><span class="line">            -&gt;create()</span><br><span class="line">            -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(User <span class="variable">$user</span>)</span> </span>&#123;</span><br><span class="line">                collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(<span class="variable">$user</span>)</span> </span>&#123;</span><br><span class="line">                    <span class="variable">$user</span>-&gt;posts()-&gt;save(factory(Post::class)-&gt;make());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>14行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">factory(User::class, <span class="number">10</span>)</span><br><span class="line">    -&gt;create()</span><br><span class="line">    -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(User <span class="variable">$user</span>)</span> </span>&#123;</span><br><span class="line">        collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(<span class="variable">$user</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;posts()-&gt;save(factory(Post::class)-&gt;make());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>之前<strong>一對一關係</strong>的寫法中，我們直接在closure內<code>$user-&gt;post-&gt;save()</code>，不過我們現在是<strong>一對多關係</strong>，假設我們現在每一筆<code>user</code>要對應3筆<code>post</code>。</p>
<p>這裡當然也是可以使用<code>for迴圈</code>的寫法，若使用<code>collection-&gt;each()</code>的風格，我們再引入一個新的closure，由於要使用到<strong>外部變數</strong> : <code>$user</code>，所以必須使用<code>user</code>。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於closure與use的用法，詳細請參考<a href="/php/php-closure/">如何使用Closure?</a></span></span></span></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>使用relation，在seeder只要一行程式就可以完成<strong>一對多關係</strong>的假資料新增。</li>
<li><code>Collection-&gt;each()</code>配合closure，其效果相當於<code>for迴圈</code>，但程式更加精簡。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a>上找到。</p>
<ol>
<li><a href="https://github.com/oomusou/Laravel52ModelFactoryNoRelationOneToOne_demo" target="_blank" rel="external">沒有使用Relation的一對一</a></li>
<li><a href="https://github.com/oomusou/Laravel52ModelFactoryRelationOneToOne_demo" target="_blank" rel="external">使用Relation的一對一</a></li>
<li><a href="https://github.com/oomusou/Laravel52ModelFactoryRelationOneToMany_demo" target="_blank" rel="external">使用Relation的一對多</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[搭配Relation，只要一行就可建立關聯性資料]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用PhpStorm建立Laravel專案?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-new-laravel-project/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-new-laravel-project/</id>
    <published>2015-12-29T05:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>很羨慕Visual Studio可以在IDE內建立ASP.NET MVC專案嗎？事實上我們也可以在PhpStorm內建立Laravel專案，完全不需要打任何指令。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PhpStorm 10.0.2<br>Laravel 5.2.5</p>
<h2 id="建立新專案">建立新專案</h2><hr>
<p>啟動PhpStorm之後，直接選擇<strong>Create New Project</strong>。<br><img src="/images/phpstorm/phpstorm-new-laravel-project/new000.png" alt=""></p>
<h2 id="選擇Composer_Project">選擇Composer Project</h2><hr>
<ul>
<li><strong>Project Type</strong> : <code>Composer Project</code></li>
<li><strong>Location</strong> : 專案位置與名稱</li>
<li><strong>composer.phar</strong> : 若composer已經在本機安裝過，可選擇<code>Use existing composer.phar</code>，並指定路徑。若從來沒安裝過composer，可選擇<code>Download composer.phar from getcomposer.org</code>，PhpStorm會自動將composer下載在專案目錄下。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>預設全域的composer是安裝在<code>/usr/local/bin/</code>目錄下。</span></span></span></li>
<li><strong>Package</strong> : <code>laravel/laravel</code>。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-new-laravel-project/new001.png" alt=""></p>
<ul>
<li><strong>Version to install</strong> : 選擇Laravel版本，<code>&lt;default&gt;</code>是安裝最新版本。</li>
<li><strong>Page to PHP executable</strong> : 指定PHP位置。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>這裡的設定有2個目的 : 1. 讓composer可以執行。2. 設定<strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP</em></strong>，讓PhpStorm在執行PhpUnit與debug時，知道PHP的位置。</span></span></span></li>
</ul>
<p><img src="/images/phpstorm/phpstorm-new-laravel-project/new002.png" alt=""></p>
<h2 id="安裝Laravel中">安裝Laravel中</h2><hr>
<p><img src="/images/phpstorm/phpstorm-new-laravel-project/new003.png" alt=""></p>
<h2 id="設定Namespace_Roots">設定Namespace Roots</h2><hr>
<p>Laravel安裝完後，會出現以下訊息 :</p>
<ul>
<li><strong>Composer</strong> : 因為Laravel安裝了新的package在<code>vendor</code>目錄下，導致<code>PHP include paths</code>更新，可以不用理會。</li>
<li><strong>Detect PSR-0 namespace roots</strong> : 由於剛剛安裝完，PhpStorm會要求你設定Laravel目錄，按<code>automatically</code>自動偵測namespace roots。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>若日後想要改變namespace roots與目錄設定，有兩個方式 : 1. <strong><em>PhpStorm -&gt; Preferences… -&gt; Project:xxx -&gt; Directories</em></strong> 2. <strong><em>Code -&gt; Detect PRS-0 Namespace Roots</em></strong></span></span></span><br><img src="/images/phpstorm/phpstorm-new-laravel-project/new004.png" alt=""></li>
</ul>
<h3 id="設定Excluded目錄">設定Excluded目錄</h3><p><code>automatically</code>會自動幫我們將<code>vendor</code>目錄設定為<strong>Excluded</strong>目錄。</p>
<p>因為<code>vendor</code>目錄下放的為framework與package，而我們的程式不會去改<code>vendor</code>目錄，因此不用去做index，可加速搜尋。</p>
<p><img src="/images/phpstorm/phpstorm-new-laravel-project/new005.png" alt=""></p>
<h3 id="設定Sources目錄">設定Sources目錄</h3><p><code>automatically</code>會自動幫我們將<code>.</code>目錄設定為<strong>Sources</strong>目錄。</p>
<p>但是Laravel預設的<strong>Sources</strong>目錄為<code>app</code>。</p>
<p>因為Laravel的namespace是從<code>app</code>目錄開始，所以要將<code>app</code>目錄設定為Laravel namespace root。</p>
<p>選擇<code>app</code>目錄，按下<code>source</code>，右側將出現<code>Source Folders : app</code>。<br><img src="/images/phpstorm/phpstorm-new-laravel-project/new006.png" alt=""></p>
<p>按下<code>P</code>，設定prefix。</p>
<p>根據PSR-4，我們可以有很多namespace root，因此可以對目錄設定prefix，將<code>app</code>目錄的prefix設定為<code>App</code>。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>這個步驟非常重要，設定好namespace root後，將來只要建立class，PhpStorm都會幫你管理namespace，不用再對namespace操心。</span></span></span><br><img src="/images/phpstorm/phpstorm-new-laravel-project/new007.png" alt=""></p>
<h3 id="設定Resource_Root目錄">設定Resource Root目錄</h3><p>Laravel預設的<strong>Resource Root</strong>目錄為<code>resources</code>。</p>
<p>選擇<code>resources</code>目錄，按下<code>Resource Root</code>。<br><img src="/images/phpstorm/phpstorm-new-laravel-project/new008.png" alt=""></p>
<h3 id="設定Tests目錄">設定Tests目錄</h3><p>Laravel預設的<strong>Tests</strong>目錄為<code>tests</code>。</p>
<p>選擇<code>tests</code>目錄，按下<code>Tests</code>，右側將出現<code>Test Source Folders : tests</code>。<br><img src="/images/phpstorm/phpstorm-new-laravel-project/new009.png" alt=""></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm也可以幫我們自動建立Laravel專案，完全不用輸入任何composer或laravel installer指令。</li>
<li>設定<strong>Namespace Roots</strong>非常重要，但很多人因為不知道如何設定而忽略。只要設定好之後，以後建立class時，PhpStorm都會幫你管理namespace，不用再擔心namespace打錯的問題。</li>
<li>使用PhpStorm建立Laravel專案的流程，會自動幫我們設定<code>Excluded</code>目錄，非常方便。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[完全使用圖形介面，不需打任何指令]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何快速在PhpStorm切換method?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-navigate-method/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-navigate-method/</id>
    <published>2015-12-24T09:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>PhpStorm是很方便的PHP IDE，除了<strong>測試</strong>、<strong>重構</strong>與<strong>偵錯</strong>很方便外，還提供了各式各樣的<strong>快捷鍵</strong>可用，本文分享2個快速切換method的方法。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PhpStorm 10.0.2</p>
<h2 id="列出method清單">列出method清單</h2><hr>
<p><strong>熱鍵</strong> : <strong>&#8984; + F12</strong></p>
<p>會列出目前class所有的method清單，可以直接上下鍵選取。<br><img src="/images/phpstorm/phpstorm-navigate-method/method000.png" alt="method清單"></p>
<p>也可以直接輸入method名稱做過濾。<br><img src="/images/phpstorm/phpstorm-navigate-method/method001.png" alt="filter選取"></p>
<h2 id="快速切換上下method">快速切換上下method</h2><hr>
<p><strong>熱鍵</strong> : <strong>&#8963; + &#8593;</strong> 上一個method<br><strong>熱鍵</strong> : <strong>&#8963; + &#8595;</strong> 下一個method</p>
<p>但這兩個熱鍵，預設會與OS X的Mission Control與Application Windows的熱鍵相衝，必須自行停用。<br><img src="/images/phpstorm/phpstorm-navigate-method/method002.png" alt="filter選取"></p>
<p>有了這兩個熱鍵，就不一定需要觸控板或滑鼠的滾輪來快速捲動了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm還有很多好用的熱鍵，但因為這兩個熱鍵寫code最常用，且會與OS X預設熱鍵相衝，所以特別紀錄下來。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[分享兩個快速切換method的方式]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在Laravel 4.2使用Presenter模式?]]></title>
    <link href="http://oomusou.io/laravel/laravel42/laravel-42-presenter/"/>
    <id>http://oomusou.io/laravel/laravel42/laravel-42-presenter/</id>
    <published>2015-12-24T02:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>Presenter模式讓我們將<strong>顯示邏輯</strong>從blade中解放，將顯示邏輯封裝在presenter中，配合interface，可以使用<code>App::bind()</code>加以切換，但這一切的關鍵就是Laravel 5.1在blade中所提供的<code>@inject</code>，讓我們可以對view做<strong>依賴注入</strong>，但是在Laravel 4.2，我們該如何使用presenter呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 4.2.17</p>
<h2 id="日期格式">日期格式</h2><hr>
<p>本文將<a href="/laravel/laravel-present-dateformat/">如何依各種語言顯示不同日期格式</a>的presenter範例，全部用Laravel 4.2改寫。</p>
<h2 id="面臨的挑戰">面臨的挑戰</h2><hr>
<p>相對於Laravel 5.1，Laravel 4.2少了以下幾項武器 : </p>
<ol>
<li><strong>Method Injection</strong></li>
<li><strong>Blade的<code>@inject</code></strong>。</li>
</ol>
<p>Method injection倒是小事，反正最少還有constructor injection可以用。</p>
<p>但<code>@inject</code>就是致命傷了，沒有<code>@inject</code>使的我們沒有辦法對view做<strong>依賴注入</strong>。</p>
<h2 id="Presenter">Presenter</h2><hr>
<p>由於有多國語言的需求，我們直接建立presenter interface，各語言可實作此interface，使用<code>compact()</code>將presenter與collection打包在一起傳到view，並透過<code>App::bind()</code>去切換物件，相當於切換語言。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>實務上並不是一開始就會去開presenter interface，而是先建立presenter物件，然後透過重構的方式產生interface，在此是因為講解的原因，所以從interface開始講起。</span></span></span></p>
<h3 id="Presenter_Interface">Presenter Interface</h3><figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenterInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義了<code>showDateFormat()</code>，各語言必須在<code>showDateFormat()</code>使用Carbon的<code>format()</code>去轉換日期格式。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此部分與Laravel 5.1的寫法完全一樣。</span></span></span></p>
<h3 id="Presenter-1">Presenter</h3><figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenter_uk.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenter_uk</span> <span class="keyword">implements</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'d M, Y'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DateFormatPresenter_uk</code>實現了<code>DateFormatPresenterInterface</code>，並將轉換成<code>英國</code>日期格式的Carbon的<code>format()</code>寫在<code>showDateFormat()</code>內。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>此部分與Laravel 5.1的寫法完全一樣。</span></span></span></p>
<figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenter_tw.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenter_tw</span> <span class="keyword">implements</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'Y/m/d'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DateFormatPresenter_tw</code>實現了<code>DateFormatPresenterInterface</code>，並將轉換成<code>台灣</code>日期格式的Carbon的<code>format()</code>寫在<code>showDateFormat()</code>內。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>此部分與Laravel 5.1的寫法完全一樣。</span></span></span></p>
<figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenter_us.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenter_us</span> <span class="keyword">implements</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'M d, Y'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DateFormatPresenter_us</code>實現了<code>DateFormatPresenterInterface</code>，並將轉換成<code>美國</code>日期格式的Carbon的<code>format()</code>寫在<code>showDateFormat()</code>內。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>此部分與Laravel 5.1的寫法完全一樣。</span></span></span></p>
<h3 id="Presenter_Factory">Presenter Factory</h3><p>由於每個語言的日期格式都是一個presenter物件，那勢必遇到一個最基本的問題 : <code>我們必須根據不同的語言去new不同的presenter物件</code>，直覺我們可能會在controller去new presenter。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getAgeLargerThan(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$locale</span> = Input::get(<span class="string">'lang'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$locale</span> === <span class="string">'uk'</span>) &#123;</span><br><span class="line">        <span class="variable">$presenter</span> = <span class="keyword">new</span> DateFormatPresenter_uk();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$locale</span> === <span class="string">'tw'</span>) &#123;</span><br><span class="line">        <span class="variable">$presenter</span> = <span class="keyword">new</span> DateFormatPresenter_tw();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$presenter</span> = <span class="keyword">new</span> DateFormatPresenter_us();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View::make(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這種寫法雖然可行，但有幾個問題 : </p>
<ol>
<li>違反<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 若將來有新的語言需求，只能不斷去修改<code>index()</code>，然後不斷的新增<code>elseif</code>，就算改用<code>switch</code>也是一樣。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span><strong>開放封閉原則</strong> : 軟體中的類別、函式對於擴展是開放的，對於修改是封閉的。</span></span></span></li>
<li>違反<strong>SOLID</strong>的<strong>依賴反轉原則</strong> : controller直接根據語言去new相對應的class，高層直接相依於低層，直接將實作寫死在程式中。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span><strong>依賴反轉原則</strong> : 高層不應該依賴於低層，兩者都應該要依賴抽象；抽象不要依賴細節，細節要依賴抽象。</span></span></span></li>
<li>無法做unit test : 由於presenter直接new在controller，因此要測試時，無法對presenter做mock。</li>
</ol>
<p>比較好的方式是使用<strong>Factory Pattern</strong>。<br><figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenterFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenterFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $locale</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(string <span class="variable">$locale</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        App::bind(DateFormatPresenterInterface::class,</span><br><span class="line">            <span class="string">'MyBlog\Presenters\DateFormatPresenter_'</span> . <span class="variable">$locale</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> App::make(DateFormatPresenterInterface::class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>Presenter Factory</code>的<code>create()</code>去取代new建立物件。</p>
<p>這裡當然可以在<code>create()</code>去寫<code>if...elseif</code>去建立presenter物件，不過這樣會違反<strong>SOLID</strong>的<strong>開放封閉原則</strong>，比較好的方式是改用<code>App::bind()</code>，直接根據<code>$locale</code>去binding相對應的class，這樣無論在怎麼新增<strong>語言</strong>與<strong>日期格式</strong>，controller與Presenter Factory都不用做任何修改，完全符合<strong>開放封閉原則</strong>。</p>
<p>由於Laravel 4.2沒有<code>@inject</code>，所以我們必須提早處理，<code>App::make()</code>相當於<code>@inject</code>，會根據<code>App::bind()</code>的設定new出指定的物件。</p>
<h3 id="Controller">Controller</h3><figure class="highlight php"><figcaption><span>app/controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>\<span class="title">DateFormatPresenterFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Repositories</span>\<span class="title">UserRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> \<span class="title">BaseController</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> UserRepository */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$userRepository</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> DateFormatPresenterFactory */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$dateFormatPresenterFactory</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> UserRepository $userRepository</span><br><span class="line">     * <span class="doctag">@param</span> DateFormatPresenterFactory $dateFormatPresenterFactory</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository <span class="variable">$userRepository</span>,</span><br><span class="line">        DateFormatPresenterFactory <span class="variable">$dateFormatPresenterFactory</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userRepository = <span class="variable">$userRepository</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;dateFormatPresenterFactory = <span class="variable">$dateFormatPresenterFactory</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Display a listing of the resource.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getAgeLargerThan(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$locale</span> = (Input::get(<span class="string">'lang'</span>)) ? Input::get(<span class="string">'lang'</span>) : <span class="string">'us'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$dateFormatPresenter</span> = <span class="variable">$this</span>-&gt;dateFormatPresenterFactory-&gt;create(<span class="variable">$locale</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> View::make(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>, <span class="string">'dateFormatPresenter'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第7行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> UserRepository */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$userRepository</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> DateFormatPresenterFactory */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$dateFormatPresenterFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserController constructor.</span><br><span class="line"> * <span class="doctag">@param</span> UserRepository $userRepository</span><br><span class="line"> * <span class="doctag">@param</span> DateFormatPresenterFactory $dateFormatPresenterFactory</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository <span class="variable">$userRepository</span>,</span><br><span class="line">	DateFormatPresenterFactory <span class="variable">$dateFormatPresenterFactory</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userRepository = <span class="variable">$userRepository</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;dateFormatPresenterFactory = <span class="variable">$dateFormatPresenterFactory</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>UserRepository</code>與<code>DateFormatPresenterFactory</code>注入到<code>UserController</code>。</p>
<p>由於Laravel 4.2沒有支援method injection，只能將相依物件全部由constructor injection注入。</p>
<p>24行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Display a listing of the resource.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> Response</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getAgeLargerThan(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$locale</span> = (Input::get(<span class="string">'lang'</span>)) ? Input::get(<span class="string">'lang'</span>) : <span class="string">'us'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$dateFormatPresenter</span> = <span class="variable">$this</span>-&gt;dateFormatPresenterFactory-&gt;create(<span class="variable">$locale</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View::make(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>, <span class="string">'dateFormatPresenter'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>關鍵在這兩行 :<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dateFormatPresenter</span> = <span class="variable">$this</span>-&gt;dateFormatPresenterFactory-&gt;create(<span class="variable">$locale</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> View::make(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>, <span class="string">'dateFormatPresenter'</span>));</span><br></pre></td></tr></table></figure></p>
<p>之前在Laravel 5.1的presenter factory的<code>create()</code>只做<code>App::bind()</code>，但現在Laravel 4.2的<code>create()</code>是實際傳回presenter物件。</p>
<p>這個presenter物件要怎麼傳進view呢？關鍵就在<code>compact()</code>，它將collection與presenter打包成一個陣列，傳進view。</p>
<p>這個陣列的key是<code>users</code>與<code>dateFormatPresenter</code>，而<code>users</code>的資料就是collection，而<code>dateFormatPresenter</code>的資料就是presenter物件。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  使用factory pattern之後，controller有了以下的優點 :</div>
<ol>
<li>符合<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 若將來有新的語言需求，controller完全不用做任何修改。</li>
<li>符合<strong>SOLID</strong>的<strong>依賴反轉原則</strong> : controller不再直接相依於presenter，而是改由factory去建立presenter。</li>
<li>可以做unit test : 由於將factory依賴注入進controller，因此要測試時，只要將要mock的presenter factory注入進controller即可。</li>
</ol>
<h3 id="View">View</h3><p><img src="/images/laravel/laravel-42-presenter/presenter000.png" alt="blade很乾淨"></p>
<p>除了沒有<code>@inject</code>外，其他寫法與Laravel 5.1完全一樣。</p>
<p>使用presenter的<code>showDateFormat()</code>將日期轉成想要的格式。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  View搭配presenter之後，有以下優點 :</div>
<ol>
<li>Blade非常乾淨，完全沒有<code>@if</code>、<code>@elseif</code>與<code>@endif</code>。</li>
<li>由於邏輯都寫在PHP中，將來可以繼續對顯示邏輯做<strong>重構</strong>與<strong>物件導向</strong>。</li>
<li>Presenter只會影響目前的view，不像mutator會有side effect。</li>
<li>符合<strong>SOLID</strong>的<strong>單一職責原則</strong> : <strong>顯示邏輯</strong>被封裝在presenter內，不像mutor將<strong>顯示邏輯</strong>寫在model內。</li>
<li>符合<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 將來若有新的語言，對於擴展是開放的 : 只要新增class實踐<code>DateFormatPresenterInterface</code>即可；對於修改是封閉的 : controller、factory interface、factory與view都不用做任何修改。</li>
<li>可單獨對presenter的<strong>顯示邏輯</strong>做unit test。</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Laravel 4.2的blade雖然沒有<code>@inject</code>，但只要透過<code>compact()</code>，我們依然可以將presenter打包進view，這樣就可以不用在blade直接寫<strong>顯示邏輯</strong>，而將其封裝在presenter物件內。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel42Presenter_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[雖然Laravel 4.2沒有@inject，可是依然可以使用Presenter]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何依各種語言顯示不同日期格式?]]></title>
    <link href="http://oomusou.io/laravel/laravel-present-dateformat/"/>
    <id>http://oomusou.io/laravel/laravel-present-dateformat/</id>
    <published>2015-12-22T04:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>由於多國語言的需求，不只有<strong>語言</strong>部分必須翻譯，連<strong>日期格式</strong>也必須符合當地習慣，最典型的如美國習慣<code>Dec 25, 2015</code>，而英國卻習慣<code>25 Dec, 2015</code>，台灣則習慣<code>2015/12/25</code>，不過在資料庫存的卻是同一份日期，只是因為<strong>顯示邏輯</strong>的不同，在view必須用不一樣的格式呈現。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.1.22</p>
<h2 id="日期格式">日期格式</h2><hr>
<p>PHP談到日期格式，就一定要想到<code>Carbon</code>，Laravel已經內建Carbon，且只要資料庫是<code>date</code>、<code>datetime</code>或<code>timestamp</code>型態，model的該欄位已經自動轉成Carbon物件，也就是說，可以直接使用Carbon的<code>format()</code>去做任何日期格式的轉換。</p>
<p>雖然Carbon可以幫我們轉換日期格式，但該在哪裡使用<code>format()</code>呢？本文提供3種寫法，並深入討論3種寫法的優缺點 : </p>
<ol>
<li><strong>Blade</strong></li>
<li><strong>Mutator</strong></li>
<li><strong>Presenter</strong></li>
</ol>
<h2 id="Blade">Blade</h2><hr>
<p>由於<strong>日期格式</strong>為<strong>顯示邏輯</strong>，最直覺的寫法就是在blade透過Carbon去轉換日期格式。</p>
<p><img src="/images/laravel/laravel-present-dateformat/format000.png" alt="blade很難維護"></p>
<p>由於Laravel已經將<code>created_at</code>欄位轉成Carbon物件，所以自帶<code>format()</code>，我們可以透過<code>format()</code>得到我們要的日期格式。</p>
<p>使用blade寫法的優缺點如下 : </p>
<ul>
<li><p><strong>優點</strong> : </p>
<ol>
<li>將<strong>顯示邏輯</strong>寫在blade，非常直覺。</li>
</ol>
</li>
<li><p><strong>缺點</strong> : </p>
<ol>
<li><code>@if</code>、<code>@elseif</code>與<code>@ednif</code>與HTML夾雜，不易維護。</li>
<li>由於直接寫在blade，無法對顯示邏輯做<strong>重構</strong>與<strong>物件導向</strong>。</li>
<li>違反<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 將來若有新的語言，只能不斷的加上<code>@elseif</code>判斷。</li>
</ol>
</li>
</ul>
<h2 id="Mutator">Mutator</h2><hr>
<p>Laravel為model欄位提供了<code>mutator</code>與<code>accessor</code>，簡單的說，就是model欄位的<code>getter</code>與<code>setter</code>，因為欲顯示的<strong>日期格式</strong>與資料庫存的<strong>日期格式</strong>不同，所以我們只要在<code>mutator</code>使用Carbon的<code>format()</code>，就可以得到我們要的日期格式。</p>
<figure class="highlight php"><figcaption><span>app/MyBlog/User.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Passwords</span>\<span class="title">CanResetPassword</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">Authorizable</span> <span class="title">as</span> <span class="title">AuthorizableContract</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span> <span class="title">as</span> <span class="title">AuthenticatableContract</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">CanResetPassword</span> <span class="title">as</span> <span class="title">CanResetPasswordContract</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">Authorizable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> <span class="keyword">implements</span> <span class="title">AuthenticatableContract</span>,</span><br><span class="line">    <span class="title">AuthorizableContract</span>,</span><br><span class="line">    <span class="title">CanResetPasswordContract</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Authenticatable</span>, <span class="title">Authorizable</span>, <span class="title">CanResetPassword</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The database table used by the model.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">'users'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes that are mass assignable.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [<span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes excluded from the model's JSON form.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hidden</span> = [<span class="string">'password'</span>, <span class="string">'remember_token'</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * [created_at]的mutator</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> $value</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCreatedAtAttribute</span><span class="params">(<span class="variable">$value</span>)</span>: <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$locale</span> = App::getLocale();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$date</span> = <span class="variable">$this</span>-&gt;asDateTime(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$locale</span> === <span class="string">'uk'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'d M, Y'</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$locale</span> === <span class="string">'tw'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'Y/m/d'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'M d, Y'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>40行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * [created_at]的mutator</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> $value</span><br><span class="line"> * <span class="doctag">@return</span> string</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCreatedAtAttribute</span><span class="params">(<span class="variable">$value</span>)</span>: <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$locale</span> = App::getLocale();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$date</span> = <span class="variable">$this</span>-&gt;asDateTime(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$locale</span> === <span class="string">'uk'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'d M, Y'</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$locale</span> === <span class="string">'tw'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'Y/m/d'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'M d, Y'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在model加上<code>getCreatedAtAttribute()</code>，其中<code>get</code>為規定的prefix，而<code>Attribute</code>為規定的postfix，中間為為欄位名稱<code>created_at</code>，改用CamelCase表示。</p>
<p><code>App::getLocale()</code>會傳回由controller所設定的語系，如<code>us</code>、<code>tw</code>、<code>uk</code>…等。</p>
<p><code>$value</code>為mutator所傳進的資料，其中model的<code>asDateTime()</code>可將mutator的<code>$value</code>轉成Carbon物件。</p>
<p>依Carbon的<code>format()</code>轉成各國所慣用的日期格式。</p>
<p>使用mutator寫法的優缺點如下 : </p>
<ul>
<li><p><strong>優點</strong> : </p>
<ol>
<li>將邏輯寫在PHP，沒有寫在blade，程式較容易維護，且可以<strong>重構</strong>與<strong>物件導向</strong>。</li>
<li>只要在model寫一次，就可以套用在所有的view。</li>
</ol>
</li>
<li><p><strong>缺點</strong> : </p>
<ol>
<li>將<strong>顯示邏輯</strong>寫在model，違反<strong>SOLID</strong>的<strong>單一職責原則</strong>，model就算要寫，也應該寫<strong>資料庫邏輯</strong>，而不適合寫顯示邏輯。</li>
<li>若不是每個view都套用此顯示邏輯，使用mutator會對其他view產生side effect。</li>
<li>若要對mutator做unit test，需要碰到資料庫。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>雖然可以使用<strong>SQLite In-Memory Database</strong>使測試速度加快，但還是會比使用<strong>Presenter</strong>沒碰資料庫慢很多。</span></span></span></li>
</ol>
</li>
</ul>
<h2 id="Presenter">Presenter</h2><hr>
<p>由於有多國語言的需求，我們直接建立presenter interface，各語言可實作此interface，使用<code>@inject</code>將presenter注入到view，並透過<code>App::bind()</code>去切換物件，相當於切換語言。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>實務上並不是一開始就會去開presenter interface，而是先建立presenter物件，然後透過重構的方式產生interface，在此是因為講解的原因，所以從interface開始講起。</span></span></span></p>
<h3 id="Presenter_Interface">Presenter Interface</h3><figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenterInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義了<code>showDateFormat()</code>，各語言必須在<code>showDateFormat()</code>使用Carbon的<code>format()</code>去轉換日期格式。</p>
<h3 id="Presenter-1">Presenter</h3><figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenter_uk.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenter_uk</span> <span class="keyword">implements</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'d M, Y'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DateFormatPresenter_uk</code>實現了<code>DateFormatPresenterInterface</code>，並將轉換成<code>英國</code>日期格式的Carbon的<code>format()</code>寫在<code>showDateFormat()</code>內。</p>
<figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenter_tw.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenter_tw</span> <span class="keyword">implements</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'Y/m/d'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DateFormatPresenter_tw</code>實現了<code>DateFormatPresenterInterface</code>，並將轉換成<code>台灣</code>日期格式的Carbon的<code>format()</code>寫在<code>showDateFormat()</code>內。</p>
<figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenter_us.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenter_us</span> <span class="keyword">implements</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'M d, Y'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DateFormatPresenter_us</code>實現了<code>DateFormatPresenterInterface</code>，並將轉換成<code>美國</code>日期格式的Carbon的<code>format()</code>寫在<code>showDateFormat()</code>內。</p>
<h3 id="Presenter_Factory">Presenter Factory</h3><p>由於每個語言的日期格式都是一個presenter物件，那勢必遇到一個最基本的問題 : <code>我們必須根據不同的語言去new不同的presenter物件</code>，直覺我們可能會在controller去new presenter。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getAgeLargerThan(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$locale</span> = <span class="variable">$request</span>[<span class="string">'lang'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$locale</span> === <span class="string">'uk'</span>) &#123;</span><br><span class="line">        <span class="variable">$presenter</span> = <span class="keyword">new</span> DateFormatPresenter_uk();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$locale</span> === <span class="string">'tw'</span>) &#123;</span><br><span class="line">        <span class="variable">$presenter</span> = <span class="keyword">new</span> DateFormatPresenter_tw();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$presenter</span> = <span class="keyword">new</span> DateFormatPresenter_us();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這種寫法雖然可行，但有幾個問題 : </p>
<ol>
<li>違反<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 若將來有新的語言需求，只能不斷去修改<code>index()</code>，然後不斷的新增<code>elseif</code>，就算改用<code>switch</code>也是一樣。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span><strong>開放封閉原則</strong> : 軟體中的類別、函式對於擴展是開放的，對於修改是封閉的。</span></span></span></li>
<li>違反<strong>SOLID</strong>的<strong>依賴反轉原則</strong> : controller直接根據語言去new相對應的class，高層直接相依於低層，直接將實作寫死在程式中。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span><strong>依賴反轉原則</strong> : 高層不應該依賴於低層，兩者都應該要依賴抽象；抽象不要依賴細節，細節要依賴抽象。</span></span></span></li>
<li>無法做unit test : 由於presenter直接new在controller，因此要測試時，無法對presenter做mock。</li>
</ol>
<p>比較好的方式是使用<strong>Factory Pattern</strong>。<br><figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenterFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenterFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $locale</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(string <span class="variable">$locale</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        App::bind(DateFormatPresenterInterface::class,</span><br><span class="line">            <span class="string">'MyBlog\Presenters\DateFormatPresenter_'</span> . <span class="variable">$locale</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>Presenter Factory</code>的<code>create()</code>去取代new建立物件。</p>
<p>這裡當然可以在<code>create()</code>去寫<code>if...elseif</code>去建立presenter物件，不過這樣會違反<strong>SOLID</strong>的<strong>開放封閉原則</strong>，比較好的方式是改用<code>App::bind()</code>，直接根據<code>$locale</code>去binding相對應的class，這樣無論在怎麼新增<strong>語言</strong>與<strong>日期格式</strong>，controller與Presenter Factory都不用做任何修改，完全符合<strong>開放封閉原則</strong>。</p>
<h3 id="Controller">Controller</h3><figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">App</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>\<span class="title">DateFormatPresenterFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Repositories</span>\<span class="title">UserRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  UserRepository 注入的UserRepository */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$userRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> UserRepository $userRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository <span class="variable">$userRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userRepository = <span class="variable">$userRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Display a listing of the resource.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Request $request</span><br><span class="line">     * <span class="doctag">@param</span> DateFormatPresenterFactory $dateFormatPresenterFactory</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request <span class="variable">$request</span>, </span><br><span class="line">        DateFormatPresenterFactory <span class="variable">$dateFormatPresenterFactory</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getAgeLargerThan(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$locale</span> = (<span class="variable">$request</span>[<span class="string">'lang'</span>]) ? <span class="variable">$request</span>[<span class="string">'lang'</span>] : <span class="string">'us'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$dateFormatPresenterFactory</span>-&gt;create(<span class="variable">$locale</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>11行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span>  UserRepository 注入的UserRepository */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$userRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserController constructor.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> UserRepository $userRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository <span class="variable">$userRepository</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userRepository = <span class="variable">$userRepository</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>UserRepository</code>注入到<code>UserController</code>。</p>
<p>24行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Display a listing of the resource.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> Request $request</span><br><span class="line"> * <span class="doctag">@param</span> DateFormatPresenterFactory $dateFormatPresenterFactory</span><br><span class="line"> * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request <span class="variable">$request</span>,</span><br><span class="line">    DateFormatPresenterFactory <span class="variable">$dateFormatPresenterFactory</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getAgeLargerThan(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$locale</span> = (<span class="variable">$request</span>[<span class="string">'lang'</span>]) ? <span class="variable">$request</span>[<span class="string">'lang'</span>] : <span class="string">'us'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$dateFormatPresenterFactory</span>-&gt;create(<span class="variable">$locale</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>index()</code>會相依於<code>DateFormatPresenterFactory</code>，當然也可以在constructor一併將<code>DateFormatPresenterFactory</code>注入，但是考慮到<code>DateFormatPresenterFactory</code>只有<code>index()</code>使用，因此改用<strong>Method Injection</strong>的方式，只將<code>DateFormatPresenterFactory</code>注入到<code>index()</code>即可，這樣可以減輕constructor的壓力，不必所有相依物件都寫在constructor。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  使用factory pattern之後，controller有了以下的優點 :</div>
<ol>
<li>符合<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 若將來有新的語言需求，controller完全不用做任何修改。</li>
<li>符合<strong>SOLID</strong>的<strong>依賴反轉原則</strong> : controller不再直接相依於presenter，而是改由factory去建立presenter。</li>
<li>可以做unit test : 由於將factory依賴注入進controller，因此要測試時，只要將要mock的presenter factory注入進controller即可。</li>
</ol>
<div class="alert alert-info"><i class="fa fa-info"></i>  何時該使用<strong>Constructor Injection</strong>或<strong>Method Injection</strong>呢?</div>
<ol>
<li>若該相依物件，有很多method要使用，可考慮使用<strong>Constructor Injection</strong>，如repository、service。</li>
<li>若該相依物件，只有單個method自己使用，可考慮使用<strong>Method Injection</strong>，如factory。</li>
</ol>
<h3 id="View">View</h3><p><img src="/images/laravel/laravel-present-dateformat/format001.png" alt="blade很乾淨"></p>
<p>使用<code>@inject</code>注入presenter，讓view也可以如controller一樣使用注入的物件。</p>
<p>使用presenter的<code>showDateFormat()</code>將日期轉成想要的格式。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  View搭配presenter之後，有以下優點 :</div>
<ol>
<li>Blade非常乾淨，完全沒有<code>@if</code>、<code>@elseif</code>與<code>@endif</code>。</li>
<li>由於邏輯都寫在PHP中，將來可以繼續對顯示邏輯做<strong>重構</strong>與<strong>物件導向</strong>。</li>
<li>Presenter只會影響目前的view，不像mutator會有side effect。</li>
<li>符合<strong>SOLID</strong>的<strong>單一職責原則</strong> : <strong>顯示邏輯</strong>被封裝在presenter內，不像mutor將<strong>顯示邏輯</strong>寫在model內。</li>
<li>符合<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 將來若有新的語言，對於擴展是開放的 : 只要新增class實踐<code>DateFormatPresenterInterface</code>即可；對於修改是封閉的 : controller、factory interface、factory與view都不用做任何修改。</li>
<li>可單獨對presenter的<strong>顯示邏輯</strong>做unit test。</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><strong>Blade</strong> : 最直覺，但與HTML夾雜，不適合寫太複雜的邏輯，且違反<strong>SOLID</strong>原則。</li>
<li><strong>Mutator</strong> : 很方便，但要小心對其他view或controller的side effect，unit test會直接碰到資料庫，速度較慢。</li>
<li><strong>Presenter</strong> : 較複雜，適合複雜的邏輯，容易維護，符合<strong>SOLID</strong>原則，unit test不會碰到資料庫，速度非常快。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a>上找到。</p>
<ol>
<li><a href="https://github.com/oomusou/Laravel51Blade_demo" target="_blank" rel="external">Blade</a></li>
<li><a href="https://github.com/oomusou/Laravel51Mutator_demo" target="_blank" rel="external">Mutator</a></li>
<li><a href="https://github.com/oomusou/Laravel51Presenter_demo" target="_blank" rel="external">Presenter</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[示範3種日期格式轉換的寫法]]>
    
    </summary>
    
      <category term="Blade" scheme="http://oomusou.io/tags/Blade/"/>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用Presenter模式?]]></title>
    <link href="http://oomusou.io/laravel/laravel-presenter/"/>
    <id>http://oomusou.io/laravel/laravel-presenter/</id>
    <published>2015-12-19T03:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>若將<strong>顯示邏輯</strong>都寫在view，會造成view的肥大而難以維護，基於<strong>SOLID</strong>原則，我們應該使用<strong>Presenter</strong>模式輔助view，將相關的顯示邏輯封裝在不同的presenter，方便中大型專案的維護。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.1.22</p>
<h2 id="顯示邏輯">顯示邏輯</h2><hr>
<p>顯示邏輯中，常見的如 : </p>
<ol>
<li><strong>將資料顯示不同資料</strong> : 如<code>性別欄位為M，就顯示Mr.，若性別欄位為F，就顯示Mrs.</code>。</li>
<li><strong>是否顯示某些資料</strong> : 如<code>根據欄位值是否為Y，要不要顯示該欄位</code>。</li>
<li><strong>依需求顯示不同格式</strong> : 如<code>依照不同的語系，顯示不同的日期格式</code>。</li>
</ol>
<h2 id="Presenter">Presenter</h2><hr>
<h3 id="將資料顯示不同資料">將資料顯示不同資料</h3><p>如<code>性別欄位為M，就顯示Mr.，若性別欄位為F，就顯示Mrs.</code>，初學者常會直接用blade寫在view。</p>
<p><img src="/images/laravel/laravel-presenter/presenter000.png" alt=""></p>
<p>在中大型專案，會有幾個問題 : </p>
<ol>
<li>由於blade與HTML夾雜，不太適合寫太複雜的程式，只適合做一些簡單的binding，否則很容易流於傳統PHP的義大利麵程式。</li>
<li>無法對顯示邏輯做<strong>重構</strong>與<strong>物件導向</strong>。</li>
</ol>
<p>比較好的方式是使用presenter : </p>
<ol>
<li>將相依物件注入到presenter。</li>
<li>在presenter內寫格式轉換。</li>
<li>將presenter注入到view。</li>
</ol>
<figure class="highlight php"><figcaption><span>myblog/Presenters/UserPresenter.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPresenter</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 性別欄位為M，就顯示Mr.，若性別欄位為F，就顯示Mrs.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> string $gender</span><br><span class="line">     * <span class="doctag">@param</span> string $name</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFullName</span><span class="params">(<span class="variable">$gender</span>, <span class="variable">$name</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$gender</span> == <span class="string">'M'</span>)</span><br><span class="line">            <span class="variable">$fullName</span> = <span class="string">'Mr. '</span> . <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="variable">$fullName</span> = <span class="string">'Mrs. '</span> . <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fullName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將原本在blade用<code>@if...@else...@endif</code>寫的邏輯，改寫在presenter。</p>
<p><img src="/images/laravel/laravel-presenter/presenter001.png" alt=""></p>
<p>使用<code>@inject()</code>注入<code>UserPresenter</code>，讓view也可以如controller一樣使用注入的物件。</p>
<p>將來無論顯示邏輯怎麼修改，都不用改到blade，直接在presenter內修改。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  改用這種寫法，有幾個優點 :</div>
<ol>
<li><code>將資料顯示不同格式</code>的顯示邏輯改寫在presenter，解決寫在blade不容易維護的問題。</li>
<li>可對顯示邏輯做<strong>重構</strong>與<strong>物件導向</strong>。</li>
</ol>
<h3 id="是否顯示某些資料">是否顯示某些資料</h3><p>如<code>根據欄位值是否為Y，要不要顯示該欄位</code>，初學者常會直接用blade寫在view。</p>
<p><img src="/images/laravel/laravel-presenter/presenter002.png" alt=""></p>
<p>在中大型專案，會有幾個問題 : </p>
<ol>
<li>由於blade與HTML夾雜，不太適合寫太複雜的程式，只適合做一些簡單的binding，否則很容易流於傳統PHP的義大利麵程式。</li>
<li>無法對顯示邏輯做<strong>重構</strong>與<strong>物件導向</strong>。</li>
</ol>
<p>比較好的方式是使用presenter : </p>
<ol>
<li>將相依物件注入到presenter。</li>
<li>在presenter內寫格式轉換。</li>
<li>將presenter注入到view。</li>
</ol>
<figure class="highlight php"><figcaption><span>myblog/Presenters/UserPresenter.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPresenter</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 是否顯示email</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> User $user</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showEmail</span><span class="params">(User <span class="variable">$user</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$user</span>-&gt;show_email == <span class="string">'Y'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;h2&gt;'</span> . <span class="variable">$user</span>-&gt;email . <span class="string">'&lt;/h2&gt;'</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將<code>@if()</code>的boolean判斷，封裝在presenter內。</p>
<p>改由presenter負責送出HTML。</p>
<p><img src="/images/laravel/laravel-presenter/presenter003.png" alt=""></p>
<p>使用<code>@inject()</code>注入<code>UserPresenter</code>，讓view也可以如controller一樣使用注入的物件。</p>
<p><code>{!! !!!}</code>會保有原來HTML個格式。</p>
<p>將來無論顯示邏輯怎麼修改，都不用改到blade，直接在presenter內修改。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  改用這種寫法，有幾個優點 :</div>
<ol>
<li><code>是否顯示某些資料</code>的顯示邏輯改寫在presenter，解決寫在blade不容易維護的問題。</li>
<li>可對顯示邏輯做<strong>重構</strong>與<strong>物件導向</strong>。</li>
</ol>
<h3 id="依需求顯示不同格式">依需求顯示不同格式</h3><p>如<code>依照不同的語系，顯示不同的日期格式</code>，初學者常會直接用blade寫在view。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>blade、mutator與presenter的比較，詳細請參考<a href="/laravel/laravel-present-dateformat/">如何依各種語言顯示不同日期格式？</a></span></span></span></p>
<p><img src="/images/laravel/laravel-present-dateformat/format000.png" alt="blade很難維護"></p>
<p>在中大型專案，會有幾個問題 : </p>
<ol>
<li>由於blade與HTML夾雜，不太適合寫太複雜的程式，只適合做一些簡單的binding，否則很容易流於傳統PHP的義大利麵程式。</li>
<li>無法對顯示邏輯做<strong>重構</strong>與<strong>物件導向</strong>。</li>
<li>違反<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 若將來要支援新的語系，只能不斷地在blade新增<code>if...else</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span><strong>開放封閉原則</strong> : 軟體中的類別、函式對於擴展是開放的，對於修改是封閉的。</span></span></span></li>
</ol>
<p>比較好的方式是使用<strong>Presenter</strong> : </p>
<ol>
<li>將相依物件注入到presenter。</li>
<li>在presenter內寫不同的日期格式轉換邏輯。</li>
<li>將presenter注入到view。</li>
</ol>
<h3 id="Presenter_Interface">Presenter Interface</h3><figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenterInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義了<code>showDateFormat()</code>，各語言必須在<code>showDateFormat()</code>使用Carbon的<code>format()</code>去轉換日期格式。</p>
<h3 id="Presenter-1">Presenter</h3><figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenter_uk.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenter_uk</span> <span class="keyword">implements</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'d M, Y'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DateFormatPresenter_uk</code>實現了<code>DateFormatPresenterInterface</code>，並將轉換成<code>英國</code>日期格式的Carbon的<code>format()</code>寫在<code>showDateFormat()</code>內。</p>
<figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenter_tw.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenter_tw</span> <span class="keyword">implements</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'Y/m/d'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DateFormatPresenter_tw</code>實現了<code>DateFormatPresenterInterface</code>，並將轉換成<code>台灣</code>日期格式的Carbon的<code>format()</code>寫在<code>showDateFormat()</code>內。</p>
<figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenter_us.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenter_us</span> <span class="keyword">implements</span> <span class="title">DateFormatPresenterInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示日期格式</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Carbon $date</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showDateFormat</span><span class="params">(Carbon <span class="variable">$date</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$date</span>-&gt;format(<span class="string">'M d, Y'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DateFormatPresenter_us</code>實現了<code>DateFormatPresenterInterface</code>，並將轉換成<code>美國</code>日期格式的Carbon的<code>format()</code>寫在<code>showDateFormat()</code>內。</p>
<h3 id="Presenter_Factory">Presenter Factory</h3><p>由於每個語言的日期格式都是一個presenter物件，那勢必遇到一個最基本的問題 : <code>我們必須根據不同的語言去new不同的presenter物件</code>，直覺我們可能會在controller去new presenter。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getAgeLargerThan(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$locale</span> = <span class="variable">$request</span>[<span class="string">'lang'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$locale</span> === <span class="string">'uk'</span>) &#123;</span><br><span class="line">        <span class="variable">$presenter</span> = <span class="keyword">new</span> DateFormatPresenter_uk();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$locale</span> === <span class="string">'tw'</span>) &#123;</span><br><span class="line">        <span class="variable">$presenter</span> = <span class="keyword">new</span> DateFormatPresenter_tw();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$presenter</span> = <span class="keyword">new</span> DateFormatPresenter_us();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這種寫法雖然可行，但有幾個問題 : </p>
<ol>
<li>違反<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 若將來有新的語言需求，只能不斷去修改<code>index()</code>，然後不斷的新增<code>elseif</code>，就算改用<code>switch</code>也是一樣。</li>
<li>違反<strong>SOLID</strong>的<strong>依賴反轉原則</strong> : controller直接根據語言去new相對應的class，高層直接相依於低層，直接將實作寫死在程式中。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span><strong>依賴反轉原則</strong> : 高層不應該依賴於低層，兩者都應該要依賴抽象；抽象不要依賴細節，細節要依賴抽象。</span></span></span></li>
<li>無法做unit test : 由於presenter直接new在controller，因此要測試時，無法對presenter做mock。</li>
</ol>
<p>比較好的方式是使用<strong>Factory Pattern</strong>。<br><figure class="highlight php"><figcaption><span>app/MyBlog/Presenters/DateFormatPresenterFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateFormatPresenterFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $locale</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(string <span class="variable">$locale</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        App::bind(DateFormatPresenterInterface::class,</span><br><span class="line">            <span class="string">'MyBlog\Presenters\DateFormatPresenter_'</span> . <span class="variable">$locale</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>Presenter Factory</code>的<code>create()</code>去取代new建立物件。</p>
<p>這裡當然可以在<code>create()</code>去寫<code>if...elseif</code>去建立presenter物件，不過這樣會違反<strong>SOLID</strong>的<strong>開放封閉原則</strong>，比較好的方式是改用<code>App::bind()</code>，直接根據<code>$locale</code>去binding相對應的class，這樣無論在怎麼新增<strong>語言</strong>與<strong>日期格式</strong>，controller與Presenter Factory都不用做任何修改，完全符合<strong>開放封閉原則</strong>。</p>
<h3 id="Controller">Controller</h3><figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">App</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Presenters</span>\<span class="title">DateFormatPresenterFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Repositories</span>\<span class="title">UserRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  UserRepository 注入的UserRepository */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$userRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> UserRepository $userRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository <span class="variable">$userRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userRepository = <span class="variable">$userRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Display a listing of the resource.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Request $request</span><br><span class="line">     * <span class="doctag">@param</span> DateFormatPresenterFactory $dateFormatPresenterFactory</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request <span class="variable">$request</span>,</span><br><span class="line">        DateFormatPresenterFactory <span class="variable">$dateFormatPresenterFactory</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getAgeLargerThan(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$locale</span> = (<span class="variable">$request</span>[<span class="string">'lang'</span>]) ? <span class="variable">$request</span>[<span class="string">'lang'</span>] : <span class="string">'us'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$dateFormatPresenterFactory</span>-&gt;create(<span class="variable">$locale</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>11行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span>  UserRepository 注入的UserRepository */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$userRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserController constructor.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> UserRepository $userRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository <span class="variable">$userRepository</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userRepository = <span class="variable">$userRepository</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>UserRepository</code>注入到<code>UserController</code>。</p>
<p>24行</p>
<pre><code class="php"><span class="comment">/**
 * Display a listing of the resource.
 *
 * <span class="doctag">@param</span> Request $request
 * <span class="doctag">@param</span> DateFormatPresenterFactory $dateFormatPresenterFactory
 * <span class="doctag">@return</span> \Illuminate\Http\Response
 */</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request <span class="variable">$request</span>,
    DateFormatPresenterFactory <span class="variable">$dateFormatPresenterFactory</span>)</span>
</span>{
    <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository-&gt;getAgeLargerThan(<span class="number">10</span>);

    <span class="variable">$locale</span> = (<span class="variable">$request</span>[<span class="string">'lang'</span>]) ? <span class="variable">$request</span>[<span class="string">'lang'</span>] : <span class="string">'us'</span>;

    <span class="variable">$dateFormatPresenterFactory</span>-&gt;create(<span class="variable">$locale</span>);

    <span class="keyword">return</span> view(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));
}
</code></pre>
<p><code>index()</code>會相依於<code>DateFormatPresenterFactory</code>，當然也可以在constructor一併將<code>DateFormatPresenterFactory</code>注入，但是考慮到<code>DateFormatPresenterFactory</code>只有<code>index()</code>使用，因此改用<strong>Method Injection</strong>的方式，只將<code>DateFormatPresenterFactory</code>注入到<code>index()</code>即可，這樣可以減輕constructor的壓力，不必所有相依物件都寫在constructor。</p>
<p>我們可以發現改用factory pattern之後，controller有了以下的優點 : </p>
<ol>
<li>符合<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 若將來有新的語言需求，controller完全不用做任何修改。</li>
<li>符合<strong>SOLID</strong>的<strong>依賴反轉原則</strong> : controller不再直接相依於presenter，而是改由factory去建立presenter。</li>
<li>可以做unit test : 由於將factory依賴注入進controller，因此要測試時，只要將要mock的presenter factory注入進controller即可。</li>
</ol>
<div class="alert alert-info"><i class="fa fa-info"></i>  何時該使用<strong>Constructor Injection</strong>或<strong>Method Injection</strong>呢?</div>
<ol>
<li>若該相依物件，有很多method要使用，可考慮使用<strong>Constructor Injection</strong>，如repository、service。</li>
<li>若該相依物件，只有單個method自己使用，可考慮使用<strong>Method Injection</strong>，如factory。</li>
</ol>
<h3 id="Blade">Blade</h3><p><img src="/images/laravel/laravel-present-dateformat/format001.png" alt="blade很乾淨"></p>
<p>使用<code>@inject</code>注入presenter，讓view也可以如controller一樣使用注入的物件。</p>
<p>使用presenter的<code>showDateFormat()</code>將日期轉成想要的格式。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  改用這種寫法，有幾個優點 :</div>
<ol>
<li>將<code>依需求顯示不同格式</code>的顯示邏輯改寫在presenter，解決寫在blade不容易維護的問題。</li>
<li>可對顯示邏輯做<strong>重構</strong>與<strong>物件導向</strong>。</li>
<li>符合<strong>SOLID</strong>的<strong>開放封閉原則</strong> : 將來若有新的語言，對於擴展是開放的 : 只要新增class實踐<code>DateFormatPresenterInterface</code>即可；對於修改是封閉的 : controller、factory interface、factory與view都不用做任何修改。</li>
<li>不單只有PHP可以使用service container，連blade也可以使用service container，甚至搭配service provider。</li>
<li>可單獨對presenter的<strong>顯示邏輯</strong>做unit test。</li>
</ol>
<h2 id="View">View</h2><hr>
<p>若使用了presenter輔助blade，再搭配<code>@inject()</code>注入到view，view就會非常乾淨，可專心處理<strong>將資料binding到HTML</strong>。</p>
<p>將來只有layout改變才會動到blade，若是顯示邏輯改變都是修改presenter。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Presenter使得顯示邏輯從blade中解放，不僅更容易維護、更容易擴展、更容易重複使用，且更容易測試。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a>上找到。</p>
<ol>
<li><a href="https://github.com/oomusou/Laravel51PresenterFormat_demo" target="_blank" rel="external">Presenter Demo: Format</a></li>
<li><a href="https://github.com/oomusou/Laravel51PresenterVisible_demo" target="_blank" rel="external">Presenter Demo: Visible</a></li>
<li><a href="https://github.com/oomusou/Laravel51Presenter_demo" target="_blank" rel="external">Presenter Demo: Date Format</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[使用Presenter輔助View]]>
    
    </summary>
    
      <category term="Blade" scheme="http://oomusou.io/tags/Blade/"/>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用Service模式?]]></title>
    <link href="http://oomusou.io/laravel/laravel-service/"/>
    <id>http://oomusou.io/laravel/laravel-service/</id>
    <published>2015-12-19T02:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>若將<strong>商業邏輯</strong>都寫在controller，會造成controller的肥大而難以維護，基於<strong>SOLID</strong>原則，我們應該使用<strong>Service</strong>模式輔助controller，將相關的商業邏輯封裝在不同的service，方便中大型專案的維護。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.1.22</p>
<h2 id="商業邏輯">商業邏輯</h2><hr>
<p>商業邏輯中，常見的如 : </p>
<ol>
<li><strong>牽涉到外部行為</strong> : 如<code>發送Email</code>，<code>使用外部API</code>…。</li>
<li><strong>使用PHP寫的邏輯</strong> : 如<code>根據購買的件數，有不同的折扣</code>。</li>
<li><strong>牽涉到多Repository</strong> : 如<code>付費後，需更改order與product table</code>。</li>
</ol>
<p>若將商業邏輯寫在controller，會造成controller肥大，日後難以維護。</p>
<h2 id="Service">Service</h2><hr>
<h3 id="牽涉到外部行為">牽涉到外部行為</h3><p>如<code>發送Email</code>，初學者常會在controller直接調用<code>Mail::queue()</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    Mail::queue(<span class="string">'email.index'</span>, <span class="variable">$request</span>-&gt;all(), <span class="function"><span class="keyword">function</span> <span class="params">(Message <span class="variable">$message</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$message</span>-&gt;sender(env(<span class="string">'MAIL_USERNAME'</span>));</span><br><span class="line">        <span class="variable">$message</span>-&gt;subject(env(<span class="string">'MAIL_SUBJECT'</span>));</span><br><span class="line">        <span class="variable">$message</span>-&gt;to(env(<span class="string">'MAIL_TO_ADDR'</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在中大型專案，會有幾個問題 : </p>
<ol>
<li>將<code>牽涉到外部行為</code>的商業邏輯寫在controller，造成controller的肥大難以維護。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span><code>Mail::queue()</code>只有一行可能無感，但很多外部服務需要一連串API，甚至還要有<code>try/catch</code>處理。</span></span></span></li>
<li>違反<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>外部行為</code>不應該寫在controller。</li>
<li>controller直接相依於外部行為，使得我們無法對controller做unit test。</li>
</ol>
<p>比較好的方式是使用service : </p>
<ol>
<li>將外部行為注入到service。</li>
<li>在service使用外部行為。</li>
<li>將service注入到controller。</li>
</ol>
<figure class="highlight php"><figcaption><span>myblog/Services/EmailService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Mail</span>\<span class="title">Mailer</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Mail</span>\<span class="title">Message</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Mailer */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$mail</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * EmailService constructor.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Mailer $mail</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Mailer <span class="variable">$mail</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;mail = <span class="variable">$mail</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 發送Email</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> array $request</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">(array <span class="variable">$request</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;mail-&gt;queue(<span class="string">'email.index'</span>, <span class="variable">$request</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Message <span class="variable">$message</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$message</span>-&gt;sender(env(<span class="string">'MAIL_USERNAME'</span>));</span><br><span class="line">            <span class="variable">$message</span>-&gt;subject(env(<span class="string">'MAIL_SUBJECT'</span>));</span><br><span class="line">            <span class="variable">$message</span>-&gt;to(env(<span class="string">'MAIL_TO_ADDR'</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第8行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> Mailer */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$mail</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * EmailService constructor.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> Mailer $mail</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Mailer <span class="variable">$mail</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;mail = <span class="variable">$mail</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>Mailer</code>注入到<code>EmailService</code>。</p>
<p>21行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 發送Email</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> array $request</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">(array <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;mail-&gt;queue(<span class="string">'email.index'</span>, <span class="variable">$request</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Message <span class="variable">$message</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$message</span>-&gt;sender(env(<span class="string">'MAIL_USERNAME'</span>));</span><br><span class="line">        <span class="variable">$message</span>-&gt;subject(env(<span class="string">'MAIL_SUBJECT'</span>));</span><br><span class="line">        <span class="variable">$message</span>-&gt;to(env(<span class="string">'MAIL_TO_ADDR'</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將<code>發送Email</code>的商業邏輯寫在<code>send()</code>。</p>
<p>不是使用<code>Mail</code> facade，而是使用注入的<code>$this-&gt;mail</code>。</p>
<figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Services</span>\<span class="title">EmailService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  EmailService 注入的EmailService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$emailService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> EmailService $emailService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(EmailService <span class="variable">$emailService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;emailService = <span class="variable">$emailService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Store a newly created resource in storage.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;emailService-&gt;send(<span class="variable">$request</span>-&gt;all());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第9行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span>  EmailService 注入的EmailService */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$emailService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserController constructor.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> EmailService $emailService</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(EmailService <span class="variable">$emailService</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;emailService = <span class="variable">$emailService</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>EmailService</code>注入到<code>UserController</code>。</p>
<p>22行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Store a newly created resource in storage.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="line"> * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;emailService-&gt;send(<span class="variable">$request</span>-&gt;all());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>從原本直接相依於<code>Mail</code> facade，改成相依於注入的<code>EmailService</code>。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  改用這種寫法，有幾個優點 :</div>
<ol>
<li>將<code>外部行為</code>寫在service，解決controller肥大問題。</li>
<li>符合<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>外部行為</code>寫在service，沒寫在controller。</li>
<li>符合<strong>SOLID</strong>的<strong>依賴反轉原則</strong> : controller並非直接相依於service，而是將service<strong>依賴注入</strong>進controller。</li>
</ol>
<h3 id="使用PHP寫的邏輯">使用PHP寫的邏輯</h3><p>如<code>根據購買的件數，有不同的折扣</code>，初學者常會在controller直接寫<code>if...else</code>邏輯。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$qty</span> = <span class="variable">$request</span>-&gt;input(<span class="string">'qty'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$price</span> = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$qty</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable">$discount</span> = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> (<span class="variable">$qty</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable">$discount</span> = <span class="number">0.9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> (<span class="variable">$qty</span> == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="variable">$discount</span> = <span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$discount</span> = <span class="number">0.7</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$total</span> = <span class="variable">$price</span> * <span class="variable">$qty</span> * <span class="variable">$discount</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$total</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在中大型專案，會有幾個問題 : </p>
<ol>
<li>將<code>PHP寫的</code>商業邏輯直接寫在controller，造成controller的肥大難以維護。</li>
<li>違反<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>商業邏輯</code>不應該寫在controller。</li>
<li>違反<strong>SOLID</strong>的<strong>單一職責原則</strong> : 若未來想要改變<code>折扣</code>與<code>加總</code>的算法，都需要改到此method，也就是說，此method同時包含了<code>計算折扣</code>與<code>計算加總</code>的職責，因此違反<strong>SOLID</strong>的<strong>單一職責原則</strong>。</li>
<li>直接寫在controller的邏輯<code>無法</code>被<code>其他</code>controller使用。</li>
</ol>
<p>比較好的方式是使用service。</p>
<ol>
<li>將相依物件注入到service。</li>
<li>在service寫PHP邏輯使用相依物件。</li>
<li>將service注入到controller。</li>
</ol>
<figure class="highlight php"><figcaption><span>myblog/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">MyBlog</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算折扣</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> integer $qty</span><br><span class="line">     * <span class="doctag">@return</span> float</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDiscount</span><span class="params">(<span class="variable">$qty</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$qty</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$qty</span> == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.9</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$qty</span> == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.8</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算最後價錢</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> integer $qty</span><br><span class="line">     * <span class="doctag">@param</span> float $discount</span><br><span class="line">     * <span class="doctag">@return</span> float</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTotal</span><span class="params">(<span class="variable">$qty</span>, <span class="variable">$discount</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">500</span> * <span class="variable">$qty</span> * <span class="variable">$discount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第5行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算折扣</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> integer $qty</span><br><span class="line"> * <span class="doctag">@return</span> float</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDiscount</span><span class="params">(<span class="variable">$qty</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$qty</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$qty</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.9</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$qty</span> == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.8</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>為了符合<strong>SOLID</strong>的<strong>單一職責原則</strong>，將<code>計算折扣</code>獨立成<code>getDiscount()</code>，將PHP寫的<code>判斷邏輯</code>寫在裡面。</p>
<p>25行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算最後價錢</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> integer $qty</span><br><span class="line"> * <span class="doctag">@param</span> float $discount</span><br><span class="line"> * <span class="doctag">@return</span> float</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTotal</span><span class="params">(<span class="variable">$qty</span>, <span class="variable">$discount</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">500</span> * <span class="variable">$qty</span> * <span class="variable">$discount</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>為了符合<strong>SOLID</strong>的<strong>單一職責原則</strong>，將<code>計算加總</code>獨立成<code>getTotal()</code>，將PHP寫的<code>計算邏輯</code>寫在裡面。</p>
<figure class="highlight php"><figcaption><span>app/Http/Controllers/OrderController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">MyBlog</span>\<span class="title">Services</span>\<span class="title">OrderService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> OrderService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orderService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderController constructor.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> OrderService $orderService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderService <span class="variable">$orderService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orderService = <span class="variable">$orderService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Store a newly created resource in storage.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$qty</span> = <span class="variable">$request</span>-&gt;input(<span class="string">'qty'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$discount</span> = <span class="variable">$this</span>-&gt;orderService-&gt;getDiscount(<span class="variable">$qty</span>);</span><br><span class="line">        <span class="variable">$total</span> = <span class="variable">$this</span>-&gt;orderService-&gt;getTotal(<span class="variable">$qty</span>, <span class="variable">$discount</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$total</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第9行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** <span class="doctag">@var</span> OrderService */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$orderService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * OrderController constructor.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> OrderService $orderService</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderService <span class="variable">$orderService</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;orderService = <span class="variable">$orderService</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>OrderService</code>注入到<code>UserController</code>。</p>
<p>22行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Store a newly created resource in storage.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="line"> * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$qty</span> = <span class="variable">$request</span>-&gt;input(<span class="string">'qty'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$discount</span> = <span class="variable">$this</span>-&gt;orderService-&gt;getDiscount(<span class="variable">$qty</span>);</span><br><span class="line">    <span class="variable">$total</span> = <span class="variable">$this</span>-&gt;orderService-&gt;getTotal(<span class="variable">$qty</span>, <span class="variable">$discount</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$total</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原本的<code>if...else</code>邏輯改成呼叫<code>OrderService</code>，controller變得非常乾淨，也達成原本controller<code>接收HTTP request，調用其他class</code>的責任。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  改用這種寫法，有幾個優點 :</div>
<ol>
<li>將<code>PHP寫的</code>商業邏輯寫在service，解決controller肥大問題。</li>
<li>符合<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>商業邏輯</code>寫在service，沒寫在controller。</li>
<li>符合<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>計算折扣</code>與<code>計算加總</code>分開在不同method，且歸屬於<code>OrderService</code>，而非<code>OrderController</code>。</li>
<li>符合<strong>SOLID</strong>的<strong>依賴反轉原則</strong> : controller並非直接相依於service，而是將service<strong>依賴注入</strong>進controller。</li>
<li>其他controller也可以<code>重複使用</code>此段商業邏輯。</li>
</ol>
<h3 id="牽涉到多Repository">牽涉到多Repository</h3><p>如<code>付費後，需更改order與product table</code>，初學者常會在controller直接寫<code>資料庫邏輯</code>。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    DB::transaction(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(<span class="variable">$id</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = Order::find(<span class="variable">$id</span>);</span><br><span class="line">        <span class="variable">$order</span>-&gt;status = <span class="string">'Y'</span>;</span><br><span class="line">        <span class="variable">$productId</span> = <span class="variable">$order</span>-&gt;product_id;</span><br><span class="line">        <span class="variable">$order</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$product</span> = Product::find(<span class="variable">$productId</span>);</span><br><span class="line">        <span class="variable">$product</span>-&gt;stock = <span class="variable">$product</span>-&gt;stock -<span class="number">1</span>;</span><br><span class="line">        <span class="variable">$product</span>-&gt;save();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在中大型專案，會有幾個問題 : </p>
<ol>
<li>將<code>資料庫邏輯</code>直接寫在controller，造成controller的肥大難以維護。</li>
<li>違反<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>資料庫邏輯</code>不應該寫在controller。</li>
<li>違反<strong>SOLID</strong>的<strong>單一職責原則</strong> : 若未來想要改變變更<code>order</code>與<code>produtct</code>的資料庫邏輯，都需要改到此method，也就是說，此method同時包含了修改<code>order</code>與<code>product</code>職責，因此違反<strong>SOLID</strong>的<strong>單一職責原則</strong>。</li>
<li>controller直接相依於model，使得我們無法對controller做unit test。</li>
</ol>
<p>根據之前經驗，我們知道<code>資料庫邏輯</code>應該寫在repository，但這個資料庫邏輯牽涉到兩個table，單獨寫在<code>OrderRepository</code>或<code>ProductRepository</code>都違反<strong>SOLID</strong>的<strong>單一職責原則</strong>，那該寫在哪裡呢？</p>
<p>比較好的方式是使用service。</p>
<ol>
<li>將repository注入到service。</li>
<li>在service內使用多repository。</li>
<li>將service注入到controller。</li>
</ol>
<p>對<code>order</code>與<code>product</code>的各自table的存取，還是要寫該各自repository。</p>
<p>一般來說，特殊的資料庫邏輯會在query上，如複雜的join，而insert, update, delete大部分都相同，因此可將每個repository常用的功能pull member up到上層的abstract class。</p>
<figure class="highlight php"><figcaption><span>myblog/Repositories/EloquentRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">MyBlog</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EloquentRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span>  注入的model</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 根據pk找資料</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> $id</span><br><span class="line">     * <span class="doctag">@param</span> array $columns</span><br><span class="line">     * <span class="doctag">@return</span> mixed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">(<span class="variable">$id</span>, <span class="variable">$columns</span> = [<span class="string">'*'</span>])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model</span><br><span class="line">            -&gt;find(<span class="variable">$id</span>, <span class="variable">$columns</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 根據一般欄位找資料</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> $attribute</span><br><span class="line">     * <span class="doctag">@param</span> $value</span><br><span class="line">     * <span class="doctag">@param</span> array $columns</span><br><span class="line">     * <span class="doctag">@return</span> mixed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findBy</span><span class="params">(<span class="variable">$attribute</span>, <span class="variable">$value</span>, <span class="variable">$columns</span> = [<span class="string">'*'</span>])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model</span><br><span class="line">            -&gt;where(<span class="variable">$attribute</span>, <span class="string">'='</span>, <span class="variable">$value</span>)</span><br><span class="line">            -&gt;first(<span class="variable">$columns</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳全部資料</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> array $columns</span><br><span class="line">     * <span class="doctag">@return</span> mixed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">all</span><span class="params">(<span class="variable">$columns</span> = [<span class="string">'*'</span>])</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model</span><br><span class="line">            -&gt;all(<span class="variable">$columns</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳分頁資料</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> int $perPage</span><br><span class="line">     * <span class="doctag">@param</span> array $columns</span><br><span class="line">     * <span class="doctag">@return</span> mixed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">paginate</span><span class="params">(<span class="variable">$perPage</span> = <span class="number">15</span>, <span class="variable">$columns</span> = [<span class="string">'*'</span>])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model</span><br><span class="line">            -&gt;paginate(<span class="variable">$perPage</span>, <span class="variable">$columns</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 新增</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> array $data</span><br><span class="line">     * <span class="doctag">@return</span> mixed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(array <span class="variable">$data</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model</span><br><span class="line">            -&gt;create(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 修改</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> array $data</span><br><span class="line">     * <span class="doctag">@param</span> $id</span><br><span class="line">     * <span class="doctag">@param</span> string $attribute</span><br><span class="line">     * <span class="doctag">@return</span> mixed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(array <span class="variable">$data</span>, <span class="variable">$id</span>, <span class="variable">$attribute</span>=<span class="string">"id"</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model</span><br><span class="line">            -&gt;where(<span class="variable">$attribute</span>, <span class="string">'='</span>, <span class="variable">$id</span>)</span><br><span class="line">            -&gt;update(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> $id</span><br><span class="line">     * <span class="doctag">@return</span> mixed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">(<span class="variable">$id</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model</span><br><span class="line">            -&gt;destroy(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>包含了最常用的query，如<code>find()</code>，<code>findBy()</code>，<code>all()</code>與<code>paginate()</code>，與<code>create()</code>、<code>update()</code>與<code>delete()</code>。</p>
<p>這些並非絕對，你可以是你本身的需求，更改abstract的method。</p>
<figure class="highlight php"><figcaption><span>myblog/Repositories/OrderRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Order</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderRepository</span> <span class="keyword">extends</span> <span class="title">EloquentRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderRepository constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Order $order</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 將訂單狀態改成已付費Y</span><br><span class="line">     * 並傳回product_id</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> integer $id</span><br><span class="line">     * <span class="doctag">@return</span> integer</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateStatusToY</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;find(<span class="variable">$id</span>);</span><br><span class="line">        <span class="variable">$order</span>-&gt;status = <span class="string">'Y'</span>;</span><br><span class="line">        <span class="variable">$productId</span> = <span class="variable">$order</span>-&gt;product_id;</span><br><span class="line">        <span class="variable">$order</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$productId</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第3行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderRepository</span> <span class="keyword">extends</span> <span class="title">EloquentRepository</span></span></span><br></pre></td></tr></table></figure>
<p>繼承於<code>EloquentRepository</code>，因此常用的method都繼承於<code>EloquentRepository</code>。</p>
<p>第5行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * OrderRepository constructor.</span><br><span class="line"> * <span class="doctag">@param</span> Order $order</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>Order</code> model注入到<code>OrderRepository</code>。</p>
<p>17行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 將訂單狀態改成已付費Y</span><br><span class="line"> * 並傳回product_id</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> integer $id</span><br><span class="line"> * <span class="doctag">@return</span> integer</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateStatusToY</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;find(<span class="variable">$id</span>);</span><br><span class="line">    <span class="variable">$order</span>-&gt;status = <span class="string">'Y'</span>;</span><br><span class="line">    <span class="variable">$productId</span> = <span class="variable">$order</span>-&gt;product_id;</span><br><span class="line">    <span class="variable">$order</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$productId</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>為了符合<strong>SOLID</strong>的<strong>單一職責原則</strong>，將修改<code>order</code>部分獨立成<code>updateStatusToY()</code>，將<code>資料庫邏輯</code>寫在裡面。</p>
<figure class="highlight php"><figcaption><span>myblog/Repositories/ProductRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Product</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductRepository</span> <span class="keyword">extends</span> <span class="title">EloquentRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Product */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$product</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * ProductRepository constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Product $product</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Product <span class="variable">$product</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;product = <span class="variable">$product</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 將已售出的產品庫存減1</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> integer $productId</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stockMinusOne</span><span class="params">(<span class="variable">$productId</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$product</span> = <span class="variable">$this</span>-&gt;find(<span class="variable">$productId</span>);</span><br><span class="line">        <span class="variable">$product</span>-&gt;stock = <span class="variable">$product</span>-&gt;stock - <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$product</span>-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第5行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductRepository</span> <span class="keyword">extends</span> <span class="title">EloquentRepository</span></span></span><br></pre></td></tr></table></figure></p>
<p>繼承於<code>EloquentRepository</code>，因此常用的method都繼承於<code>EloquentRepository</code>。</p>
<p>第7行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> Product */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$product</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * ProductRepository constructor.</span><br><span class="line"> * <span class="doctag">@param</span> Product $product</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Product <span class="variable">$product</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;product = <span class="variable">$product</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>Product</code> model注入到<code>ProductRepository</code>。</p>
<p>19行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 將已售出的產品庫存減1</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> integer $productId</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stockMinusOne</span><span class="params">(<span class="variable">$productId</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$product</span> = <span class="variable">$this</span>-&gt;find(<span class="variable">$productId</span>);</span><br><span class="line">    <span class="variable">$product</span>-&gt;stock = <span class="variable">$product</span>-&gt;stock - <span class="number">1</span>;</span><br><span class="line">    <span class="variable">$product</span>-&gt;save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>為了符合<strong>SOLID</strong>的<strong>單一職責原則</strong>，將修改<code>product</code>部分獨立成<code>stockMinusOne()</code>，將<code>資料庫邏輯</code>寫在裡面。</p>
<figure class="highlight php"><figcaption><span>myblog/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">DB</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Repositories</span>\<span class="title">OrderRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Repositories</span>\<span class="title">ProductRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> OrderRepository */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orderRepository</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> ProductRepository */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$productRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> OrderRepository $orderRepository</span><br><span class="line">     * <span class="doctag">@param</span> ProductRepository $productRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderRepository <span class="variable">$orderRepository</span>, </span><br><span class="line">        ProductRepository <span class="variable">$productRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orderRepository = <span class="variable">$orderRepository</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;productRepository = <span class="variable">$productRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 結帳後負責更新資料庫</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> $id</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        DB::transaction(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(<span class="variable">$id</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$productId</span> = <span class="variable">$this</span>-&gt;orderRepository-&gt;updateStatusToY(<span class="variable">$id</span>);</span><br><span class="line">            <span class="variable">$this</span>-&gt;productRepository-&gt;stockMinusOne(<span class="variable">$productId</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第9行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> OrderRepository */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$orderRepository</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> ProductRepository */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$productRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * OrderService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> OrderRepository $orderRepository</span><br><span class="line"> * <span class="doctag">@param</span> ProductRepository $productRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderRepository <span class="variable">$orderRepository</span>,</span><br><span class="line">    ProductRepository <span class="variable">$productRepository</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;orderRepository = <span class="variable">$orderRepository</span>;</span><br><span class="line">    <span class="variable">$this</span>-&gt;productRepository = <span class="variable">$productRepository</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>OrderRepository</code>與<code>ProductRepository</code>注入到<code>OrderService</code>。</p>
<p>26行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 結帳後負責更新資料庫</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> $id</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkout</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    DB::transaction(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(<span class="variable">$id</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$productId</span> = <span class="variable">$this</span>-&gt;orderRepository-&gt;updateStatusToY(<span class="variable">$id</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;productRepository-&gt;stockMinusOne(<span class="variable">$productId</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原本牽涉多table的資料邏輯寫在<code>OrderService</code>，呼叫<code>OrderRepository</code>與<code>ProductRepository</code>去更新資料庫。</p>
<figure class="highlight php"><figcaption><span>app/Http/Controllers/OrderController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Services</span>\<span class="title">OrderService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> OrderService */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$orderService</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderController constructor.</span><br><span class="line">     * <span class="doctag">@param</span> OrderService $orderService</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderService <span class="variable">$orderService</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orderService = <span class="variable">$orderService</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Store a newly created resource in storage.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> $id</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;orderService-&gt;checkout(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第6行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> OrderService */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$orderService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * OrderController constructor.</span><br><span class="line"> * <span class="doctag">@param</span> OrderService $orderService</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(OrderService <span class="variable">$orderService</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;orderService = <span class="variable">$orderService</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>OrderService</code>注入到<code>OrderController</code>。</p>
<p>18行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span><br><span class="line">  * Store a newly created resource in storage.</span><br><span class="line">  *</span><br><span class="line">  * <span class="doctag">@param</span> $id</span><br><span class="line">  * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;orderService-&gt;checkout(<span class="variable">$id</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>controller就非常乾淨了，將<code>$id</code>傳入<code>OrderService</code>的<code>checkout()</code>即可。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  改用這種寫法，有幾個優點 :</div>
<ol>
<li>將<code>牽涉到多Repository</code>的資料庫邏輯由在service去調配，解決controller肥大問題。</li>
<li>符合<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>資料庫邏輯</code>寫在repository，沒寫在controller。</li>
<li>符合<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>order</code>與<code>product</code>的資料庫邏輯分別寫在<code>不同</code>repository，最後由<code>OrderService</code>去調配，而非單獨寫在<code>OrderRepository</code>或<code>ProductRepository</code>，因為寫在哪個repository都不合適。</li>
<li>符合<strong>SOLID</strong>的<strong>依賴反轉原則</strong> : controller並非直接相依於service，而是將service<strong>依賴注入</strong>進controller，且service也非直接相依於repository，而是將repository<strong>依賴注入</strong>進service。</li>
<li>其他service也可以<code>重複使用</code>此段資料庫邏輯。</li>
</ol>
<h2 id="Controller">Controller</h2><hr>
<p><strong>牽涉到外部行為</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;emailService-&gt;send(<span class="variable">$request</span>-&gt;all());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>使用PHP寫的邏輯</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$qty</span> = <span class="variable">$request</span>-&gt;input(<span class="string">'qty'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$discount</span> = <span class="variable">$this</span>-&gt;orderService-&gt;getDiscount(<span class="variable">$qty</span>);</span><br><span class="line">    <span class="variable">$total</span> = <span class="variable">$this</span>-&gt;orderService-&gt;getTotal(<span class="variable">$qty</span>, <span class="variable">$discount</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$total</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>牽涉到多repository</strong><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> store(<span class="variable">$id</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$this-</span>&gt;orderService-&gt;checkout(<span class="variable">$id</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若使用了repository與service輔助controller，再搭配DI與service container注入controller，現在controller就非常乾淨，能專心處理<code>接收HTTP request，調用其他class</code>的職責了。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>假如你的controller能完全不牽涉到任何邏輯，就可以不用寫unit test，只要寫service與repository的unit test即可。</span></span></span></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上會有很多service，須自行依照<strong>SOLID</strong>原則去判斷是否該建立service。</li>
<li>Service使得商業邏輯從controller中解放，不僅更容易維護、更容易擴展、更容易重複使用，且更容易測試。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a>上找到。</p>
<ol>
<li><a href="https://github.com/oomusou/Laravel51ServiceExternal_demo" target="_blank" rel="external">External API</a></li>
<li><a href="https://github.com/oomusou/Laravel51ServiceIfElse_demo" target="_blank" rel="external">If…else</a></li>
<li><a href="https://github.com/oomusou/aravel51ServiceMultiRepository_demo" target="_blank" rel="external">Multi Repository</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[使用Service輔助Controller]]>
    
    </summary>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用Repository模式?]]></title>
    <link href="http://oomusou.io/laravel/laravel-repository/"/>
    <id>http://oomusou.io/laravel/laravel-repository/</id>
    <published>2015-12-19T01:23:43.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>若將<strong>資料庫邏輯</strong>都寫在model，會造成model的肥大而難以維護，基於<strong>SOLID</strong>原則，我們應該使用<strong>Repository</strong>模式輔助model，將相關的資料庫邏輯封裝在不同的repository，方便中大型專案的維護。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.1.22</p>
<h2 id="資料庫邏輯">資料庫邏輯</h2><hr>
<p>在CRUD中，CUD比較穩定，但R的部分則千變萬化，大部分的資料庫邏輯都在描述R的部分，若將資料庫邏輯寫在controller或model都不適當，會造成controller與model的肥大，日後難以維護。</p>
<h2 id="Model">Model</h2><hr>
<p>使用repository之後，model僅當成Eloquent class即可，<code>不要</code>包含資料庫邏輯，僅保留以下部分 : </p>
<ul>
<li><strong>Property</strong> : 如<code>$table</code>，<code>$fillable</code>…等。</li>
<li><strong>Mutator</strong>: 包括mutator與accessor。</li>
<li><strong>Method</strong> : relation類的method，如使用<code>hasMany()</code>與<code>belongsTo()</code>。</li>
<li><strong>註解</strong> : 因為Eloquent會根據資料庫欄位<strong>動態產生</strong>property與method，等。若使用<a href="https://github.com/barryvdh/laravel-ide-helper" target="_blank" rel="external">Laravel IDE Helper</a>，會直接在model加上<code>@property</code>與<code>@method</code>描述model的動態property與method。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>由於我們已經將<code>User.php</code>從<code>app</code>目錄搬到<code>myblog</code>目錄，若直接使用<code>php artisan ide-helper:models</code>會找不到model，必須自己指定目錄 : <code>php artisan ide-helper:models --dir=&quot;app/MyBlog&quot;</code></span></span></span></li>
</ul>
<figure class="highlight php"><figcaption><span>myblog/User.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Passwords</span>\<span class="title">CanResetPassword</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">Authorizable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span> <span class="title">as</span> <span class="title">AuthenticatableContract</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">Authorizable</span> <span class="title">as</span> <span class="title">AuthorizableContract</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">CanResetPassword</span> <span class="title">as</span> <span class="title">CanResetPasswordContract</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * MyBlog\User</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@property</span> integer $id</span><br><span class="line"> * <span class="doctag">@property</span> string $name</span><br><span class="line"> * <span class="doctag">@property</span> string $email</span><br><span class="line"> * <span class="doctag">@property</span> string $password</span><br><span class="line"> * <span class="doctag">@property</span> string $remember_token</span><br><span class="line"> * <span class="doctag">@property</span> \Carbon\Carbon $created_at</span><br><span class="line"> * <span class="doctag">@property</span> \Carbon\Carbon $updated_at</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereId($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereName($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereEmail($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User wherePassword($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereRememberToken($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereCreatedAt($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereUpdatedAt($value)</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> <span class="keyword">implements</span> <span class="title">AuthenticatableContract</span>,</span><br><span class="line">                                    <span class="title">AuthorizableContract</span>,</span><br><span class="line">                                    <span class="title">CanResetPasswordContract</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Authenticatable</span>, <span class="title">Authorizable</span>, <span class="title">CanResetPassword</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The database table used by the model.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">'users'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes that are mass assignable.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [<span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes excluded from the model's JSON form.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hidden</span> = [<span class="string">'password'</span>, <span class="string">'remember_token'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 
<p>12行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * MyBlog\User</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@property</span> integer $id</span><br><span class="line"> * <span class="doctag">@property</span> string $name</span><br><span class="line"> * <span class="doctag">@property</span> string $email</span><br><span class="line"> * <span class="doctag">@property</span> string $password</span><br><span class="line"> * <span class="doctag">@property</span> string $remember_token</span><br><span class="line"> * <span class="doctag">@property</span> \Carbon\Carbon $created_at</span><br><span class="line"> * <span class="doctag">@property</span> \Carbon\Carbon $updated_at</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereId($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereName($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereEmail($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User wherePassword($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereRememberToken($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereCreatedAt($value)</span><br><span class="line"> * <span class="doctag">@method</span> static \Illuminate\Database\Query\Builder|\MyBlog\User whereUpdatedAt($value)</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
<p>IDE-Helper幫我們替model加上註解，讓我們可以在PhpStorm的auto complete與inspection使用model的property與method。</p>
<h2 id="Repository">Repository</h2><hr>
<p>初學者常會在controller直接調用model寫資料庫邏輯 : </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$users</span> = User::where(<span class="string">'age'</span>, <span class="string">'&gt;'</span>, <span class="number">20</span>)</span><br><span class="line">                -&gt;orderBy(<span class="string">'age'</span>)</span><br><span class="line">                -&gt;get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>資料庫邏輯是要<code>抓20歲以上的資料</code>。</p>
<p>在中大型專案，會有幾個問題 : </p>
<ol>
<li>將資料庫邏輯寫在controller，造成controller的肥大難以維護。</li>
<li>違反<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>資料庫邏輯</code>不應該寫在controller。</li>
<li>controller直接相依於model，使得我們無法對controller做unit test。</li>
</ol>
<p>比較好的方式是使用repository : </p>
<ol>
<li>將model注入到repository。</li>
<li>將資料庫邏輯寫在repository。</li>
<li>將repository注入到service或controller。</li>
</ol>
<figure class="highlight php"><figcaption><span>myblog/Repositories/UserRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Doctrine</span>\<span class="title">Common</span>\<span class="title">Collections</span>\<span class="title">Collection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> User 注入的User model */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserRepository constructor.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> User $user</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User <span class="variable">$user</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳大於?年紀的資料</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> integer $age</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAgeLargerThan</span><span class="params">(<span class="variable">$age</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user</span><br><span class="line">            -&gt;where(<span class="string">'age'</span>, <span class="string">'&gt;'</span>, <span class="variable">$age</span>)</span><br><span class="line">            -&gt;orderBy(<span class="string">'age'</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 
<p>第8行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> User 注入的User model */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserRepository constructor.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> User $user</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User <span class="variable">$user</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>User</code> model注入到<code>UserRepository</code>。<br>22行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 回傳大於?年紀的資料</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> integer $age</span><br><span class="line"> * <span class="doctag">@return</span> Collection</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAgeLargerThan</span><span class="params">(<span class="variable">$age</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;user</span><br><span class="line">        -&gt;where(<span class="string">'age'</span>, <span class="string">'&gt;'</span>, <span class="variable">$age</span>)</span><br><span class="line">        -&gt;orderBy(<span class="string">'age'</span>)</span><br><span class="line">        -&gt;get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將<code>抓20歲以上的資料</code>的資料庫邏輯寫在<code>getAgeLargerThan()</code>。</p>
<p>不是使用<code>User</code> facade，而是使用注入的<code>$this-&gt;user</code>。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>這裡一樣可以使用<code>User</code> facade的方式，而且這裡使用facade，並不會影響可測試性，因為實務上在測試repository時，會真的去讀寫資料庫，而不會去mock <code>User</code> model，不過個人習慣全部使用<code>依賴注入</code>的方式，統一整個專案的寫法風格。</span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">Repositories</span>\<span class="title">UserRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  UserRepository 注入的UserRepository */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$userRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * UserController constructor.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> UserRepository $userRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository <span class="variable">$userRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;userRepository = <span class="variable">$userRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Display a listing of the resource.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository</span><br><span class="line">            -&gt;getAgeLargerThan(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第8行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span>  UserRepository 注入的UserRepository */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$userRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * UserController constructor.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> UserRepository $userRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserRepository <span class="variable">$userRepository</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;userRepository = <span class="variable">$userRepository</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將相依的<code>UserRepository</code>注入到<code>UserController</code>。</p>
<p>26行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Display a listing of the resource.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$users</span> = <span class="variable">$this</span>-&gt;userRepository</span><br><span class="line">        -&gt;getAgeLargerThan(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>從原本直接相依於<code>User</code> model，改成相依於注入的<code>UserRepository</code>。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  改用這種寫法，有幾個優點 :</div>
<ol>
<li>將<code>資料庫邏輯</code>寫在repository，解決controller肥大問題。</li>
<li>符合<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>資料庫邏輯</code>寫在repository，沒寫在controller。</li>
<li>符合<strong>SOLID</strong>的<strong>依賴反轉原則</strong> : controller並非直接相依於repository，而是將repository<strong>依賴注入</strong>進controller。</li>
</ol>
<div class="alert alert-info"><i class="fa fa-info"></i>  是否該使用Laravel 4.2的Query Scope？</div>
<p>Laravel 4.2就有query scope，到5.1都還留著，它讓我們可以將商業邏輯寫在model，解決了<code>維護</code>與<code>重複使用</code>的問題。</p>
<figure class="highlight php"><figcaption><span>myblog/User.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Builder</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Passwords</span>\<span class="title">CanResetPassword</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">Authorizable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span> <span class="title">as</span> <span class="title">AuthenticatableContract</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">Authorizable</span> <span class="title">as</span> <span class="title">AuthorizableContract</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">CanResetPassword</span> <span class="title">as</span> <span class="title">CanResetPasswordContract</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * (註解:略)</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> <span class="keyword">implements</span> <span class="title">AuthenticatableContract</span>,</span><br><span class="line">                                    <span class="title">AuthorizableContract</span>,</span><br><span class="line">                                    <span class="title">CanResetPasswordContract</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Authenticatable</span>, <span class="title">Authorizable</span>, <span class="title">CanResetPassword</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The database table used by the model.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">'users'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes that are mass assignable.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [<span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The attributes excluded from the model's JSON form.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@var</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hidden</span> = [<span class="string">'password'</span>, <span class="string">'remember_token'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳大於?年紀的資料</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> Builder $query</span><br><span class="line">     * <span class="doctag">@param</span> integer $age</span><br><span class="line">     * <span class="doctag">@return</span> Builder</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeGetAgerLargerThan</span><span class="params">(<span class="variable">$query</span>, <span class="variable">$age</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$query</span>-&gt;where(<span class="string">'age'</span>, <span class="string">'&gt;'</span>, <span class="variable">$age</span>)</span><br><span class="line">            -&gt;orderBy(<span class="string">'age'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>42行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 回傳大於?年紀的資料</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> Builder $query</span><br><span class="line"> * <span class="doctag">@param</span> integer $age</span><br><span class="line"> * <span class="doctag">@return</span> Builder</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeGetAgerLargerThan</span><span class="params">(<span class="variable">$query</span>, <span class="variable">$age</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$query</span>-&gt;where(<span class="string">'age'</span>, <span class="string">'&gt;'</span>, <span class="variable">$age</span>)</span><br><span class="line">        -&gt;orderBy(<span class="string">'age'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Query scope必須以<code>scope</code>為prefix，第1個參數為query builder，一定要加，是Laravel要用的。</p>
<p>第2個參數以後為自己要傳入的參數。</p>
<p>由於回傳也必須是一個query builder，因此不加上<code>get()</code>。</p>
<figure class="highlight php"><figcaption><span>app/Http/Controllers/UserController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">MyBlog</span>\<span class="title">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Display a listing of the resource.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$users</span> = User::getAgerLargerThan(<span class="number">20</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'users.index'</span>, compact(<span class="string">'users'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在controller呼叫query scope時，不要加上prefix，由於其本質是query builder，所以還要加上<code>get()</code>才能抓到Collection。</p>
<p>由於query scope是寫在model，不是寫在controller，所以基本上解決了controller肥大與違反<strong>SOLID</strong>的<strong>單一職責原則</strong>的問題，controller也可以重複使用query scope，也可以對controller進行unit test，已經比直接將<code>資料庫邏輯</code>寫在controller好很多了。</p>
<p>不過若在中大型專案，仍有以下問題 : </p>
<ol>
<li>Model已經有原來的責任，若再加上query scope，造成model過於肥大難以維護。</li>
<li>若資料庫邏輯很多，可以拆成多repository，可是卻很難拆成多model。</li>
</ol>
<h2 id="Unit_Test">Unit Test</h2><hr>
<p>由於篇幅的關係，將repository的測試獨立成專文討論，請參考<a href="/tdd/tdd-repository-testing/">如何對Repository做測試？</a></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>實務上可以一開始1個model對應1個repository即可，若日後資料庫邏輯過多，導致單一repository過大，可以在考慮拆開多個repository，只要秉持<code>高內聚，低耦合</code>的原則，將最相關的資料庫邏輯放在一個repository內，不用再侷限1個model只對應1個repository。</li>
<li>若各repository有共用的method，可考慮重構的<strong>pull members up</strong>將共用的method放到上層的abstract <code>EloquentRepository</code> class，詳細請參考<a href="/laravel/laravel-service/#牽涉到多Repository">如何使用Service？</a></li>
<li>Repository使得資料庫邏輯從controller或model中解放，不僅更容易維護、更容易擴展、更容易重複使用，且更容易測試。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/" target="_blank" rel="external">GitHub</a>上找到。</p>
<ol>
<li><a href="https://github.com/oomusou/Laravel51Repository_demo" target="_blank" rel="external">Repository</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[使用Repository輔助Model]]>
    
    </summary>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Laravel的中大型專案架構]]></title>
    <link href="http://oomusou.io/laravel/laravel-architecture/"/>
    <id>http://oomusou.io/laravel/laravel-architecture/</id>
    <published>2015-12-19T00:00:02.000Z</published>
    <updated>2016-03-22T14:03:51.000Z</updated>
    <content type="html"><![CDATA[<p>初學者學習Laravel時分兩種，一種是乖乖的將程式填入MVC架構內，導致controller與model異常的肥大，日後一樣很難維護；一種是常常不知道程式該寫在哪一個class內而猶豫不決，畢竟傳統PHP都是一個頁面一個檔案。本文整理出最適合Laravel的中大型專案架構，兼具<strong>容易維護</strong>、<strong>容易擴充</strong>與<strong>容易重複使用</strong>的特點，並且<strong>容易測試</strong>。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.1.24</p>
<h2 id="MVC是一個巨大的誤會">MVC是一個巨大的誤會</h2><hr>
<p>受RoR的影響，初學者常認為MVC架構就是<code>model</code>, <code>view</code>, <code>controller</code> : </p>
<ul>
<li>Model就是資料庫。</li>
<li>Controller負責與HTTP溝通，調用model與view。</li>
<li>View就是HTML。</li>
</ul>
<p>假如依照這個定義，以下這些需求該寫在哪裡呢？</p>
<ol>
<li>發送Email，使用外部API。</li>
<li>使用PHP寫的邏輯。</li>
<li>牽涉到多個table的資料庫邏輯。</li>
<li>依需求將顯示格式作轉換。</li>
<li>依需求是否顯示某些資料。</li>
<li>依需求顯示不同資料。</li>
</ol>
<p>其中1, 2屬於<strong>商業邏輯</strong>，3屬於<strong>資料庫邏輯</strong>，而4, 5，6屬於<strong>顯示邏輯</strong>，若依照一般人對MVC的定義，model是資料庫，而View又是HTML，除了第3項以外，以上這些需求都不能寫在model與view，只能<code>勉強</code>寫在controller。</p>
<p>因此初學者開始將<code>大量程式</code>寫在controller，造成controller的肥大難以維護。</p>
<h2 id="HMVC是Poor_Design">HMVC是Poor Design</h2><hr>
<div class="alert alert-info"><i class="fa fa-info"></i>  某些邏輯我需要重複使用，我該如何從A controller的一個method去呼叫B controller的另外一個method？</div>
<p>這也是初學者常問的問題，也就是HMVC (Hierarchical Model View Controller)，某個需求都有自己的MVC，所以一個專案裡面會有多個MVC，因此controller可以呼叫其他controller。</p>
<p><img src="/images/laravel/laravel-architecture/arch000.gif" alt=""></p>
<p>當controller會去呼叫其他controller時，通常代表這是一個poor design，表示在controller內已經塞太多<code>程式邏輯</code>，也違反了<strong>SOLID</strong>的<strong>單一職責原則</strong>。</p>
<h2 id="Bye,_Bye_Models">Bye, Bye Models</h2><hr>
<div class="alert alert-info"><i class="fa fa-info"></i>  既然邏輯寫在controller不方便重複使用，那我將邏輯都寫在model就好了？</div>
<p>當你將邏輯從controller搬到model後，雖然controller變瘦了，但卻肥了model，model從原本代表資料庫，現在變成還要負擔<strong>商業邏輯</strong>與<strong>顯示邏輯</strong>，結果更慘。</p>
<p>Model代表資料庫嗎？把它想成是<code>Eloquent class</code>就好，<code>資料庫邏輯</code>應該寫在repository裡，這也是為什麼Laravel 5已經沒有<code>models</code>目錄，<code>Eloquent class</code>僅僅是<code>暫時</code>存放在<code>app</code>目錄下而已，你應該將這些class移到你自己<code>domain</code>目錄下。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  什麼是<b>domain</b>目錄？聽起來好玄。</div>
<p>別擔心，稍後就會有實際範例解釋。</p>
<h2 id="中大型專案架構">中大型專案架構</h2><hr>
<p>那我們該怎麼寫呢？別將我們的思維侷限在MVC內 : </p>
<ol>
<li><strong>Model</strong> : 僅當成Eloquent class。</li>
<li><strong>Repository</strong> : 輔助model，處理<strong>資料庫邏輯</strong>，然後注入到service或controller。</li>
<li><strong>Service</strong> : 輔助controller，處理<strong>商業邏輯</strong>，然後注入到controller。</li>
<li><strong>Controller</strong> : 接收HTTP request，調用其他class。</li>
<li><strong>Presenter</strong> : 處理<strong>顯示邏輯</strong>，然後注入到view。</li>
<li><strong>View</strong> : 使用blade將資料binding到HTML。</li>
</ol>
<img src="/images/laravel/laravel-architecture/arch002.svg" width="700">
<p>其中藍色為原本的MVC，而紫色為本文要介紹的的重點 : <strong>Repository</strong>模式，<strong>Service</strong>模式與<strong>Presenter</strong>模式。</p>
<p>箭頭表示物件<code>依賴注入</code>的方向。</p>
<p>其中較特殊的是repository，可以直接注入到controller，也可以注入到service。</p>
<ul>
<li>若沒有商業邏輯，只有資料庫邏輯，可以直接注入controller，由controller直接調用repository。</li>
<li>若有複雜的商業邏輯，則注入到service，由service調用repoistory，最後再將service注入controller，由controller調用service。</li>
</ul>
<p>我們可以發現MVC架構還在，由於<strong>SOLID</strong>的<strong>單一職責原則</strong> : </p>
<ol>
<li>我們將<strong>資料庫邏輯</strong>從model分離出來，由repository輔助model。</li>
<li>我們將<strong>商業邏輯</strong>從controller分離出來，由service輔助controller。</li>
<li>我們將<strong>顯示邏輯</strong>從view分離出來，由presenter輔助view。</li>
</ol>
<h3 id="建立Domain目錄">建立Domain目錄</h3><div class="alert alert-info"><i class="fa fa-info"></i>  我發現Jeffery Way在Laracast的教學，常會在<b>app</b>目錄下建立<b>Acme</b>子目錄，為什麼要建立這個目錄呢？</div>
<blockquote><p>I never put views and controllers into the Acme folder. I put classes related to my domain in that folder. For demos, there isn’t any real domain, so I use a dummy name: Acme.</p>
<footer><strong>Jeffery Way </strong><cite><a href="https://laracasts.com/forum/?p=1550-why-does-jeffrey-use-acme-namespace/0" target="_blank" rel="external">Why Does Jeffrey Use Acme/Namespace ?</a></cite></footer></blockquote>
<p>簡單的說，<code>Acme</code>就是Jeffery Way放repository，service, presenter等domain knowledge的地方，也就是<strong>Domain目錄</strong>，或稱為<strong>Business Layer</strong>，因為Jeffery Way範例程式沒有什麼實際的domain knowledge，就隨便取了<code>Acme</code>為目錄名稱，實務上你可以取<code>公司名稱</code>，或者任何與domain knowledge相關的名稱。</p>
<p><strong>建立目錄</strong><br>在<code>app</code>目錄下建立domain目錄，如<code>MyBlog</code>，並在domain目錄下建立<code>Repositories</code>，<code>Services</code>與<code>Presenters</code>目錄。<br><img src="/images/laravel/laravel-architecture/arch001.png" alt=""></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  別害怕建立目錄！！</div>
<p>別害怕建立Laravel預設目錄以外的<code>其他目錄</code>，根據<strong>SOLID</strong>的<strong>單一職責原則</strong> : <code>你應該且僅有一個原因引起類別/方法的變更</code>，class功能越多，責任也越多，因此越違反<strong>單一職責原則</strong>，所以你應該將你的程式分割成更小的部分，每個部分都有它專屬的功能，而不是一個class有包山包海的功能，所以整個專案不應該只有MVC三個部分，放手根據你的需求建立適當的目錄，並將適當的class放到該目錄下。</p>
<p><strong>設定composer.json</strong><br>雖然<code>MyBlog</code>是建立在<code>app</code>目錄下，但我們並不希望namespace為<code>App\MyBlog</code>，而希望為<code>MyBlog</code>，因此我們要修改composer.json，讓PSR-4的auto-loading知道我們新的namespace : <code>MyBlog</code>。<br><figure class="highlight javascript"><figcaption><span>composer.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"laravel/laravel"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"The Laravel Framework."</span>,</span><br><span class="line">    <span class="string">"keywords"</span>: [<span class="string">"framework"</span>, <span class="string">"laravel"</span>],</span><br><span class="line">    (略)</span><br><span class="line">    <span class="string">"autoload"</span>: &#123;</span><br><span class="line">        <span class="string">"classmap"</span>: [</span><br><span class="line">            <span class="string">"database"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"psr-4"</span>: &#123;</span><br><span class="line">            <span class="string">"App\\"</span>: <span class="string">"app/"</span>,</span><br><span class="line">            <span class="string">"MyBlog\\"</span> : <span class="string">"app/MyBlog/"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    (略)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>12行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"MyBlog\\"</span> : <span class="string">"app/MyBlog/"</span></span><br></pre></td></tr></table></figure>
<p>加入新的namespace : <code>MyBlog</code>。</p>
<p><strong>產生新的autoload檔案</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer dump-autoload</span><br></pre></td></tr></table></figure></p>
<p><strong>移動並修改User.app</strong><br>Laravel 5預設將model建立在<code>app</code>目錄下，這只是一個<code>暫存目錄</code>，不是model該放的地方，我們應該將model放到自己的<code>domain目錄</code>下。</p>
<p>將<code>User.php</code>從<code>app</code>目錄下移動到<code>app/MyBlog</code>目錄下，並修改其namespace。</p>
<figure class="highlight php"><figcaption><span>myblog/User.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Authenticatable</span>;</span><br><span class="line">(略)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> <span class="keyword">implements</span> <span class="title">AuthenticatableContract</span>,</span><br><span class="line">                                    <span class="title">AuthorizableContract</span>,</span><br><span class="line">                                    <span class="title">CanResetPasswordContract</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    (略)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 
<p>第1行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyBlog</span>;</span><br></pre></td></tr></table></figure>
<p>將<code>App</code>改成<code>MyBlog</code>，以後使用<code>php artisan make:model</code>所產生在<code>app</code>目錄下的model，都要手動移動到<code>MyBlog</code>目錄下，並且修改namespace為<code>MyBlog</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若使用PhpStorm，別忘了將<code>MyBlog</code>目錄加到namespace root，將來建立class時，會自動幫你加上namespace。</span></span></span></p>
<h3 id="Repository">Repository</h3><p>由於篇幅的關係，將repository獨立成專文討論，請參考<a href="/laravel/laravel-repository/">如何使用Repository模式?</a></p>
<h3 id="Service">Service</h3><p>由於篇幅的關係，將service獨立成專文討論，請參考<a href="/laravel/laravel-service/">如何使用Service模式?</a></p>
<h3 id="Presenter">Presenter</h3><p>由於篇幅的關係，將presenter獨立成專文討論，請參考<a href="/laravel/laravel-presenter/">如何使用Presenter模式?</a></p>
<h2 id="Unit_Test">Unit Test</h2><hr>
<p>由於現在model、view、controller的相依物件都已經拆開，而拆開的repository、service與presenter也都使用DI + service container，所以每個部分都可以單獨的做unit test，如要測試service，就將repository做mock。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>唯獨要測試repository不能用mock，因為真的讀寫資料庫，詳細請參考<a href="/tdd/tdd-repository-testing/">如何對Repository模式測試？</a></span></span></span></p>
<p>如要測試controller，就將service做mock。</p>
<p>顯示邏輯也可以跑unit test，不用一定要跑integration test。</p>
<h3 id="PHPUnit">PHPUnit</h3><p>PHPUnit沒有使用namespace，不過建議目錄架構與我們的Domain目錄架構一樣，方便維護。<br><img src="/images/laravel/laravel-architecture/arch003.png" alt=""></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><p>若你的需求只是小型專案，可直接建立一個<code>models</code>目錄，將<code>Eloquent class</code>放在<code>models</code>目錄下 : </p>
<ol>
<li>將<strong>資料庫邏輯</strong>寫在model內，搭配query scope。</li>
<li>將<strong>商業邏輯</strong>寫在controller內。</li>
<li>將<strong>顯示邏輯</strong>寫在view的blade內。</li>
</ol>
<p>本文所談的，是中大型專案所使用的架構。</p>
</li>
<li><p>你會發現在<a href="https://leanpub.com/laravel" target="_blank" rel="external">Laravel: From Apprentice To Artisan</a>中，整本書都是圍繞在<strong>SOLID</strong>與<strong>可測試性</strong>的角度學習Laravel。</p>
</li>
<li><p>本文談到的架構只是開始，你可以依照實際需求增加更多的目錄與class，當你發現你的MVC違反<strong>SOLID</strong>時，就大膽的將class從MVC拆開重構，然後依照以下手法 : </p>
<ol>
<li>將相依物件注入到class。</li>
<li>在class內處理他的職責。</li>
<li>將class注入到controller或view。</li>
</ol>
<p>最後搭配unit test，測試重構後的架構是否與原來的需求結果相同。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[只有MVC是不夠的，我們需要更完整的專案架構]]>
    
    </summary>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
</feed>
