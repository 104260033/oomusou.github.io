<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2016-06-19T13:19:21.000Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 對 Collection 除錯?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-collection-debug/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-collection-debug/</id>
    <published>2016-06-19T12:23:43.000Z</published>
    <updated>2016-06-19T13:19:21.000Z</updated>
    <content type="html"><![CDATA[<p>Laravel 的 <code>Collection</code> 在實務上非常好用，除了 Eloquent 直接回傳 <code>Collection</code> 外，還擴充了很多 method，讓我們可以使用 higher order function 與 fluent 風格開發，讓程式可讀性更高。不過 <code>Collection</code> 的除錯就比較麻煩，本文使用 PhpStorm 內建的 <strong>Watches</strong>，讓我們可以在不用修改程式碼的前提下，快速對 <code>Collection</code> 除錯。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="Motivation">Motivation</h2><hr>
<p>在看了 Adam Wathan 的 <a href="http://adamwathan.me/refactoring-to-collections/" target="_blank" rel="external">Refactoring to Collections</a> 之後，發現這種 declarative 式的程式風格，不僅程式碼更精簡，可讀性更高，也符合 SOLID 原則的單一職責，因此開始大量使用 <code>Collection</code> 內建的 method 來寫程式。</p>
<p>但由於是 fluent 風格的程式，因此在 debug 時面臨困難，必須修改程式碼，加上很多暫存變數，設定中斷點後，透過 <strong>Variables</strong> 去觀察暫存變數，等除錯完後，再透過重構的 <code>Inline Variable</code> 去合併變數。</p>
<p>在 Freek Van der Herten 的 <a href="https://murze.be/2016/06/debugging-collections/" target="_blank" rel="external">Debugging collections</a> 一文中，提出了使用了 Collection Macro 配合 <code>dd()</code> 的方式，這種方式就不需要增加暫存變數，只要在要 debug 的 method 之後加上 <code>-&gt;dd()</code> 即可，非常方便。</p>
<p>不過唯一小小的可惜是，這種方式仍然需要去修改程式碼去加上 <code>-&gt;dd()</code>，是否可能在完全不需修改程式碼的前提下，快速對 <code>Collection</code> 除錯呢?</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>我們將以 <code>Order</code> model 為例，顯示<code>今天全部訂單金額</code>，並寫單元測試判斷結果是否如預期。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p>以 TDD 方式開發，因此必須先寫單元測試。</p>
<p><strong>OrderServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/a74e7cc1327e79f0a47e967d225cbaf5c88197f5" target="_blank" rel="external">單元測試 : 今天全部訂單金額</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/OrderServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">OrderService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 今天全部訂單金額<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** Arrange */</span></span><br><span class="line">        Carbon::setTestNow(Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">        Order::create([</span><br><span class="line">            <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">17</span>),</span><br><span class="line">            <span class="string">'quantity'</span>   =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">'price'</span>      =&gt; <span class="number">100</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        Order::create([</span><br><span class="line">            <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="string">'quantity'</span>   =&gt; <span class="number">2</span>,</span><br><span class="line">            <span class="string">'price'</span>      =&gt; <span class="number">200</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        Order::create([</span><br><span class="line">            <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="string">'quantity'</span>   =&gt; <span class="number">3</span>,</span><br><span class="line">            <span class="string">'price'</span>      =&gt; <span class="number">300</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">1300</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(OrderService::class)-&gt;calculateTodayTotalAmount();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>16 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Carbon::setTestNow(Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>));</span><br></pre></td></tr></table></figure></p>
<p>由於需求是<code>今天全部訂單金額</code>，勢必使用 <code>Carbon::now()</code> 回傳今天日期，但 <code>Carbon::now()</code> 回傳的每天的真實日期，並不是個固定值，這將造成測試困難，因此 Carbon 提供了 <code>setTestNow()</code> 讓我們自行設定測試用的日期，讓  <code>Carbon::now()</code> 回傳我們預期的日期，這是寫單元測試常用的手法。</p>
<p>18 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Order::create([</span><br><span class="line">    <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">17</span>),</span><br><span class="line">    <span class="string">'quantity'</span>   =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="string">'price'</span>      =&gt; <span class="number">100</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">Order::create([</span><br><span class="line">    <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">    <span class="string">'quantity'</span>   =&gt; <span class="number">2</span>,</span><br><span class="line">    <span class="string">'price'</span>      =&gt; <span class="number">200</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">Order::create([</span><br><span class="line">    <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">    <span class="string">'quantity'</span>   =&gt; <span class="number">3</span>,</span><br><span class="line">    <span class="string">'price'</span>      =&gt; <span class="number">300</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>由於我們是使用 SQLite in Memory 做測試，每個測試案例執行完就會釋放記憶體，所以除了需要重新 migration 外，還要重新塞假資料進資料庫。</p>
<p>由於我們要測試的日期為 <code>2016, 6, 18</code>，除了塞兩筆 <code>2016, 6, 18</code> 資料外，還多塞了一筆 <code>2016, 6, 17</code>，目的要測試日期時間有沒有抓錯。</p>
<p>36 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$expected</span> = <span class="number">1300</span>;</span><br></pre></td></tr></table></figure></p>
<p>根據我們所塞的假資料，人工計算其期望值為 <code>1300</code>，將以此值與測試所得的實際值做 assertion。</p>
<p>38 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(OrderService::class)-&gt;calculateTodayTotalAmount();</span><br></pre></td></tr></table></figure></p>
<p>實際建立 <code>OrderService</code> 物件，並測試 <code>calculateTodayTotalAmount()</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此時 <code>OrderService</code> 與 <code>calculateTodayTotalAmount()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>OrderService</code> 與 <code>calculateTodayTotalAmount()</code>。</span></span></span></p>
<p>除了使用 <code>app()</code> helper function 外，也可以使用 Facade 版本的 <code>App::make()</code>，但不建議使用 <code>new</code>，因為實務上待測物件可能會搭配依賴注入，若使用 <code>new</code> 必須自己在 constructor 輸入參數，非常麻煩，使用 <code>app()</code> 或 <code>App::make()</code> 後， Laravel 會自行依照 constructor 的 type hint 依賴注入，非常方便。</p>
<p>41 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Assert */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>最後使用 <code>assertEquals()</code> 判斷期望值與實際值是否相等。</p>
<h2 id="OrderService">OrderService</h2><hr>
<p>實際跑測試，會得到第 1 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>OrderService</code> 與 <code>calculateTodayTotalAmount()</code> 尚未建立，須趕快補上。</p>
<p><strong>OrderService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/e5112c689f60ceded162e52ac4dd91a783c42a6c" target="_blank" rel="external">建立 foreach 版本 OrderService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Order $order</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算今天全部訂單金額</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$totalAmount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$orders</span> = <span class="variable">$this</span>-&gt;order-&gt;all();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$orders</span> <span class="keyword">as</span> <span class="variable">$order</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$order</span>-&gt;order_date == Carbon::now()) &#123;</span><br><span class="line">                <span class="variable">$totalAmount</span> = <span class="variable">$totalAmount</span> + <span class="variable">$order</span>-&gt;quantity * <span class="variable">$order</span>-&gt;price;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$totalAmount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 8 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * OrderService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> Order $order</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 constructor injection 注入 <code>Order</code> model。</p>
<p>20 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算今天全部訂單金額</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$totalAmount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$orders</span> = <span class="variable">$this</span>-&gt;order-&gt;all();</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$orders</span> <span class="keyword">as</span> <span class="variable">$order</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span>-&gt;order_date == Carbon::now()) &#123;</span><br><span class="line">            <span class="variable">$totalAmount</span> = <span class="variable">$totalAmount</span> + <span class="variable">$order</span>-&gt;quantity * <span class="variable">$order</span>-&gt;price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$totalAmount</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於需求是<code>今天全部訂單金額</code>，我們先建立一個 <code>$totalAmout</code> 初始變數，再由 <code>$this-&gt;orders-&gt;all()</code> 傳回資料庫目前所有訂單。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>實務上不會直接使用 <code>$this-&gt;order-&gt;all()</code> 的方式回傳 <code>Order</code> model 的所有資料，這裡只是為了範例便宜行事，應該從 <code>OrderRepository</code> 傳回必要的資料即可，這樣才不會造成 MySQL 與 PHP 的負擔。</span></span></span></p>
<p>接著使用 <code>foreach</code> 對全部 <code>orders</code> 判斷，只有 <code>order_date</code> 為 <code>今天</code>，也就是等於 <code>Carbon::now()</code> 才加以計算。</p>
<p>訂單金額並沒有直接一個欄位，需要使用 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code> 加以計算，才能與 <code>$totalAmount</code> 相加。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug000.png" alt=""></p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>，完成 <code>OrderService</code>。</p>
<h2 id="使用_Collection_重構">使用 Collection 重構</h2><hr>
<p>以上為典型的 <strong>Imperative Programming</strong> 寫法，透過暫存變數 <code>$totalAmount</code>，迴圈 <code>foreach()</code> 與判斷式 <code>if</code> 的方式寫程式，這也是過去我們習慣的 PHP 風格。</p>
<p>這種方式的缺點是程式可讀性較差，當你在 trace <code>calculateTodayTotalAmount()</code> 時，需馬上與一堆變數、迴圈與判斷式纏鬥，而不能一眼就看出程式所有表達的意思。</p>
<p><strong>OrderService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/517181e2b84f0483bc0574dd796a3cac3ae44781" target="_blank" rel="external">建立 Collection 版本的 OrderService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Order $order</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算今天全部訂單金額</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">            -&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">            &#125;)</span><br><span class="line">            -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">            &#125;)</span><br><span class="line">            -&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>20 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算今天全部訂單金額</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">        -&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">        &#125;)</span><br><span class="line">        -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">        &#125;)</span><br><span class="line">        -&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>需求為 <code>今天全部訂單金額</code>，因此有以下幾個重點 :</p>
<ul>
<li><strong>今天</strong> : 必須先過濾出<code>今天</code>的資料。</li>
<li><strong>金額</strong> : 必須先由 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code> 計算<code>金額</code>。</li>
<li><strong>全部訂單</strong> : 必須由 <code>$totalAmout</code> 計算<code>全部訂單</code>金額。</li>
</ul>
<p><code>$this-&gt;order-&gt;all()</code> 回傳的為 <code>Collection</code>，事實上 Laravel 的 <code>Collection</code> 內建非常多的 method，可直接使用。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>詳細請參考 Laravel 的官方文件 : <a href="https://laravel.com/docs/master/collections#available-methods" target="_blank" rel="external">Collections</a></span></span></span></p>
<p>若使用 <code>Collection</code> 的 method，可改寫成 :</p>
<ul>
<li><strong>filter()</strong> : 由 <code>filter()</code> 過濾出<code>今天</code>的資料。</li>
<li><strong>map()</strong> : 由 <code>map()</code> 計算出 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code>。</li>
<li><strong>reduce()</strong> : 由 <code>reduce()</code> 計算出 <code>$totalAmount</code>。</li>
</ul>
<p>27 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><code>filter()</code> 要求傳入一個 closure，第 1 個參數為 <code>$value</code>，第 2 個參數為 <code>$key</code>，只要在 closure 內 return <code>filter()</code> 所需要的布林條件式即可。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>詳細請參考 Laravel 官方文件 : <a href="https://laravel.com/docs/master/collections#method-filter" target="_blank" rel="external">filter()</a></span></span></span></p>
<p>以本例來說，<code>$value</code> 就是 <code>foreach</code> 中 <code>$orders</code> 的 <code>$order</code>，所以其 <code>filter()</code> 條件為 <code>$value-&gt;order_date == Carbon::now()</code>。</p>
<p>30 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><code>map()</code> 要求傳傳入一個 closure，第 1 個參數為 <code>$value</code>，第 2 個參數為 <code>$key</code>，只要在 closure 內 return <code>map()</code> 要成為的新值即可。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>詳細請參考 Laravel 官方文件 : <a href="https://laravel.com/docs/master/collections#method-map" target="_blank" rel="external">map()</a></span></span></span></p>
<p>以本例來說，<code>$value</code> 就是 <code>foreach</code> 中 <code>$orders</code> 的 <code>$order</code>，<code>map()</code> 之後的新值為 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code>。</p>
<p>33 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>reduce()</code> 要求傳傳入一個 closure，第 1 個參數為 <code>$carry</code>，第 2 個參數為 <code>$value</code>，其中 <code>$carry</code> 為下一次執行 <code>reduce()</code> 時的累加值，只要在 closure 內 return 下一次執行 <code>reduce()</code> 時 <code>$carry</code> 的新值即可。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>詳細請參考 Laravel 官方文件 : <a href="https://laravel.com/docs/master/collections#method-reduce" target="_blank" rel="external">reduce()</a></span></span></span></p>
<p>以本例來說，<code>$value</code> 就是 <code>foreach</code> 中 <code>$orders</code> 的 <code>$order</code>，而 <code>$carry</code> 就是 <code>$totalAmount</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug001.png" alt=""></p>
<p>得到第 2 個 <span class="label label-success">綠燈</span>，使用 <code>Collection</code> 重構 <code>OrderService</code>。</p>
<h2 id="將_Closure_加以重構">將 Closure 加以重構</h2><hr>
<p>使用 <code>filter()</code>、<code>map()</code> 與 <code>reduce()</code> 搭配 closure 的寫法，已經比 <strong>Imperative Programming</strong> 寫法精簡，但 closure 部分可讀性還不是很高，需要進一步重構。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug002.png" alt=""></p>
<p>選擇 <code>filter()</code> 內部的 closure，按熱鍵 &#8963; + T，出現 <code>Refactor This</code> 選單，選擇 <code>7.Method</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug003.png" alt=""></p>
<p>Visibility 選擇 <code>Private</code>，在函式名稱輸入 <code>filterToToday</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug004.png" alt=""></p>
<p>PhpStorm 會替我們將 closure 重構出新的 <code>filterToToday()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug005.png" alt=""></p>
<p>重構後趕快跑單元測試，確認 PhpStorm 有沒有改壞。</p>
<p>將 <code>map()</code> 與 <code>reduce()</code> 的 closure 也依照以上方式加以重構成 private method。</p>
<p><strong>OrderService.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/38bc52878707f137f5ce87a41ad9c3fd4b90057d" target="_blank" rel="external">將 Closure 加以重構</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Order $order</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算今天全部訂單金額</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">            -&gt;filter(<span class="variable">$this</span>-&gt;filterToToday())</span><br><span class="line">            -&gt;map(<span class="variable">$this</span>-&gt;mapToAmount())</span><br><span class="line">            -&gt;reduce(<span class="variable">$this</span>-&gt;reduceToTotalAmount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 只有今天的訂單</span><br><span class="line">     * <span class="doctag">@return</span> Closure</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterToToday</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 換算成金額</span><br><span class="line">     * <span class="doctag">@return</span> Closure</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mapToAmount</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 換算成總金額</span><br><span class="line">     * <span class="doctag">@return</span> Closure</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">reduceToTotalAmount</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算今天全部訂單金額</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">        -&gt;filter(<span class="variable">$this</span>-&gt;filterToToday())</span><br><span class="line">        -&gt;map(<span class="variable">$this</span>-&gt;mapToAmount())</span><br><span class="line">        -&gt;reduce(<span class="variable">$this</span>-&gt;reduceToTotalAmount());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最後程式碼會重構成這樣，可讀性很高，就跟口語敘述一樣直覺。</p>
<ol>
<li>先由 <code>Order</code> model 傳回所有資料。</li>
<li>再透過 <code>filter()</code> 過濾<code>今天</code>的資料。</li>
<li>再透過 <code>map()</code> 計算出<code>金額</code>。</li>
<li>最後由 <code>reduce()</code> 計算出<code>總金額</code>。</li>
</ol>
<p>至於怎麼<code>過濾</code>、<code>計算</code>，那是 closure 的事情，若有必要再繼續 trace 下去，不需一開始就面臨一堆變數、迴圈與判斷，這就是所謂的 <strong>Declarative Programming</strong>，只重視 <code>我們要做什麼，而不是要如何做</code>。</p>
<p>44 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 換算成金額</span><br><span class="line"> * <span class="doctag">@return</span> Closure</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mapToAmount</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 closure 所重構出來的 method，也都符合 SOLID 的單一職責原則，將來若有需要，可以再進一步的重構成 interface 與 trait。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug006.png" alt=""></p>
<p>重構後趕快跑單元測試，確認 PhpStorm 有沒有改壞。</p>
<h2 id="使用_Watches_除錯">使用 Watches 除錯</h2><hr>
<p>使用 Declarative Programming 方式，程式可讀性雖然高，但除錯則面臨很大的挑戰，由於其 fluent 風格，基本上程式只有一行，因此無從下中斷點觀察變數，只能在除錯時加上很多暫存變數觀察。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug007.png" alt=""></p>
<p>加了 <code>$aa</code>、<code>$bb</code> … <code>$dd</code> 等暫存變數，雖然可以在 Debug Window 的 Variables 加以觀察，但必須修改程式碼，雖然之後可以靠重構的 <code>Inline Variable</code> 加以還原，但還是很麻煩。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug008.png" alt=""></p>
<p>比較理想的方式是使用 Debug Windw 的 Watches，比如說我們只想除錯 <code>$this-&gt;order-&gt;all()</code>，用滑鼠選擇 <code>$this-&gt;order-&gt;all()</code>，按滑鼠右鍵選擇 <code>Add to Watches</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug009.png" alt=""></p>
<p><code>$this-&gt;order-&gt;all()</code> 將會新增到右側下方的 Watches，可直接展開觀察結果。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug010.png" alt=""></p>
<p>同理若要除錯 <code>$this-&gt;orders-&gt;all()-&gt;filter($this-&gt;filterToToday())</code>，可將 <code>$this-&gt;orders-&gt;all()-&gt;filter($this-&gt;filterToToday())</code> 選起來，按滑鼠右鍵選擇 <code>Add to Watches</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug012.png" alt=""></p>
<p><code>$this-&gt;orders-&gt;all()-&gt;filter($this-&gt;filterToToday())</code> 將會新增到右側下方的 Watches，可直接展開觀察結果。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug011.png" alt=""></p>
<p>你也可以將 <code>Collection</code> 的每個過程全部加到 Watches，且只要你不刪除，Watches 就永遠存在，將來除錯還可以繼續用，這樣就可以達到不用修改程式碼，又可以對 <code>Collection</code> 除錯的目的。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Declarative 比 Imperative 方式更精簡，程式可讀性更高，也更符合單一職責原則。</li>
<li>Laravel 的 <code>Collection</code> 非常好用，但除錯一直是大家的夢靨，透過 PhpStorm 的 Watches，不僅不用修改程式碼，也可以繼續使用中斷點的除錯方式。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Adam Watham, <a href="http://adamwathan.me/refactoring-to-collections/" target="_blank" rel="external">Refactoring to Collections</a></li>
<li>Freek Van der Herten, <a href="https://murze.be/2016/06/debugging-collections/" target="_blank" rel="external">Debugging collections</a></li>
<li>Taylor Otwell, <a href="https://laravel.com/docs/master/collections#available-methods" target="_blank" rel="external">Laravel Collections</a></li>
<li>PhpStorm 2016.1 Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.1/debug-tool-window-watches.html" target="_blank" rel="external">Debug Tool Window.Watches</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 Watches 替 Collection 除錯]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何對 Collection 做 assertion?]]></title>
    <link href="http://oomusou.io/tdd/tdd-collection-assertion/"/>
    <id>http://oomusou.io/tdd/tdd-collection-assertion/</id>
    <published>2016-06-13T12:23:43.000Z</published>
    <updated>2016-06-19T07:07:34.000Z</updated>
    <content type="html"><![CDATA[<p><code>Collection</code> 並非 PHP 原生的型別，是 Laravel 所擴充，因此 PHPUnit 並無法直接對其做 assertion，必須先透過 <code>toArray()</code> 轉成陣列，再透過 PHPUnit 的 <code>assertArrayXXX()</code> 系列做 assertion。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.37</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>我們將以 <code>Post</code> model 為例，顯示<code>所有文章</code>，並寫單元測試判斷結果是否如預期。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p>無論是對 repository 或 service 做單元測試，當其 field 或 method 回傳值為 <code>Collection</code>時，就必須面對如何 assertion 的問題。</p>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/9f422f2f9a376f0d9e3aea11ae3f7bbde6f3b741" target="_blank" rel="external">單元測試 : 建立 PostServiceTest.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create(<span class="variable">$value</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(PostService::class)-&gt;displayAllPosts()-&gt;toArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    Post::create(<span class="variable">$value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>由於單元測試是使用 SQLite in Memory 為資料庫，只要測試一結束，記憶體就會釋放，因此每次測試都要重新新增資料。</p>
<p>使用 <code>Collection-&gt;each()</code> 將 <code>$expected</code> 中的資料透過 <code>Post::create()</code> 新增。</p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(PostService::class)-&gt;displayAllPosts()-&gt;toArray();</span><br></pre></td></tr></table></figure></p>
<p>測試 <code>PostService-&gt;displayAllPosts()</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此時 <code>PostService</code> 與 <code>displayAllPost()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostService</code> 與 <code>displayAllPost()</code>。</span></span></span></p>
<p><code>displayAllPosts()</code> 回傳的是 <code>Collection</code>，但 PHPUnit 無法對 <code>Collection</code> 做 assertion，必須先轉成 array。</p>
<p>26 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>這裡不能使用 <code>assertEquals()</code>，因為 <code>posts</code> table 還包含 <code>created_at</code> 與 <code>updated_at</code> 兩個欄位，若使用 <code>assertEquals()</code> 一定失敗，必須改用 <code>assertArraySubset()</code>。</p>
<p>也就是說，<code>$expected</code> 並不用包含 <code>Collection</code> 的所有欄位，只要包含你想測試的欄位即可。</p>
<p>剩下的 <code>PostService</code> 與 <code>PostRepository</code> 就以 TDD 的方式建立，在此不再贅述。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>若對剩下的步驟有興趣，詳細請參考 <a href="/phpstorm/phpstorm-refactor-namespace/">如何使用 PhpStorm 重構 Namespace?</a></span></span></span></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PHPUnit 無法直接對 <code>Collection</code> 做 assertion，需先使用 <code>toArray()</code> 轉成陣列。</li>
<li><code>Collection</code> 最典型的測試方式，就是在 <code>$expected</code> 準備好想測試的欄位與資料，最後使用 PHPUnit 的 <code>assertArraySubset()</code> 做 assertion。 </li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 assertArrayXXX() 替 Collection 做 assertion]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 重構 Namespace?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-refactor-namespace/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-refactor-namespace/</id>
    <published>2016-06-12T12:23:43.000Z</published>
    <updated>2016-06-19T02:28:44.000Z</updated>
    <content type="html"><![CDATA[<p>在 TDD 開發流程，為了第一個 <span class="label label-success">綠燈</span>，一開始可能在同一個 namespace 下只有一個 class，但隨著重構的進行，可能重構出更多的 class 與 interface，為了更加的<strong>高內聚，低耦合</strong>，我們可能會將更相關的 class 與 interface 重構到其他 namespace，導致相依的 class 也必須修改，在重構 namepsace 時，PhpStorm 可以幫我們將相依的 class 一併修改，非常方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.37</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>我們將以經典的 service + repository 模式為例，以 <code>PostService</code> 處理商業邏輯，以 <code>PostRepository</code> 處理資料庫邏輯，將全部 post 顯示在網頁上。</p>
<p>最後使用 PhpStorm 重構 <code>PostService</code> 與 <code>PostRepository</code>。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p>以 TDD 方式開發，因此必須先寫單元測試。</p>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/9f422f2f9a376f0d9e3aea11ae3f7bbde6f3b741" target="_blank" rel="external">單元測試 : 建立 PostServiceTest.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create(<span class="variable">$value</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(PostService::class)-&gt;displayAllPosts()-&gt;toArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    Post::create(<span class="variable">$value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>由於單元測試是使用 SQLite in Memory 為資料庫，只要測試一結束，記憶體就會釋放，因此每次測試都要重新新增資料。</p>
<p>使用 <code>Collection-&gt;each()</code> 將 <code>$expected</code> 中的資料透過 <code>Post::create()</code> 新增。</p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(PostService::class)-&gt;displayAllPosts()-&gt;toArray();</span><br></pre></td></tr></table></figure></p>
<p>測試 <code>PostService-&gt;displayAllPosts()</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此時 <code>PostService</code> 與 <code>displayAllPost()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostService</code> 與 <code>displayAllPost()</code>。</span></span></span></p>
<p><code>displayAllPosts()</code> 回傳的是 <code>Collection</code>，但 PHPUnit 無法對 <code>Collection</code> 做 assertion，必須先轉成 array。</p>
<p>26 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>這裡不能使用 <code>assertEquals()</code>，因為 <code>posts</code> table 還包含 <code>created_at</code> 與 <code>updated_at</code> 兩個欄位，若使用 <code>assertEquals()</code> 一定失敗，必須改用 <code>assertArraySubset()</code>。</p>
<h2 id="PostService">PostService</h2><hr>
<p>實際跑測試，會得到第 1 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>PostService</code> 與 <code>displayAllPosts()</code> 尚未建立，須趕快補上。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/ee587bd2a6e0cad4c94c024f6cdfdcd3ab46eb26" target="_blank" rel="external">建立 PostService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 8 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@var</span> PostRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * PostService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因為 <code>PostService</code> 須使用到 <code>PostRepository</code>，使用 constructor injection 注入 <code>PostRepository</code>。</p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> Collection</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>呼叫 <code>PostRepository</code> 的 <code>getAllPosts()</code>, 回傳 <code>Collection</code>。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>此時 <code>PostRepository</code> 與 <code>getAllPosts()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostRepository</code> 與 <code>getAllPosts()</code>。</span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  為什麼 <strong>PostService</strong> 只有呼叫 <strong>PostRepository</strong> 而已?</div>
<p>實務上 <code>PostService</code> 除了呼叫 <code>PostRepository</code> 外，還會有自己的商業邏輯要寫，本文因為重點在   <strong>namespace 重構</strong>，所以簡化了 <code>PostService</code>，關於 Service 模式，詳細請參考<a href="/laravel/laravel-service/">如何使用 Service 模式?</a></p>
<h2 id="PostRepository">PostRepository</h2><hr>
<p>實際跑測試，會得到第 2 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>PostRepository</code> 與 <code>getAllPosts()</code> 尚未建立，須趕快補上。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/175ca8490d72e5f8994833eceffe59b2bbda7fe6" target="_blank" rel="external">建立 PostRepository</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllPosts</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>為簡化起見，回傳 <code>post</code> table 所有資料。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace000.png" alt=""></p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>，完成 <code>PostService</code> 與 <code>PostRepository</code>。</p>
<h2 id="整合測試">整合測試</h2><hr>
<p>單元測試目的是寫出 service 與 repository，我們要繼續寫整合測試，將 route、controller 與 view 補上。</p>
<p><strong>PostApplicationTest.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/9be08ef0d8afea91e51057c59948d7f8abc39e88" target="_blank" rel="external">整合測試 : 建立 PostApplicationTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostApplicationTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create(<span class="variable">$value</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/post'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'title'</span>]);</span><br><span class="line">            <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'description'</span>]);</span><br><span class="line">            <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'content'</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    Post::create(<span class="variable">$value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>由於單元測試是使用 SQLite in Memory 為資料庫，只要測試一結束，記憶體就會釋放，因此每次測試都要重新新增資料。</p>
<p>使用 <code>Collection-&gt;each()</code> 將 <code>$expected</code> 中的資料透過 <code>Post::create()</code> 新增。</p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;visit(<span class="string">'/post'</span>);</span><br></pre></td></tr></table></figure></p>
<p>實際測試 <code>/post</code> URI。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>此時 route 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 route。</span></span></span></p>
<p>27 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line">collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'title'</span>]);</span><br><span class="line">    <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'description'</span>]);</span><br><span class="line">    <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'content'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>期望在網頁上看到 <code>title</code>、<code>description</code> 與 <code>content</code> 等資料。 </p>
<p>使用 <code>Collection-&gt;each()</code> 將 <code>$expected</code> 中的資料透過 <code>$this-&gt;see()</code> 做 assertion。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>此時 view 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 view。</span></span></span>    </p>
<h2 id="Routes">Routes</h2><hr>
<p>實際跑測試，會得到第 1 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨找不到 <code>http://localhost/post</code>，因為 route 尚未建立，須趕快補上。</p>
<p><strong>routes.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/3d1077e9750cba89d6117b94779634c07e167293" target="_blank" rel="external">建立 routes</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/post'</span>, [</span><br><span class="line">    <span class="string">'as'</span>   =&gt; <span class="string">'post'</span>,</span><br><span class="line">    <span class="string">'uses'</span> =&gt; <span class="string">'PostController@index'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>新增 route <code>/post</code>，並指定其 controller 為 <code>PostController@index</code>。<span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>此時 <code>PostController</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostController</code>。</span></span></span>    </p>
<h2 id="PostController">PostController</h2><hr>
<p>實際跑測試，會得到第 2 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>PostController</code> 尚未建立，須趕快補上。</p>
<p><strong>PostController.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/af0121d61484ba6980a51ba6ee954071eb3bc85b" target="_blank" rel="external">建立 PostController</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/PostController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Display a listing of the resource.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">'posts'</span>] = app(PostService::class)-&gt;displayAllPosts();</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'post.index'</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>app()</code> 建立 <code>PostService</code>，並呼叫其 <code>displayAllPosts()</code>。</p>
<p>回傳 <code>post.index</code> view。<span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>此時 <code>post.index</code> view 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>post.index</code> view。</span></span></span>    </p>
<h2 id="Post-Index_Blade">Post.Index Blade</h2><hr>
<p>實際跑測試，會得到第 3 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>post.index</code> view 尚未建立，須趕快補上。</p>
<p><strong>index.blade.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/d8ad575a285dcc0895a28e343ab38a30eb75e709" target="_blank" rel="external">建立 post.index view</a></span></span></span><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Posts<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">@foreach($posts as $post)</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&#123;&#123; $post-&gt;title &#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&#123;&#123; $post-&gt;description &#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&#123;&#123; $post-&gt;content &#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">hr</span>&gt;</span></span><br><span class="line">@endforeach</span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>簡單使用 <code>@foreach</code> 與 binding 將資料顯示。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace001.png" alt=""></p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>，完成 <code>routes</code> 與 <code>PostController</code> 與 <code>post.index</code> view。</p>
<h2 id="重構_PostService">重構 PostService</h2><hr>
<p>到目前為止，已經 <span class="label label-success">綠燈</span> 達成需求，但發現將 <code>PostService</code> 放在 <code>app/Services</code> 下似乎不妥，想將 <code>PostServie</code> 重構放在 <code>app/Services/Post</code> 目錄下。</p>
<p>根據 <code>PSR-4</code>，PHP 的 namespace 必須與目錄相同，也就是說除了將 <code>PostService</code> 放到 <code>app/Services/Post</code> 目錄下外，以下程式碼必須修改 :</p>
<ul>
<li><code>PostService</code> 的 namespace 必須修改。</li>
<li>單元測試的 <code>PostServiceTest</code> 的 <code>use</code> 必須修改。</li>
<li>Controller 的 <code>PostController</code> 的 <code>use</code> 必須修改。</li>
</ul>
<p>本文只是很簡單的範例，已經要改 3 個地方，實務上會更複雜，要改的地方會更多，還可能沒改到或改錯。</p>
<p>這時候就要使用 PhpStorm 的重構了。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace002.png" alt=""></p>
<p>將滑鼠游標放在要重構的 <code>PostService</code> 的 class 名稱上，按熱鍵 &#8963; + T，選擇 <code>Move</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace003.png" alt=""></p>
<p>顯示 <code>Move Class</code> 對話框。</p>
<ul>
<li>在 <code>Move Class PostService to namespace</code> 填入新的 namespace : <code>App\Services\Post</code>，PhpStorm 會自動在 <code>Target destination directory</code> 加上 <code>Post</code>目錄。</li>
<li>將 <code>Search in comments and strings</code> 與  <code>Search for text occurrences</code> 都打勾。</li>
<li>按下 <code>Preview</code> 可以先看一下 PhpStorm 將做哪些重構，按 <code>Refactor</code> 則直接重構。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace004.png" alt=""></p>
<p>PhpStorm 預告將對 <code>PostController</code>、<code>PostServiceTest</code> 與 <code>PostService</code> 做重構，與我們的預期相同。</p>
<p>若發現 PhpStorm 失去水準判斷錯誤，可以將其選擇按右鍵將其 <code>Excluded</code> 或 <code>Remove</code> 掉。</p>
<p>最後按 <code>Do Refactor</code> 開始重構。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace005.png" alt=""></p>
<p>重構完趕快跑單元測試與整合測試，確認 PhpStorm 沒有改壞。</p>
<h2 id="重構_PostRepository">重構 PostRepository</h2><hr>
<p>前一個例子，是將 <code>PostService</code> 單一 class 重構其 namespace，實務上還有另外一種應用，是將一個目錄下所有 class 重構成另外一個 namespace。</p>
<p>目前想將 <code>app/Repositories</code> 下所有的 class 重構到 <code>app/Repositories/Post</code> 目錄下。</p>
<p>根據 <code>PSR-4</code>，PHP 的 namespace 必須與目錄相同，也就是說除了將 <code>PostRepository</code> 放到 <code>app/Repositories/Post</code> 目錄下外，以下程式碼必須修改 :</p>
<ul>
<li><code>PostRepository</code> 的 namespace 必須修改。</li>
<li>Service 的 <code>PostService</code> 的 <code>use</code> 必須修改。</li>
</ul>
<p>若目錄下有很多 class，要改的地方會更多，還可能沒改到或改錯。</p>
<p>這時候就要使用 PhpStorm 的重構了。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace006.png" alt=""></p>
<p>選擇要重構目錄下的其中一個檔案開啟，本例 <code>app/Repositories</code> 目錄下只有 <code>PostRepository</code>。</p>
<p>將滑鼠游標放在要重構的 <code>PostRepository</code> 的 namespace 名稱上，按熱鍵 &#8963; + T，選擇 <code>Move</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace007.png" alt=""></p>
<p>顯示 <code>Move Namespace</code> 對話框。</p>
<ul>
<li>在 <code>New Namespace name</code> 填入新的 namespace : <code>App\Repositories\Post</code>，PhpStorm 會自動在 <code>Target destination directory</code> 加上 <code>Post</code>目錄。</li>
<li>將 <code>Search in comments and strings</code> 與  <code>Search for text occurrences</code> 都打勾。</li>
<li>按下 <code>Preview</code> 可以先看一下 PhpStorm 將做哪些重構，按 <code>Refactor</code> 則直接重構。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace008.png" alt=""></p>
<p>PhpStorm 預告將對 <code>PostRepository</code> 與 <code>PostService</code> 做重構，與我們的預期相同。</p>
<p>若發現 PhpStorm 失去水準判斷錯誤，可以將其選擇按右鍵將其 <code>Excluded</code> 或 <code>Remove</code> 掉。</p>
<p>最後按 <code>Do Refactor</code> 開始重構。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace009.png" alt=""></p>
<p>重構完趕快跑單元測試與整合測試，確認 PhpStorm 沒有改壞。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>重構單一 class，是將游標放在 class 名稱上。</li>
<li>重構一目錄下所有 class，是將游標放在 namespace 名稱上。</li>
<li>Laravel 5 大量使用 namespace 後，只要改 namespace 就是大家永遠的痛，透過 PhpStorm 的重構，與自己寫的單元測試與整合測試保護後，再也不用害怕改 namespace 了。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 PhpStorm 自動幫我們重構 Namespace]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 對 Laravel 除錯?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-xdebug/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-xdebug/</id>
    <published>2016-06-11T12:23:43.000Z</published>
    <updated>2016-06-12T02:45:15.000Z</updated>
    <content type="html"><![CDATA[<p>傳統 PHP 大都使用 <code>echo()</code>、<code>var_dump()</code> 或 <code>dd()</code> 除錯，此種方式必須破壞原本程式碼，而且所能觀察的變數有限，也無法明確得知程式執行的流程。PhpStorm 支援 Xdebug，允許我們設定中斷點，程式將停在中斷點設定之處，讓我們透過 Step Into、Step Over、Step Out 的方式除錯，非常方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.37<br>MAMP PRO 3.5<br>PhpStorm 2016.1.2</p>
<h2 id="設定_Xdebug">設定 Xdebug</h2><hr>
<p>MAMP PRO 預設已經有安裝 Xdebug，只是在 <code>php.ini</code> 並沒有啟動，必須手動啟動後，再加上一些設定。</p>
<figure class="highlight php"><figcaption><span>/Applications/MAMP/bin/php/php7.0.0/conf/php.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">zend_extension=<span class="string">"/Applications/MAMP/bin/php/php7.0.0/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so"</span></span><br><span class="line">xdebug.remote_enable=<span class="number">1</span></span><br><span class="line">xdebug.remote_port=<span class="number">9000</span></span><br><span class="line">xdebug.profiler_enable=<span class="number">1</span></span><br><span class="line">xdebug.profiler_output_dir=<span class="string">"/Applications/MAMP/tmp"</span></span><br></pre></td></tr></table></figure>
<p>MAMP PRO 預設將 PHP 安裝在<code>/Applications/MAMP/bin/php/phpX.X.XX/conf/php.ini</code>，選擇版本加以修改<code>php.ini</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若不知道該改哪一個<code>php.ini</code>，可下<code>php --ini</code>指令，看看目前系統正在使用哪一個<code>php.ini</code>。</span></span></span></p>
<p>其中 <code>[xdebug]</code> 位於 <code>php.ini</code> 的最後一行，預設使用 <code>;</code> 註解，將 <code>;</code> 拿掉，並加上以上的 Xdebug 設定。</p>
<p>存檔後須重新啟動MAMP。</p>
<h2 id="設定_Hosts">設定 Hosts</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug007.png" alt=""></p>
<p>在 MAMP PRO 設定新 host。</p>
<ul>
<li><strong>PHP version</strong> : 7.0.0。</li>
<li><strong>Document root</strong> : <code>/Users/oomusou/Code/Demo/Laravel52Xdebug_demo/public</code>。</li>
</ul>
<p>存檔後須重新啟動MAMP。</p>
<h2 id="啟動_PHP_外掛">啟動 PHP 外掛</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug000.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Plugins</em></strong></p>
<ul>
<li>PhpStorm 預設已經安裝並啟動 PHP 外掛，確認此外掛已經啟動。</li>
</ul>
<h2 id="設定_Interpreter">設定 Interpreter</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug001.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP</em></strong></p>
<ul>
<li><strong>PHP language level</strong> : <code>7</code>。</li>
<li><strong>Interpreter</strong> : 按 <code>...</code> 設定PHP interpreter。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>PHP Interpreter 每個專案都要重新設定一遍。</span></span></span></li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug002.png" alt=""></p>
<p>選擇 <code>PHP 7.0.0</code> 的路徑 : <code>/Applications/MAMP/bin/php/php7.0.0/bin/php</code>。</p>
<p>若路徑正確，PhpStorm 會抓到 PHP 與 Xdebug 的版本。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug003.png" alt=""></p>
<p>從原本的 <code>&lt;no interpreter&gt;</code> 變成明確的 <code>PHP7 (7.0.0)</code>。</p>
<h2 id="產生_Bookmarklets">產生 Bookmarklets</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug004.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP -&gt; Debug</em></strong></p>
<ul>
<li>按下 <code>Use debugger bookmarklets to initiate debugging form your favorite browser</code>，將會使用你預設的瀏覽器開啟 <code>https://www.jetbrains.com/phpstorm/marklets/</code>。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug005.png" alt=""></p>
<p>在左側的 Xdebug 部分，按下 <code>Generate</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug006.png" alt=""></p>
<p>將產生 <code>Start debugger</code>，<code>Stop Debugger</code> 與 <code>Debug this page</code>。</p>
<p>將這 3 個連結拖拉到上方的 Bookmarks Bar。</p>
<ul>
<li><strong>Start debugger</strong> : 啟動 Xdebug 除錯。</li>
<li><strong>Stop debugger</strong> : 停止 Xdebug 除錯。</li>
<li><strong>Debug this page</strong> : 啟動 Xdebug，並重新載入目前網頁。</li>
</ul>
<h2 id="設定中斷點">設定中斷點</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug008.png" alt=""></p>
<p>在 <code>app/Http/routes.php</code> 的 14 行的最左側點一下，設定中斷點。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>實務上你可以在任何你想要除錯的 PHP 程式碼中設定中斷點，本範例是以 Laravel 預設專案的 <code>routes.php</code> 為例。</span></span></span></p>
<h2 id="傾聽_Xdebug">傾聽 Xdebug</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug009.png" alt=""></p>
<p>按下上方的 <code>電話筒</code> 圖示，綠色表示開始傾聽 Xdebug，可在所設定的中斷點停止。</p>
<h2 id="啟動_Xdebug">啟動 Xdebug</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug010.png" alt=""></p>
<p>開啟瀏覽器，按下 <code>Start debugger</code>，在網址列輸入 <code>http://laravel52xdebug:8888</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug011.png" alt=""></p>
<p>PhpStorm 會跳出 <code>Incoming Connection From Xdebug</code> 視窗，按 <code>Accept</code> 繼續。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug012.png" alt=""></p>
<p>程式執行將停在剛剛設定的中斷點。</p>
<p>下方會出現 Debugger 視窗，提供除錯的詳細資訊。</p>
<ul>
<li>左側綠色三角形為 <code>Resume Program</code>，表示將繼續執行，直到下一個中斷點停止。</li>
<li>左側紅色方形為 <code>Stop</code>，表示停止目前程式執行。</li>
<li>上方第一個圖示為 <code>Step Over</code>，表示將跳過目前函式。</li>
<li>上方第二個圖示為 <code>Step Into</code>，表示將執行目前函式內部的程式碼。</li>
<li>上方第三個圖示為 <code>Force Step Into</code>，表示將強制執行目前函式內部的程式碼。</li>
<li>上方第四個圖示為 <code>Step Out</code>，表示將跳出目前函式內部的程式碼。</li>
<li>上方第五個圖示為 <code>Run to Cursor</code>，表示將快速執行到目前游標處停止。</li>
<li><code>Variables</code> 為目前 scope 所有的變數值。</li>
<li><code>Watches</code> 可自行新增想觀察的變數。</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>使用這種方式之後，我再也沒用過 <code>echo()</code>、<code>var_dump()</code> 或 <code>dd()</code> 來除錯，只要在認為有問題的程式碼之處，設定中斷點，就可以觀察當時所有變數的值，並且觀察程式實際執行的流程。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[以中斷點方式替 Laravel 除錯]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="MAMP" scheme="http://oomusou.io/tags/MAMP/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Xdebug" scheme="http://oomusou.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何設定 PhpStorm 的 Directories?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-directories/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-directories/</id>
    <published>2016-06-10T12:23:43.000Z</published>
    <updated>2016-06-17T07:30:40.000Z</updated>
    <content type="html"><![CDATA[<p>PhpStorm 最強的三個功能為 : Refactoring、Debugging、與 Inspection，但由於 PHP 生態是眾多 framework，而每個 framework 的目錄架構也不太一樣，因此必須先在 PhpStorm 設定 directories，才能發揮 PhpStorm 的強悍功能，而不只是文字編輯器而已。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.36</p>
<h2 id="提示設定_Directories">提示設定 Directories</h2><hr>
<p><img src="/images/phpstorm/phpstorm-directories/dir000.png" alt=""></p>
<p>當使用 PhpStorm 開啟 Laravel 專案時，一開始會對專案做 indexing，之後就會出現 <code>Detect PSR-0 namespace roots</code> 的提示，要求你設定 Directories。</p>
<p>很多初學者因為不知道設定 Directories 的重要性，就直接將對話框關閉，這是非常可惜的，這將喪失很多 PhpStorm 重要的功能。</p>
<h2 id="手動設定_Directories">手動設定 Directories</h2><hr>
<p><img src="/images/phpstorm/phpstorm-directories/dir001.png" alt=""></p>
<p>按 <code>Settings | Directories</code> 手動設定 <code>Directories</code>。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  不建議使用 <strong>automatically</strong> 由 PhpStorm 自動設定 directories，這將導致 <strong>vendor</strong> 目錄被設定在 <strong>Excluded</strong> 下，導致 Laravel 與其他 package 的語法提示不正常。</div>
<p><img src="/images/phpstorm/phpstorm-directories/dir002.png" alt=""></p>
<p>進入設定 Directories 視窗，若第一次沒由 <code>Detect PSR-0 namespaces roots</code> 設定也沒關係，日後只要在此設定即可。</p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Directories </em></strong></p>
<p>接下來要設定 <code>Tests</code>、<code>Sources</code>、<code>Excluded</code> 與 <code>Resource Root</code> 4 個目錄。</p>
<h2 id="Sources">Sources</h2><hr>
<p>設定 <code>PSR-0 namespace roots</code> 的主目錄，也就是 Laravel 的 <code>app</code> 目錄。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir003.png" alt=""></p>
<p>選擇 <code>app</code> 目錄，按上方的 <code>Sources</code>，會在右側出現 <code>Source Folders app</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir004.png" alt=""></p>
<p>按 <code>P</code> 設定該目錄的 property。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir005.png" alt=""></p>
<p>在 <code>Package prefix</code> 輸入 <code>App</code>，因為 <code>app</code> 目錄對應的正是 Laravel 的 namespace <code>App</code>。</p>
<p>這是所有 directories 設定中最重要的一個，在 Laravel 5 之後，全面使用 namespace，管理 namespace 成為很多人的惡夢，但只要設定了 <code>Sources</code> 之後，將來 PhpStorm 會幫我們管理 namespace。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir006.png" alt=""></p>
<p>設定了 <code>Sources</code> 之後，在 project windows 的 <code>app</code> 會顯示藍色。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir007.png" alt=""></p>
<p>假如我們想在自己建立的 <code>Services</code> 目錄下，建立其他 class 寫商業邏輯。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 Service 模式，詳細請參考<a href="/laravel/laravel-service/">如何使用 Service 模式?</a></span></span></span></p>
<p>選擇 <code>Services</code> 目錄，按熱鍵 &#8984; + N，顯示 <code>New</code> 視窗，選擇 <code>PHP Class</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir008.png" alt=""></p>
<p>自行輸入 class 名稱，值得注意的是，PhpStorm 已經自動幫我們準備好 namespace，不必我們操心。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir009.png" alt=""></p>
<p>程式碼也幫我們管理好 namespace 了。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/81257eedf3819dd685911dd90f04ce7207b3ea34" target="_blank" rel="external">建立 OrderService</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-directories/dir010.png" alt=""></p>
<p>若想要注入其他物件，可在 constructor 的參數以 type hint 方式注入。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於依賴注入，詳細請參考<a href="/tdd/tdd-di/">深入探討依賴注入</a></span></span></span></p>
<p>如我們想注入 <code>User</code>，但 PhpStorm 已經反白警告找不到 <code>User</code> class。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir011.png" alt=""></p>
<p>選擇反白的 <code>User</code>，按熱鍵 &#8997; + &#8617;，選擇 <code>Import class</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir012.png" alt=""></p>
<p>若整個專案只有一個同名的 class，PhpStorm 會自動 import，否則會出現視窗讓你決定要 import 哪一個 class。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir013.png" alt=""></p>
<p>PhpStorm 自動幫我們 use 了 <code>App\User</code>。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/8a4d3267723e5b9d3be63767503d1f399a85c6a9" target="_blank" rel="external">注入 User</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  無論是建立 namespace，或者引用 namespace，完全由 PhpStorm 自動幫我們處理，不用擔心 namespace 大小寫寫錯，也不用擔心 namespace 的完整路徑為何。</div>
<h2 id="Tests">Tests</h2><hr>
<p>設定測試程式的主目錄，也就是 Laravel 的 <code>tests</code> 目錄。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir014.png" alt=""></p>
<p>選擇 <code>tests</code> 目錄，按上方的 <code>Tests</code>，會在右側出現 <code>Test Source Folders tests</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir015.png" alt=""></p>
<p>設定了 <code>Tests</code> 之後，在 project windows 的 <code>tests</code> 會顯示綠色。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir016.png" alt=""></p>
<p>可在 project windows 選擇 <code>Tests</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir017.png" alt=""></p>
<p>將只顯示所有測試程式，方便測試時使用。</p>
<h2 id="Resource_Root">Resource Root</h2><hr>
<p>設定前端資源的主目錄，也就是 Laravel 的 <code>public</code> 目錄。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir018.png" alt=""></p>
<p>選擇 <code>public</code> 目錄，按上方的 <code>Resource Root</code>，會在右側出現 <code>Resource roots public</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir019.png" alt=""></p>
<p>設定了 <code>Resource roots</code> 之後，在 project windows 的 <code>public</code> 會顯示紫色。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir020.png" alt=""></p>
<p>在 <code>resources/views/welcome.blade.php</code> 加上 Vue.js 後，在 <code>js/app.js</code> 出現反白。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/b5e0b68d2677e96e77117eb1d9f17ea316af7d1f" target="_blank" rel="external">修改 welcome.blade.php</a></span></span></span></p>
<p>PhpStorm 抱怨找不到 <code>js/app.js</code>，的確我們在 <code>public</code> 目錄下還沒有建立 <code>js/app.js</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir021.png" alt=""></p>
<p>在 <code>public</code> 目錄下新增 <code>js/app.js</code> 之後，PhpStorm 就不在警告了。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/4418c29aa7d0913388911dee8ad5411414adbb25" target="_blank" rel="external">新增 js/app.js</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  <strong>Resource roots</strong> 不是設定在 Laravel 的 <strong>resources</strong> 目錄，而是設定在 <strong>public</strong> 目錄。藉由此設定，PhpStorm 可以幫你檢查 Blade 或 HTML 的 JavaScript 與 CSS 路徑是否合法。</div>
<h2 id="Excluded">Excluded</h2><hr>
<p>不由 PhpStorm 管理，或不想由 PhpStorm 建立 index 的目錄。</p>
<p>實務上若你在專案目錄下，會自己建立一個目錄放 Spec 或相關文件，如 pdf, docx, xlsx 格式，這個目錄交給 PhpStorm 管理並沒有任何意義，只會增加建立 index 時間而已，就可以將該目錄設定為 <code>Excluded</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>這些都是很重要的設定，可惜 PhpStorm 文件並沒有仔細介紹，以上都是實際使用 PhpStorm 一段時間之後摸索出來的心得，將這些目錄設定之後，才能發揮 PhpStorm 強悍功能。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52Directories_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[正確設定 Directories 才能發揮 PhpStorm 的威力]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 打造 Vue.js 開發環境?]]></title>
    <link href="http://oomusou.io/vuejs/vuejs-on-phpstorm/"/>
    <id>http://oomusou.io/vuejs/vuejs-on-phpstorm/</id>
    <published>2016-06-08T15:33:02.000Z</published>
    <updated>2016-06-12T10:58:09.000Z</updated>
    <content type="html"><![CDATA[<p>我是一個很依賴語法提示才能寫程式的人，一來我記憶力很差，我記不了很多API，二來我很容易 typo，所以只能依賴語法提示用選的，所以寫 Vue.js 的第一件事情，就是在 PhpStorm 先把開發環境弄好。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Vue.js 1.0.24<br>PhpStorm 2016.1.2<br>Plugin : vue-for-idea 1.0.6<br>Plugin : Vue.js 1.1.0</p>
<h2 id="Vue-js_on_PhpStorm">Vue.js on PhpStorm</h2><hr>
<p>PhpStorm 要支援 Vue.js，主要有 3 個重點 :</p>
<ol>
<li><strong>Directive</strong> : 支援由 <code>v-</code> 開頭的 directive，如 <code>v-model</code>，以及其 shorthand，如 <code>@click</code>，<code>:href</code>。</li>
<li><strong>API</strong> : 支援 Vue.js 的 API，如 <code>Vue.component()</code>。</li>
<li><strong>vue 元件</strong> : 支援 Vue.js 自創的 component 格式，在 PhpStorm 正常顯示，沒有警告。</li>
</ol>
<h2 id="安裝_Vue-js_外掛">安裝 Vue.js 外掛</h2><hr>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps000.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Plugin </em></strong></p>
<ul>
<li>輸入 <code>vue</code>，按 <code>Search in repositories</code>。</li>
</ul>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps001.png" alt=""></p>
<p>會搜尋到 2 個 Vue.js 外掛 : <code>vue-for-idea</code> 與 <code>Vue.js</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>這兩個外掛並非 JetBrains 官方所出，而是由 open source 社群所維護，目前這兩個外掛仍在開發中，各自實現了一些功能，如 <code>Vue.js</code> 外掛支援 directive，卻不支援 shorthand，而 <code>vue-for-idea</code> 外掛支援 shorthand，卻不支援 directive，所以必須兩個外掛都裝，功能才會比較齊全。</span></span></span></p>
<p>將這兩個外掛全部安裝。  </p>
<p>先安裝 <code>vue-for-idea</code> 外掛。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps002.png" alt=""></p>
<p>安裝完 <code>vue-for-idea</code> 外掛之後，需重新啟動 PhpStorm。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps003.png" alt=""></p>
<p>安裝 <code>Vue.js</code> 外掛。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps004.png" alt=""></p>
<p>安裝完 <code>Vue.js</code> 外掛之後，需重新啟動 PhpStorm。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps005.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Plugin </em></strong></p>
<ul>
<li>重新啟動後，確認 <code>vue-for-idea</code> 與 <code>Vue.js</code> 兩個外掛都已經安裝成功。</li>
</ul>
<h2 id="第一次執行_Vue-js">第一次執行 Vue.js</h2><hr>
<p>Vue.js 提供很多方式安裝</p>
<ol>
<li>直接下載</li>
<li>CDN</li>
<li>NPM</li>
<li>Vue-CLI</li>
</ol>
<p>本文先以最簡單的 CDN 方式安裝 Vue.js。</p>
<p><strong>welcome.blade.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Vue10_demo/commit/888b8d71bd9792e2447a7c750e1c1ce89b7b99f3" target="_blank" rel="external">在 blade 載入 Vue.js</a></span></span></span><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>Laravel<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"https://fonts.googleapis.com/css?family=Lato:100"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">            <span class="tag">html</span>, <span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> <span class="number">100</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'Lato'</span></span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">display</span>:<span class="value"> table-cell</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> middle</span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="class">.content</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="class">.title</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">96px</span></span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span>Laravel 5<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span>&gt;</span>@&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.24/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>45 行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.24/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>直接以 CDN 載入 Vue.js。</p>
<p>46 行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>將 Vue.js 的程式碼寫在 <code>js/app.js</code>。</p>
<p>42 行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span>@&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>使用 Vue.js 顯示 <code>message</code> 變數。</p>
<p>加上 <code>@</code> 是為了告訴 Laravel 的 Blade 不要處理，交給 Vue.js 處理。</p>
<p><strong>app.js</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Vue10_demo/commit/62fd031bf31125e1b7c9570c57017ab861b3c0fb" target="_blank" rel="external">新增 app.js</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>public/js/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue = &#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'Vue.js 1'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(vue);</span><br></pre></td></tr></table></figure></p>
<p>建立 <code>Vue</code> 物件，<code>vue</code> 為其 constructor，設定了 <code>el</code> 與 <code>data</code> 屬性。</p>
<p>要將變數 <code>message</code> 為 <code>Vue.js 1</code> 的值，透過 data binding 顯示在 <code>welcome.blade.php</code>。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps010.png" alt=""></p>
<p>若能看到 <code>Vue.js 1</code>，表示 Vue.js 已經正常啟動。</p>
<h2 id="安裝_Vue-js_Library">安裝 Vue.js Library</h2><hr>
<p>目前為止雖然可以正常執行 Vue.js，不過那僅代表瀏覽器執行正常，並不代表 PhpStorm 認識 Vue.js，PhpStorm 目前也還無法對 Vue.js 做語法提示。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps006.png" alt=""></p>
<p>對於 Vue.js 的 CDN，PhpStorm 提出了警告，表示沒有本機版本，因此無法提供語法提示。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps007.png" alt=""></p>
<p>將滑鼠放在反白的 CDN 上，按熱鍵 &#8997; + &#8617;，選擇 <code>Download library</code>。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps008.png" alt=""></p>
<p>下載成功後，CDN 上的反白警告會消失。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps009.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; JavaScript -&gt; Libraries</em></strong></p>
<ul>
<li>會出現 <code>vue</code>，表示 Vue.js 的 external library 已經安裝成功，從此 PhpStorm 可以為 Vue.js 的 API 做語法提示。</li>
</ul>
<h2 id="Directive">Directive</h2><hr>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps011.png" alt=""></p>
<p>只要輸入 <code>v</code>，就會顯示 Vue.js 專屬的 directive 了。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps015.png" alt=""></p>
<p>也支援 <code>@</code> 開頭的 shorthand。</p>
<h2 id="API">API</h2><hr>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps012.png" alt=""></p>
<p>PhpStorm 的語法提示可以自動顯示 Vue.js 的 API 了。</p>
<p>若為 Vue.js 的 API，會加上 <code>(vue)</code>。</p>
<h2 id="Vue_元件">Vue 元件</h2><hr>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps013.png" alt=""></p>
<p>按熱鍵 &#8963; + N 時，會出現 <code>Vue File</code>，可以讓我們直接新增 Vue 元件。</p>
<p><img src="/images/vuejs/vuejs-on-phpstorm/vueps014.png" alt=""></p>
<p>自動產生預設的 Vue 元件框架。</p>
<p>PhpStorm 可以認出 Vue 元件，且程式碼也不再出現任何錯誤警告。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm 包含 WebStorm，所以也可以拿來開發 JavaScript，並對 JavaScript 加以測試、重構與偵錯，在 PhpStorm 打造好 Vue.js 的開發環境後，就可以開心的學習 Vue.js 了。</li>
<li>目前 <code>vue-for-idea</code> 與 <code>Vue.js</code> 這兩個外掛仍在持續開發中，功能還不夠完整，希望 JetBrains 能趕快針對 Vue.js 開發出專屬套件，讓 PhpStorm 開發 Vue.js 更有效率。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52Vue10_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[在 PhpStorm 對 Vue.js 語法提示與語法變色]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Vue.js" scheme="http://oomusou.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用變數讀取 property?]]></title>
    <link href="http://oomusou.io/javascript/javascript-variable-property/"/>
    <id>http://oomusou.io/javascript/javascript-variable-property/</id>
    <published>2016-06-07T12:23:43.000Z</published>
    <updated>2016-06-07T03:27:04.000Z</updated>
    <content type="html"><![CDATA[<p>傳統我們會使用 <code>if else</code> 判斷，讀取不同的 property，但由於 JavaScript 與 PHP 動態語言的特性，我們可以將要讀取的 property 名稱以<strong>變數</strong>表示，直接以該變數讀取 property。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 5<br>PHP 7.0</p>
<h2 id="JavaScript">JavaScript</h2><hr>
<h3 id="if_else">if else</h3><p>傳統若要根據不同的條件，讀取不同 property，我們會使用 <code>if else</code>方式 :<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/VariableProperty/commit/b84e31b15722571402a379bd040090bfaf7c41f1" target="_blank" rel="external">JavaScript : 傳統使用 if else 切換讀取 property</a></span></span></span></p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">'first'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">'first'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.firstName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.lastName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (type === <span class="string">'first'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.firstName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.lastName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>if else</code> 去判斷變數值，讀取不同 property。</p>
<h3 id="Variable">Variable</h3><p>若將 property 名稱使用變數表示，則不需使用 <code>if else</code> 判斷 :<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/VariableProperty/commit/9e4288fc847a12f9aeef2d1af9240f0dee01a098" target="_blank" rel="external">JavaScript : 動態使用變數切換讀取 property</a></span></span></span></p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">'first'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line">propName = (type === <span class="string">'first'</span>) ? <span class="string">'firstName'</span> : <span class="string">'lastName'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user[propName]);</span><br></pre></td></tr></table></figure>
<p>第 9 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">propName = (type === <span class="string">'first'</span>) ? <span class="string">'firstName'</span> : <span class="string">'lastName'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user[propName]);</span><br></pre></td></tr></table></figure></p>
<p>判斷 <code>type</code>，並將要讀取的 property 名稱存入 <code>propName</code> 變數。</p>
<p>在 JavaScript，若要執行物件的 method，有以下3種方式 :</p>
<ol>
<li>object.property </li>
<li>object[‘property’] : 其中 ‘property’ 是<strong>字串</strong>。</li>
<li>object[property] : 其中 property 是<strong>變數</strong>。</li>
</ol>
<p>因為第 3 種方式，我們可以將 property 名稱以變數方式傳入 <code>[]</code>。</p>
<h2 id="PHP">PHP</h2><hr>
<p>PHP 也可以達到類似 JavaScript 的功能。</p>
<h3 id="if_else-1">if else</h3><p>傳統若要根據不同的條件，讀取不同 property，我們會使用 <code>if else</code>方式 :<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/VariableProperty/commit/df7bb5fd3c633902f0fe2b86a53700ab7e5e5f2d" target="_blank" rel="external">PHP : 傳統使用 if else 切換讀取 property</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$firstName</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lastName</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * User constructor.</span><br><span class="line">     * <span class="doctag">@param</span> string $firstName</span><br><span class="line">     * <span class="doctag">@param</span> string $lastName</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string <span class="variable">$firstName</span>, string <span class="variable">$lastName</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;firstName = <span class="variable">$firstName</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;lastName = <span class="variable">$lastName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span> = <span class="string">'first'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> User(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$type</span> === <span class="string">'first'</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$user</span>-&gt;firstName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$user</span>-&gt;lastName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$type</span> === <span class="string">'first'</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$user</span>-&gt;firstName);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$user</span>-&gt;lastName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>if else</code> 去判斷變數值，讀取不同 property。</p>
<h3 id="Variable-1">Variable</h3><p>若將 property 名稱使用變數表示，則不需使用 <code>if else</code>判斷 :<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/VariableProperty/commit/4d69a38b81ce41e654b3041c66c9005bddea3492" target="_blank" rel="external">PHP : 動態使用變數切換讀取 property</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$firstName</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lastName</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * User constructor.</span><br><span class="line">     * <span class="doctag">@param</span> string $firstName</span><br><span class="line">     * <span class="doctag">@param</span> string $lastName</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string <span class="variable">$firstName</span>, string <span class="variable">$lastName</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;firstName = <span class="variable">$firstName</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;lastName = <span class="variable">$lastName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span> = <span class="string">'first'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> User(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"><span class="variable">$propName</span> = (<span class="variable">$type</span> === <span class="string">'first'</span>) ? <span class="string">'firstName'</span> : <span class="string">'lastName'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$user</span>-&gt;<span class="variable">$propName</span>);</span><br></pre></td></tr></table></figure>
<p>第 23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$propName</span> = (<span class="variable">$type</span> === <span class="string">'first'</span>) ? <span class="string">'firstName'</span> : <span class="string">'lastName'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$user</span>-&gt;<span class="variable">$propName</span>);</span><br></pre></td></tr></table></figure></p>
<p>判斷 <code>$type</code>，並將要讀取的 property 名稱存入 <code>$propName</code> 變數。</p>
<p>在 PHP，允許我們在 <code>-&gt;</code> 之後直接加上<strong>變數</strong>，代表要執行的 property。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>JavaScript 與 PHP 都允許我們將欲讀取的 propety 名稱以變數表示。</li>
<li>因為 property 名稱是<strong>字串</strong>，所以我們可以將 property 名稱存在<strong>設定檔</strong>內，如 <code>config/app.php</code>，將來若因為需求改變，須改變讀取的 property 時，只需修改設定檔即可，並透過 <code>config::get()</code> 讀取 property 名稱，原來程式碼完全不用修改，達到<strong>開放封閉原則</strong>的要求。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/VariableProperty" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用變數讀取 property 取代 if else]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://oomusou.io/tags/JavaScript/"/>
    
      <category term="PHP" scheme="http://oomusou.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Repository 模式處理一對多資料庫?]]></title>
    <link href="http://oomusou.io/laravel/laravel-repository-fk/"/>
    <id>http://oomusou.io/laravel/laravel-repository-fk/</id>
    <published>2016-05-28T12:23:43.000Z</published>
    <updated>2016-06-06T05:06:39.000Z</updated>
    <content type="html"><![CDATA[<p>Repository 模式對於處理中大型專案非常有效，可避免 model 與 controller 過於肥大而難以維護，且讓我們可以單獨對 repository 做單元測試，而不必對 Eloquent 做複雜的 mock。但在一對多的資料庫中，由於存在 foreign key，使得新增資料存檔時，因為 foreign key 還沒出現，而面臨了巨大的挑戰。</p>
<p>本文提出簡單方法，讓 Repository 也能處理一對多資料庫。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.32</p>
<h2 id="面臨的挑戰">面臨的挑戰</h2><hr>
<p>為了讓 controller 與 model 徹底解耦合，我們會使用 repository 模式，將資料庫邏輯封裝在 repository 內。為了方便，我們會將最常用的 CRUD 寫在 <code>AbstractRepository</code> 內。</p>
<p><strong>AbstractRepository.php</strong><br><figure class="highlight php"><figcaption><span>app/Repositories/AbstractRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** 注入的model */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 根據pk找資料</span><br><span class="line">     * <span class="doctag">@param</span> $id</span><br><span class="line">     * <span class="doctag">@param</span> array $columns</span><br><span class="line">     * <span class="doctag">@return</span> mixed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">(<span class="variable">$id</span>, <span class="variable">$columns</span> = [<span class="string">'*'</span>])</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model-&gt;find(<span class="variable">$id</span>, <span class="variable">$columns</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 根據一般欄位找資料</span><br><span class="line">     * <span class="doctag">@param</span> $attribute</span><br><span class="line">     * <span class="doctag">@param</span> $value</span><br><span class="line">     * <span class="doctag">@param</span> array $columns</span><br><span class="line">     * <span class="doctag">@return</span> Model</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findBy</span><span class="params">(<span class="variable">$attribute</span>, <span class="variable">$value</span>, <span class="variable">$columns</span> = [<span class="string">'*'</span>])</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model</span><br><span class="line">            -&gt;where(<span class="variable">$attribute</span>, <span class="string">'='</span>, <span class="variable">$value</span>)</span><br><span class="line">            -&gt;first(<span class="variable">$columns</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳全部資料</span><br><span class="line">     * <span class="doctag">@param</span> array $columns</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">all</span><span class="params">(<span class="variable">$columns</span> = [<span class="string">'*'</span>])</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model-&gt;all(<span class="variable">$columns</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳分頁資料</span><br><span class="line">     * <span class="doctag">@param</span> int $perPage</span><br><span class="line">     * <span class="doctag">@param</span> array $columns</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">paginate</span><span class="params">(<span class="variable">$perPage</span> = <span class="number">15</span>, <span class="variable">$columns</span> = [<span class="string">'*'</span>])</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model-&gt;paginate(<span class="variable">$perPage</span>, <span class="variable">$columns</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 新增資料，回傳 model，直接存檔</span><br><span class="line">     * <span class="doctag">@param</span> array $data</span><br><span class="line">     * <span class="doctag">@return</span> Model</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(array <span class="variable">$data</span>)</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model-&gt;create(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 修改資料，回傳 model，直接存檔</span><br><span class="line">     * <span class="doctag">@param</span> array $data</span><br><span class="line">     * <span class="doctag">@param</span> $id</span><br><span class="line">     * <span class="doctag">@param</span> string $attribute</span><br><span class="line">     * <span class="doctag">@return</span> Model</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(array <span class="variable">$data</span>, <span class="variable">$id</span>, <span class="variable">$attribute</span> = <span class="string">"id"</span>)</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model</span><br><span class="line">            -&gt;where(<span class="variable">$attribute</span>, <span class="string">'='</span>, <span class="variable">$id</span>)</span><br><span class="line">            -&gt;update(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 刪除資料，回傳 model，直接刪除</span><br><span class="line">     * <span class="doctag">@param</span> $id</span><br><span class="line">     * <span class="doctag">@return</span> Model</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">(<span class="variable">$id</span>)</span> </span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model-&gt;destroy(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這樣對於單一 table 來說，新的 repository 只要繼承 <code>AbstractRepository</code>，基本的 CRUD 都有了。</p>
<p>但若是一對多 table，因為存在 FK，因此無法在 <code>create()</code> 時同時處理 FK。</p>
<h2 id="支援一對多存檔">支援一對多存檔</h2><hr>
<p>對 <code>AbstractRepository</code> 稍加擴充，讓 repository 可以利用 Eloquent 的 relation 處理 FK。</p>
<p><strong>AbstractRepository.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryFK_demo/commit/04e7bb23e55352de275cfcba417c5ca2fb91d3d8" target="_blank" rel="external">新增 AbstractRepository</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/AbstractRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** 注入的model */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> string $modelName model名稱 */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$modelName</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * AbstractRepository constructor.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;modelName = get_class(<span class="variable">$this</span>-&gt;model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 若存在則傳回 model，若不存在則新增</span><br><span class="line">     * <span class="doctag">@param</span> array $data</span><br><span class="line">     * <span class="doctag">@return</span> Model</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">firstOrCreate</span><span class="params">(array <span class="variable">$data</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;model-&gt;firstOrCreate(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 新增資料，傳回 model，不存檔</span><br><span class="line">     * <span class="doctag">@param</span> array $data</span><br><span class="line">     * <span class="doctag">@return</span> Model</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">new</span><span class="params">(array <span class="variable">$data</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$this</span>-&gt;modelName(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 新增資料，傳回 model，不存檔</span><br><span class="line"> * <span class="doctag">@param</span> array $data</span><br><span class="line"> * <span class="doctag">@return</span> Model</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">new</span><span class="params">(array <span class="variable">$data</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$this</span>-&gt;modelName(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新增資料除了原有的 <code>create()</code>外，還多了 <code>new()</code>，專門負責處理一對多的新增，此時並不像 <code>create()</code> 將資料直接存進資料庫，而是傳回 model 物件。</p>
<p><code>modelName</code> 為 field，主要儲存目前 repository 的 model 的 class 名稱，為一字串，主要提供 <code>new</code> 所需要的變數。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>這裡用到了一個 PHP 技巧，<code>new</code> 了一個變數成物件，詳細請參考<a href="/php/php-variable-object/">如何使用變數建立物件?</a></span></span></span></p>
<p>14  行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * AbstractRepository constructor.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;modelName = get_class(<span class="variable">$this</span>-&gt;model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>modelName</code> 在 constructor 內，由 PHP 原生的 <code>get_class()</code> 從 model 物件獲得該物件的 class 名稱。</p>
<p>47 行<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 若存在則傳回 model，若不存在則新增</span><br><span class="line"> * @param <span class="keyword">array</span> <span class="variable">$data</span></span><br><span class="line"> * @<span class="keyword">return</span> Model</span><br><span class="line"> */</span><br><span class="line">public <span class="keyword">function</span> firstOrCreate(<span class="keyword">array</span> <span class="variable">$data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    return <span class="variable">$this-</span>&gt;model-&gt;firstOrCreate(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這也是新增的 method，主要用在一對多存檔時，如典型的 1 篇 post 對多篇 comment。</p>
<p>新增 comment 時，post 可能存在，也可能不存在，只要將 post 資料傳給 <code>firstOrCreate()</code> 即可，若 post 存在則傳回 <code>Post</code> model，若不存在則新增 post 並傳回 <code>Post</code> model，也就是無論如何都會傳回 <code>model</code>，讓 <code>Post</code> 可以透過 relation 來處理 <code>comment</code> 的 FK。</p>
<h2 id="實際_Repository">實際 Repository</h2><hr>
<p>將以典型的 1 篇 post 對多篇 comment 的一對多架構，實際使用 repository 模式來處理 comment 的 FK。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryFK_demo/commit/d0b2ec387637a0f858d765b8457102881a7e585d" target="_blank" rel="external">新增 PostRepository</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span> <span class="keyword">extends</span> <span class="title">AbstractRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Post $model Model物件 */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostRepository constructor.</span><br><span class="line">     * <span class="doctag">@param</span> $model</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Post <span class="variable">$model</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;model = <span class="variable">$model</span>;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>PostRepository</code> 直接繼承 <code>AbstractRepository</code>，在 constructor 將 <code>Post</code> model 注入，並執行 <code>parent::__construct()</code>，也就是 <code>AbstractRepository</code> 的 constructor。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  一般我們習慣將 <b>parent::__construct()</b> 寫在 constructor 的第一行，不過在此我們必須很技巧的將 <b>parent::__construct()</b> 寫在 constructor 的最後一行，因為在 AbstractRepository 的 constructor 中，$modelName 是由 $model 透過 <b>get_class()</b> 而來，所以 $model 必須先準備好才能 <b>get_class()</b>，因此 <b>parent::__construct()</b> 必須寫在最後一行。</div>
<p><strong>CommentRepository.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryFK_demo/commit/82cd347c7c5f33a1573556c96471293f6d504c2a" target="_blank" rel="external">新增 CommentRepository</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/CommentRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Comment</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentRepository</span> <span class="keyword">extends</span> <span class="title">AbstractRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Comment $model Model物件  */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostRepository constructor.</span><br><span class="line">     * <span class="doctag">@param</span> $model</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Comment <span class="variable">$model</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;model = <span class="variable">$model</span>;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同理，<code>CommentRepository</code> 也只需繼承 <code>AbstractRepository</code> 即可，其餘與 <code>PostRepository</code> 相同。</p>
<h2 id="單元測試">單元測試</h2><hr>
<h3 id="先新增_Post，再新增一筆_Comment">先新增 Post，再新增一筆 Comment</h3><p>最簡單的應用，就是先新增一筆 post，再新增一筆 comment。</p>
<p><strong>PostRepositoryTest.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryFK_demo/commit/82b2f934b96717b43e68d6a934c0f2a882a8d044" target="_blank" rel="external">單元測試 : 先新增 Post 再新增一筆 Comment</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/Repositories/PostRepositoryTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">CommentRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepositoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 先新增<span class="title">Post</span>再新增一筆<span class="title">Comment</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="comment">//&lt;editor-fold desc="Expected"&gt;</span></span><br><span class="line">        <span class="variable">$expectedPost</span> = [</span><br><span class="line">            <span class="string">'title'</span>       =&gt; <span class="string">'Post1 title'</span>,</span><br><span class="line">            <span class="string">'description'</span> =&gt; <span class="string">'Post1 description'</span>,</span><br><span class="line">            <span class="string">'content'</span>     =&gt; <span class="string">'Post1 content'</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expectedComment</span> = [</span><br><span class="line">            <span class="string">'name'</span>    =&gt; <span class="string">'Sam'</span>,</span><br><span class="line">            <span class="string">'email'</span>   =&gt; <span class="string">'oomusou@gmail.com'</span>,</span><br><span class="line">            <span class="string">'comment'</span> =&gt; <span class="string">"Sam's comment"</span>,</span><br><span class="line">        ];</span><br><span class="line">        <span class="comment">//&lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$target</span> = app(PostRepository::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$target</span>-&gt;create(<span class="variable">$expectedPost</span>)</span><br><span class="line">            -&gt;comments()</span><br><span class="line">            -&gt;create(<span class="variable">$expectedComment</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;seeInDatabase(<span class="string">'posts'</span>, <span class="variable">$expectedPost</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;seeInDatabase(<span class="string">'comments'</span>, <span class="variable">$expectedComment</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>29 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$target</span>-&gt;create(<span class="variable">$expectedPost</span>)</span><br><span class="line">    -&gt;comments()</span><br><span class="line">    -&gt;create(<span class="variable">$expectedComment</span>);</span><br></pre></td></tr></table></figure></p>
<p><code>$target</code> 即為 <code>PostRepository</code>。</p>
<p>post 資料由 <code>create()</code> 傳入，新增後回傳 <code>Post</code> model，繼續由 <code>comments()</code> relation 去新增 comment。</p>
<p>由於 comment 資料是由 <code>PostRepository</code> 負責，而非 <code>CommentRepository</code> 負責，因此 comment 的 FK 會由 <code>PostRepository</code> 處理。</p>
<p>這種方式與直接使用 Eloquent 處理一對多類似，也符合 ActiveRecord 習慣，因此非常直覺。</p>
<h3 id="先新增_Post，再新增多筆_Comment">先新增 Post，再新增多筆 Comment</h3><p>此外，先新增一筆 post，再新增多筆 comment，也是常見的應用。</p>
<p><strong>PostRepositoryTest.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryFK_demo/commit/6e0f9604413f8fa152fab40069c83c794de74f9d" target="_blank" rel="external">單元測試 : 先新增 Post 再新增多筆 Comment</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/Repositories/PostRepositoryTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">CommentRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepositoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 先新增<span class="title">Post</span>再新增多筆<span class="title">Comment</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="comment">//&lt;editor-fold desc="Expected"&gt;</span></span><br><span class="line">        <span class="variable">$expectedPost</span> = [</span><br><span class="line">            <span class="string">'title'</span>       =&gt; <span class="string">'Post1 title'</span>,</span><br><span class="line">            <span class="string">'description'</span> =&gt; <span class="string">'Post1 description'</span>,</span><br><span class="line">            <span class="string">'content'</span>     =&gt; <span class="string">'Post1 content'</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expectedComment</span> = [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'name'</span>    =&gt; <span class="string">'Sam'</span>,</span><br><span class="line">                <span class="string">'email'</span>   =&gt; <span class="string">'oomusou@gmail.com'</span>,</span><br><span class="line">                <span class="string">'comment'</span> =&gt; <span class="string">"Sam's comment"</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'name'</span>    =&gt; <span class="string">'Sunny'</span>,</span><br><span class="line">                <span class="string">'email'</span>   =&gt; <span class="string">'sunny@gmail.com'</span>,</span><br><span class="line">                <span class="string">'comment'</span> =&gt; <span class="string">"Sunny's comment"</span></span><br><span class="line">            ],</span><br><span class="line">        ];</span><br><span class="line">        <span class="comment">//&lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$target</span> = app(PostRepository::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$post</span> = <span class="variable">$target</span>-&gt;create(<span class="variable">$expectedPost</span>);</span><br><span class="line"></span><br><span class="line">        collect(<span class="variable">$expectedComment</span>)</span><br><span class="line">            -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$post</span>-&gt;comments()-&gt;create(<span class="variable">$value</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;seeInDatabase(<span class="string">'posts'</span>, <span class="variable">$expectedPost</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;seeInDatabase(<span class="string">'comments'</span>, <span class="variable">$expectedComment</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable">$this</span>-&gt;seeInDatabase(<span class="string">'comments'</span>, <span class="variable">$expectedComment</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>37 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = <span class="variable">$target</span>-&gt;create(<span class="variable">$expectedPost</span>);</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>PostRepository</code> 先新增一筆 post。</p>
<p>39 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">collect(<span class="variable">$expectedComment</span>)</span><br><span class="line">    -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$post</span>-&gt;comments()-&gt;create(<span class="variable">$value</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>因為有多筆 comments 要新增，所以動用了 <code>collection-&gt;each()</code>。</p>
<p>使用 <code>Post</code> model 的 <code>comments()</code> relation 來新增每個 <code>comment</code>。</p>
<h3 id="先新增_Comment，再新增_Post">先新增 Comment，再新增 Post</h3><p>前面兩個範例，都是先新增 post，再新增 comment，但實務上可能遇到 comment 先新增，然後才新增 post，此時就會遇到 comment 新增，但 FK 還沒出現的問題。</p>
<p><strong>PostRepositoryTest.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryFK_demo/commit/153444d6e312eefd43350612c779912c1aaa1225" target="_blank" rel="external">單元測試 : 先新增Comment再新增Post</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/Repositories/PostRepositoryTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">CommentRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepositoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 先新增<span class="title">Comment</span>再新增<span class="title">Post</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="comment">//&lt;editor-fold desc="Expected"&gt;</span></span><br><span class="line">        <span class="variable">$expectedPost</span> = [</span><br><span class="line">            <span class="string">'title'</span>       =&gt; <span class="string">'Post1 title'</span>,</span><br><span class="line">            <span class="string">'description'</span> =&gt; <span class="string">'Post1 description'</span>,</span><br><span class="line">            <span class="string">'content'</span>     =&gt; <span class="string">'Post1 content'</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expectedComment</span> = [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'name'</span>    =&gt; <span class="string">'Sam'</span>,</span><br><span class="line">                <span class="string">'email'</span>   =&gt; <span class="string">'oomusou@gmail.com'</span>,</span><br><span class="line">                <span class="string">'comment'</span> =&gt; <span class="string">"Sam's comment"</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'name'</span>    =&gt; <span class="string">'Sunny'</span>,</span><br><span class="line">                <span class="string">'email'</span>   =&gt; <span class="string">'sunny@gmail.com'</span>,</span><br><span class="line">                <span class="string">'comment'</span> =&gt; <span class="string">"Sunny's comment"</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'name'</span>    =&gt; <span class="string">'Jack'</span>,</span><br><span class="line">                <span class="string">'email'</span>   =&gt; <span class="string">'jack@gmail.com'</span>,</span><br><span class="line">                <span class="string">'comment'</span> =&gt; <span class="string">"Jack's comment"</span>,</span><br><span class="line">            ]</span><br><span class="line">        ];</span><br><span class="line">        <span class="comment">//&lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$postRepository</span> = app(PostRepository::class);</span><br><span class="line">        <span class="variable">$commentRepository</span> = app(CommentRepository::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$comment</span> = <span class="variable">$commentRepository</span>-&gt;new(<span class="variable">$expectedComment</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable">$post</span> = <span class="variable">$postRepository</span>-&gt;firstOrCreate(<span class="variable">$expectedPost</span>);</span><br><span class="line">        <span class="variable">$post</span>-&gt;comments()-&gt;save(<span class="variable">$comment</span>);</span><br><span class="line"></span><br><span class="line">        collect(<span class="variable">$expectedComment</span>)</span><br><span class="line">            -&gt;forget(<span class="number">0</span>)</span><br><span class="line">            -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$post</span>-&gt;comments()-&gt;create(<span class="variable">$value</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;seeInDatabase(<span class="string">'posts'</span>, <span class="variable">$expectedPost</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;seeInDatabase(<span class="string">'comments'</span>, <span class="variable">$expectedComment</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable">$this</span>-&gt;seeInDatabase(<span class="string">'comments'</span>, <span class="variable">$expectedComment</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$this</span>-&gt;seeInDatabase(<span class="string">'comments'</span>, <span class="variable">$expectedComment</span>[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>43 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$comment</span> = <span class="variable">$commentRepository</span>-&gt;new(<span class="variable">$expectedComment</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></p>
<p>根據需求，comment 必須先新增，此時因為 comment 的 FK 還不知道，因此不能使用 <code>create()</code>，只能使用 <code>new()</code> 先將 comment 資料存進 <code>Comment</code> model 並回傳。</p>
<p>44 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = <span class="variable">$postRepository</span>-&gt;firstOrCreate(<span class="variable">$expectedPost</span>);</span><br></pre></td></tr></table></figure></p>
<p>將 post 資料由 <code>firstOrCreate()</code> 傳入，無論 post 資料是否存在，最後都會傳回 <code>Post</code> model。</p>
<p>45 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span>-&gt;comments()-&gt;save(<span class="variable">$comment</span>);</span><br></pre></td></tr></table></figure></p>
<p>最後由 <code>Post</code> model 的 <code>comments()</code> relation 負責儲存 <code>Comment</code> model，其 FK 也會由 <code>PostRepository</code> 來儲存。</p>
<p>47 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">collect(<span class="variable">$expectedComment</span>)</span><br><span class="line">    -&gt;forget(<span class="number">0</span>)</span><br><span class="line">    -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$post</span>-&gt;comments()-&gt;create(<span class="variable">$value</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>最後由 <code>collection-&gt;each()</code> 來儲存剩下的 comments 資料。</p>
<p>唯一較特殊的是 : 因為第一筆 comment 已經儲存過，所以必須先使用 <code>forget(0)</code> 加以踢除，避免重複存檔。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Eloquent 因為使用 ActiveRecord 模式，本身就有點 repository 味道，因此很多人在使用 repository + Eloquent，會覺得有點格格不入的感覺，尤其在處理一對多存檔時，因為 FK 的問題而傷透腦筋。本文在不改變 Eloquent 習慣的前提下，多了一個 <code>new()</code> 與 <code>firstOrCreate()</code>，讓 repository 也能順利處理一對多存檔。</li>
<li>Repository 模式並沒有要取代 Eloquent，事實上 Eloquent 非常的好用，只是在大型專案下，若大量將資料庫邏輯寫在 model，會造成 model 肥大而難以維護，若透過 repository 模式，若單一 repository 過於肥大，甚至可以單一 model 配合多個 repository，讓 repository 更加的<strong>高內聚</strong>，也讓 controller 與 model 更加的<strong>低耦合</strong>，如此將更好維護，repository 也更容易測試。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52RepositoryFK_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[讓 controller 與 model 徹底解耦合]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何對工廠模式開放封閉?]]></title>
    <link href="http://oomusou.io/tdd/tdd-factory-ocp/"/>
    <id>http://oomusou.io/tdd/tdd-factory-ocp/</id>
    <published>2016-05-08T12:23:43.000Z</published>
    <updated>2016-06-15T01:15:46.000Z</updated>
    <content type="html"><![CDATA[<p>將建構物件的邏輯封裝在工廠模式，已經達到 90% 的開放封閉，最少其他 class 都已經開放封閉，將來所有的邏輯修改只剩下工廠模式，若能將工廠模式也開放封閉，那就太好了。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.31</p>
<h2 id="前言">前言</h2><hr>
<p>在<a href="/phpstorm/phpstorm-tdd-refactor/">如何使用 PhpStorm 實現 TDD、重構與偵錯?</a>與<a href="/tdd/tdd-di/">深入探討依賴注入</a>中，為了達到工廠模式的開放封閉，我用了一個技巧 : 故意將<strong>參數名稱</strong>與<strong>class名稱</strong>取相同，達到工廠模式的開放封閉，但實務上，可能參數來自於下拉式選單的 index，如 0, 1, 2 ….，或者參數與實際 class 名稱並不相同，需要一個 <code>if else</code> 或 <code>switch</code> 轉換，這樣就必須在工廠模式的 <code>create()</code> 或 <code>bind()</code> 寫邏輯，因此無法達成開放封閉原則的要求。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>本範例為<a href="/tdd/tdd-di/">深入探討依賴注入</a>的延伸，若覺得本文的範例看不懂，請先閱讀<a href="/tdd/tdd-di/">深入探討依賴注入</a></span></span></span></p>
<h2 id="實際案例">實際案例</h2><hr>
<p>假設目前有 3 家貨運公司，每家公司的計費方式不同，使用者可以動態選擇不同的貨運公司，將一步步的重構將工廠模式開放封閉。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>本範例靈感來自於91哥的<a href="https://dotblogs.com.tw/hatelove/archive/2013/01/02/learning-tdd-in-30-days-day17-refactoring-with-strategy-pattern.aspx" target="_blank" rel="external">30天快速上手TDD Day 17:Refactoring - Stagegy Pattern</a></span></span></span></p>
<h2 id="單元測試">單元測試</h2><hr>
<p><strong>ShippingServiceTest.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FactoryOCP-/commit/90363a0c813718490c4fd6ec25310544d8bffeeb" target="_blank" rel="external">新增黑貓單元測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓單元測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$companyNo</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$companyNo</span>, <span class="variable">$weight</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>先建立 <code>ShippingService</code> 的單元測試。</p>
<h2 id="ShippingService">ShippingService</h2><hr>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FactoryOCP-/commit/8dd2d0ed4957c4a6fcd5430285384c0b9a1e9554" target="_blank" rel="external">新增 ShippingService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $companyNo</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$companyNo</span>, int <span class="variable">$weight</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$logistics</span> = LogisticsFactory::create(<span class="variable">$companyNo</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因為已經制定了 <code>LogisticsInterface</code>，3 家貨運公司的計費方式，已經分別被封裝在 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>PostOffice</code> 3 個 class 內，所以必須使用工廠模式根據 <code>$companyNo</code>，回傳適當的貨運公司物件。</p>
<h2 id="工廠模式">工廠模式</h2><hr>
<p><strong>LogisticsFactory.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FactoryOCP-/commit/79b6ecd9ce06658bbc359a3cda3070759a34d141" target="_blank" rel="external">新增 LogisticsFactory</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticsFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(int <span class="variable">$companyNo</span> = <span class="number">0</span>)</span> : <span class="title">LogisticsInterface</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$companyNo</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BlackCat();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$companyNo</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Hsinchu();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$companyNo</span> == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PostOffice();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BlackCat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>if else</code> 判斷 <code>$companyNo</code>，根據不同的 <code>$companyNo</code>，回傳不同的貨運公司物件。</p>
<p>目前為止完全符合需求，會得到第 1 個 <span class="label label-success">綠燈</span>。</p>
<h2 id="將_if_else_重構成_switch">將 if else 重構成 switch</h2><hr>
<p><strong>LogisticsFactory.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FactoryOCP-/commit/04646722e327a0b844168cd615be9f36755938ab" target="_blank" rel="external">將 if else 重構成 switch</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticsFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(int <span class="variable">$companyNo</span> = <span class="number">0</span>)</span> : <span class="title">LogisticsInterface</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyNo</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> BlackCat();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Hsinchu();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PostOffice();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> BlackCat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 <code>if else</code> 重構成 <code>switch</code>，可稍微改善程式碼的可讀性。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>將 <code>if else</code> 重構成 <code>switch</code>，請參考<a href="/phpstorm/phpstorm-if-switch/">如何在PhpStorm將if else重構成switch case?</a></span></span></span></p>
<p>重構後趕快執行測試，看看有沒有重構壞掉。</p>
<p>目前為止完全符合需求，會得到第 2 個 <span class="label label-success">綠燈</span>。</p>
<h2 id="將_swtich_重構成_LUT">將 swtich 重構成 LUT</h2><hr>
<p><strong>LogisticsFactory.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FactoryOCP-/commit/63876d0ddec8c859562588755a5c43fd73a1adc5" target="_blank" rel="external">將 switch 重構成 LUT</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticsFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(int <span class="variable">$companyNo</span> = <span class="number">0</span>)</span> : <span class="title">LogisticsInterface</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$lut</span> = [</span><br><span class="line">            <span class="number">0</span> =&gt; BlackCat::class,</span><br><span class="line">            <span class="number">1</span> =&gt; Hsinchu::class,</span><br><span class="line">            <span class="number">2</span> =&gt; PostOffice::class</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$className</span> = Collection::make(<span class="variable">$lut</span>)-&gt;get(<span class="variable">$companyNo</span>, BlackCat::class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$className</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 <code>switch</code> 的條件式，改用 LUT (Look Up Table) 的方式表示，其中 <code>case</code> 重構成陣列的 key，要 <code>new</code> 的 class 重構成陣列的 value。</p>
<p>使用 <code>Collection::make()</code> 將陣列轉成 Laravel 的 collection。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>使用 <code>collect()</code> helper 亦可。</span></span></span></p>
<p>使用 collection 的 <code>get()</code>，針對 <code>$lut</code> 做搜尋。</p>
<ul>
<li>第 1 個參數傳入的是 key 的比對值，相當於 <code>switch</code> 的 <code>case</code>。</li>
<li>第 2 個參數傳入的示若 key 搜尋不到，所傳回的預設值，相當於 <code>switch</code> 的 <code>default</code>。</li>
</ul>
<p>重構後趕快執行測試，看看有沒有重構壞掉。</p>
<p>目前為止完全符合需求，會得到第 3 個 <span class="label label-success">綠燈</span>。</p>
<h2 id="將_LUT_重構到_app-php">將 LUT 重構到 app.php</h2><hr>
<p><strong>app.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FactoryOCP-/commit/1f81b011192c27ab06a552b32f808aaaddbf2a03" target="_blank" rel="external">將 LUT 重構到 config/app.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>config/app.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'logistics'</span> =&gt; [</span><br><span class="line">    <span class="number">0</span> =&gt; App\Services\BlackCat::class,</span><br><span class="line">    <span class="number">1</span> =&gt; App\Services\Hsinchu::class,</span><br><span class="line">    <span class="number">2</span> =&gt; App\Services\PostOffice::class</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p>
<p>將陣列搬到 <code>config/app.php</code> 下，將來若對應邏輯有所修改，只需改 <code>app.php</code> 即可。</p>
<p><strong>LogisticsFactory.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FactoryOCP-/commit/1f81b011192c27ab06a552b32f808aaaddbf2a03" target="_blank" rel="external">將 LUT 重構到 config/app.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticsFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(int <span class="variable">$companyNo</span> = <span class="number">0</span>)</span> : <span class="title">LogisticsInterface</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$lut</span> = config(<span class="string">'app.logistics'</span>);</span><br><span class="line">        <span class="variable">$className</span> = Collection::make(<span class="variable">$lut</span>)-&gt;get(<span class="variable">$companyNo</span>, BlackCat::class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$className</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>$lut</code> 改由 <code>config()</code> 讀取 <code>config/app.php</code> 的設定，目前工廠不包含建立物件的邏輯，LUT 已經搬到 <code>app.php</code>，因此完成工廠模式的開放封閉。</p>
<p>重構後趕快執行測試，看看有沒有重構壞掉。</p>
<p>目前為止完全符合需求，會得到第 4 個 <span class="label label-success">綠燈</span>。</p>
<h2 id="重構成依賴注入">重構成依賴注入</h2><hr>
<p>為了達到可測試性的要求，你可能會想將貨運公司物件改用依賴注入的方式，因此我們繼續重構。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FactoryOCP-/commit/68f1de804a36258178d0fc5375ab2dea84d8f59d" target="_blank" rel="external">ShippingService 改用依賴注入</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> LogisticsInterface</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logistics</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * ShippingService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(LogisticsInterface <span class="variable">$logistics</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;logistics = <span class="variable">$logistics</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(int <span class="variable">$weight</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;logistics-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>改用 constructor injection 的方式，將貨運物件注入。</p>
<h2 id="重構單元測試">重構單元測試</h2><hr>
<p>由於 <code>ShippingService</code> 重構成依賴注入方式，因此單元測試也要跟著重構。</p>
<p><strong>ShippingServiceTest.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FactoryOCP-/commit/6454e2d748935b6f1aea3131af0cc1fa176475c0" target="_blank" rel="external">重構黑貓單元測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓單元測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$companyNo</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        LogisticsFactory::bind(<span class="variable">$companyNo</span>);</span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因為改成依賴注入，工廠模式的功能不再是建立物件，而是在決定 <code>App::bind()</code> 該與什麼 class 做連結，因此也將工廠模式的 <code>create()</code> 改成 <code>bind()</code>。</p>
<h2 id="重構工廠模式">重構工廠模式</h2><hr>
<p><strong>LogisticsFactory.php</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FactoryOCP-/commit/95a2295156f4a35e702f9415ee9ac3993f5210de" target="_blank" rel="external">重構 LogisticsFactory</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticsFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">(int <span class="variable">$companyNo</span> = <span class="number">0</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$lut</span> = config(<span class="string">'app.logistics'</span>);</span><br><span class="line">        <span class="variable">$className</span> = Collection::make(<span class="variable">$lut</span>)-&gt;get(<span class="variable">$companyNo</span>, BlackCat::class);</span><br><span class="line"></span><br><span class="line">        App::bind(LogisticsInterface::class, <span class="variable">$className</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>$lut</code> 也是改由 <code>config()</code> 讀取 <code>config/app.php</code> 的設定，目前工廠不包含 <code>App::bind()</code> 的邏輯，LUT 已經搬到 <code>app.php</code>，因此完成工廠模式的開放封閉。</p>
<p>重構後趕快執行測試，看看有沒有重構壞掉。</p>
<p>目前為止完全符合需求，會得到第 5 個 <span class="label label-success">綠燈</span>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>將 <code>if else</code> 或 <code>switch</code> 邏輯改用 LUT 表示，可將陣列改放到 <code>config/app.php</code> 下，將來若有任何邏輯修改，都是修改在設定檔，而達成工廠模式的開放封閉。</li>
<li>透過 collection 的 <code>get()</code>，可以很方便的搭配 LUT，還可傳入預設參數，配合 <code>switch</code> 的 <code>default</code>。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52FactoryOCP-" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[將邏輯改用 LUT 表示，可將 LUT 改放到 app.php 設定檔]]>
    
    </summary>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[實務上如何活用 Closure?]]></title>
    <link href="http://oomusou.io/php/php-closure-practice/"/>
    <id>http://oomusou.io/php/php-closure-practice/</id>
    <published>2016-04-30T12:23:43.000Z</published>
    <updated>2016-05-02T14:08:09.000Z</updated>
    <content type="html"><![CDATA[<p>PHP 5.3 正式將 closure 帶入 PHP，到了 Laravel 5，我們看到了 Laravel 大量使用 closure，除了在配合 Laravel 的地方使用 closure 外，我們該如何將 closure 加以內化，進而活用在自己的程式碼中呢? 我們將實際探索 Laravel 原始碼，學習 Taylor Otwell 如何使用 closure。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.31</p>
<h2 id="Closure_vs-_Callback">Closure vs. Callback</h2><hr>
<p>一般人想到 closure，就會想到 callback，這是由我們寫 jQuery 與 Node.js 的所得到的經驗，將 closure 用在 event 或非同步的狀況下。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 PHP 的 closure 基本語法，詳細請參考 <a href="/php/php-closure/">如何使用 Closure?</a></span></span></span></p>
<p>由於 PHP 是同步的，所以很多人不知道該怎麼在 PHP 使用 closure，實際探索 Laravel 原始碼後我們會發現，儘管在同步的 PHP，Laravel 內部仍有 3 個地方會使用 closure 實現 : </p>
<ol>
<li><strong> 由使用者執行一段邏輯 </strong></li>
<li><strong> 由使用者決定一個布林 </strong></li>
<li><strong> 由使用者改變一個物件 </strong></li>
</ol>
<p>我們將一一的詳細討論，學習 Laravel 怎麼活用 closure，再以實際範例重構成 closure。</p>
<h2 id="由使用者執行一段邏輯">由使用者執行一段邏輯</h2><hr>
<h3 id="Schema::create()">Schema::create()</h3><p>學習 Laravel，大家第一個會碰到的 closure，大概會在 migration 的 <code>Schema::create()</code> :</p>
<figure class="highlight php"><figcaption><span>database/migrations/create_users_table.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateUsersTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'name'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'email'</span>)-&gt;unique();</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'password'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;rememberToken();</span><br><span class="line">            <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::drop(<span class="string">'users'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Schema::create(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'name'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'email'</span>)-&gt;unique();</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'password'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;rememberToken();</span><br><span class="line">    <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>我們發現 <code>Schema::create()</code> 的第 2 個參數要求我們傳入一個 closure，且 closure 還傳入了 <code>Blueprint $table</code>，為什麼會有這樣怪異的寫法呢?</p>
<p>若去 trace Laravel 原始碼，會發現 <code>Schema::create()</code> 是長這樣 :</p>
<figure class="highlight php"><figcaption><span>database/migrations/create_users_table.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Connection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create a new table on the schema.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span>  string    $table</span><br><span class="line">     * <span class="doctag">@param</span>  \Closure  $callback</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Database\Schema\Blueprint</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(<span class="variable">$table</span>, Closure <span class="variable">$callback</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$blueprint</span> = <span class="variable">$this</span>-&gt;createBlueprint(<span class="variable">$table</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$blueprint</span>-&gt;create();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$callback</span>(<span class="variable">$blueprint</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;build(<span class="variable">$blueprint</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>create()</code> 共執行 4 個函式，其中 3 個函式為 Laravel 自己要執行的邏輯，只有 21 行的 <code>$callback($blueprint)</code> 是要執行使用者的邏輯。</p>
<p>其中 <code>Blueprint $table</code> 就是在此由 <code>$blueprint</code> 所代入的。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當函式內，中間有一段邏輯，必須由使用者決定，而非函式本身所決定，可要求使用者傳入 closure 並執行之。</div>
<p>我們來舉一個實務上的例子比較容易理解。</p>
<h3 id="實際範例">實際範例</h3><p><strong> 測試案例 </strong></p>
<ul>
<li>顯示出 <code>Post</code> model 的所有文章。</li>
</ul>
<p><strong> 單元測試 </strong><br><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/93611680214f43c8f177b86e6159b3342204f75e" target="_blank" rel="external">單元測試 : 顯示所有 Post()</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有<span class="title">Post</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">10</span>;</span><br><span class="line">        <span class="variable">$target</span> = App::make(PostService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;displayAllPosts();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>驗證傳回文章筆數是否為 <code>10</code> 筆。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/e27a224d1a15054f53965d73b8e3b690d0958caf" target="_blank" rel="external">新增 displayAllPost()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 8 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@var</span> PostRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * PostService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 <code>PostRepository</code> 依賴注入。</p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 <code>PostRepository-&gt;getAllPosts()</code> 取得 <code>$posts</code> collection。</p>
<p><code>foreach</code> 整個 collection，透過 <code>echo()</code> 顯示訊息。</p>
<p>最後回傳所有文章的筆數。</p>
<p><strong> PostRepository.php </strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/59c54a2d2580bfa56562b50c0b827f4681fbcf49" target="_blank" rel="external">新增 getAllPosts()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection|Post[]</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>傳回所有文章。</p>
<p>目前為止完全符合需求，會得到第 1 個 <span class="label label-success">綠燈</span>。</p>
<h3 id="使用_Closure_重構">使用 Closure 重構</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據需求，我們發現只有第 9 行與第 10 行會根據使用者需求而異動，其他行數都不會異動，因此我們想將其他行數提煉出來。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/fc815ed863aa1b605ed5363d668143c687a40715" target="_blank" rel="external">重構 : 使用 Closure 重構成 getAllPosts()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getAllPosts(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllPosts</span><span class="params">(Closure <span class="variable">$closure</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$closure</span>(<span class="variable">$post</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>34 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllPosts</span><span class="params">(Closure <span class="variable">$closure</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$closure</span>(<span class="variable">$post</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>提煉出 <code>getAllPosts()</code> 後，我們發現 <code>foreach()</code> 內關於顯示邏輯部分，會根據使用者需求而異動，根據之前的經驗 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當函式內，中間有一段邏輯，必須由使用者決定，而非函式本身所決定，可要求使用者傳入 closure 並執行之。</div>
<p>第 6 行我們以 <code>$closure</code> 取代，因為顯示需要 <code>Post</code> model 資料， 因此傳入 <code>$post</code>。</p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getAllPosts(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原本由 <code>echo()</code> 顯示資料部分，改由 closure 傳進 <code>getAllPosts()</code>。</p>
<p>重構後趕快執行測試，看看有沒有重構壞掉。</p>
<p>目前為止完全符合需求，會得到第 2 個 <span class="label label-success">綠燈</span>。</p>
<h3 id="使用_Collection_重構">使用 Collection 重構</h3><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  為什麼要自己寫 <strong>getAllPosts()</strong> 呢? Laravel 的 collection 不是有自帶 <strong>each()</strong> 嗎?</div>
<p>沒錯，因為實務上太多在 collection 內執行其他 closure 的需求，Laravel 的 collection 已經幫我們準備了 <code>each()</code> 函式。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/1612ff6dafa0751fb178da3231c73b954292ddcf" target="_blank" rel="external">重構 : 使用 Collection-&gt;each()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts()</span><br><span class="line">            -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">            &#125;)-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於 Eloquent 傳回的就是 collection，因此可以將 closure 傳入 <code>each()</code>，這樣我們連 <code>foreach()</code> 也不用寫。</p>
<p>由於 collection 的函式都支援 fluent API 風格，也是回傳 collection，因此可以繼續下 <code>count()</code> 加以回傳。</p>
<p>重構後趕快執行測試，看看有沒有重構壞掉。</p>
<p>目前為止完全符合需求，會得到第 3 個 <span class="label label-success">綠燈</span>。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  為什麼 <strong>each()</strong> 可以取代自己寫的 <strong>foreach()</strong> 呢?</div>
<p><strong> Collection.php </strong><br><figure class="highlight php"><figcaption><span>Illuminate/Support/Collection.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span> <span class="keyword">implements</span> <span class="title">ArrayAccess</span>, <span class="title">Arrayable</span>, <span class="title">Countable</span>, <span class="title">IteratorAggregate</span>, <span class="title">Jsonable</span>, <span class="title">JsonSerializable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Execute a callback over each item.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span>  callable  $callback</span><br><span class="line">     * <span class="doctag">@return</span> $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">each</span><span class="params">(callable <span class="variable">$callback</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;items <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$callback</span>(<span class="variable">$item</span>, <span class="variable">$key</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若進去 trace Laravel 原始碼，會發現 <code>each()</code> 內幫我們實現了 <code>foreach()</code>，而我們傳進去的 closure 正好在 <code>foreach()</code> 內執行，若 closure 傳回 false，還可以中斷 <code>foreach()</code>。</p>
<p>其中 <code>$callback()</code> 剛好是藏在函式中，由使用者決定的邏輯，而 <code>$callback</code> 之外，都是函式自己的邏輯，也再次應證之前的結論 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當函式內，中間有一段邏輯，必須由使用者決定，而非函式本身所決定，可要求使用者傳入 closure 並執行之。</div>
<h2 id="由使用者決定一個布林">由使用者決定一個布林</h2><hr>
<h3 id="Collection-&gt;first()">Collection-&gt;first()</h3><p>有些 Laravel 函式，會希望我們傳進一個 closure，回傳 true 或 false，如 collection 的 <code>first()</code>。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">collect([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])-&gt;first(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$key</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span> &gt; <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p><code>first()</code> 會傳回符合條件的第一個元素，但條件必須我們自己用 closure 傳進去，為什麼會有這樣怪異的寫法呢?</p>
<p>若去 trace Laravel 原始碼，會發現 <code>first()</code> 長這樣 :<br><figure class="highlight php"><figcaption><span>Illuminate/Support/Arr.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Arr</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Return the first element in an array passing a given truth test.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span>  array  $array</span><br><span class="line">     * <span class="doctag">@param</span>  callable|null  $callback</span><br><span class="line">     * <span class="doctag">@param</span>  mixed  $default</span><br><span class="line">     * <span class="doctag">@return</span> mixed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span><span class="params">(<span class="variable">$array</span>, callable <span class="variable">$callback</span> = null, <span class="variable">$default</span> = null)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$callback</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">empty</span>(<span class="variable">$array</span>) ? value(<span class="variable">$default</span>) : reset(<span class="variable">$array</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (call_user_func(<span class="variable">$callback</span>, <span class="variable">$key</span>, <span class="variable">$value</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value(<span class="variable">$default</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>17 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (call_user_func(<span class="variable">$callback</span>, <span class="variable">$key</span>, <span class="variable">$value</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Laravel 會 <code>foreach()</code> 整個陣列，由 <code>call_user_func()</code> 去執行 closure，遇到第一個 closure 傳回 true 的條件，就 return 離開迴圈。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當函式內，中間有一個布林，必須由使用者決定，而非函式本身所決定，可要求使用者傳入 closure 並執行之。</div>
<p>我們來舉一個實務上的例子比較容易理解。</p>
<h3 id="實際範例-1">實際範例</h3><p><strong> 測試案例 </strong></p>
<ul>
<li>顯示出 <code>Post</code> model 的所有奇數 ID 文章。</li>
</ul>
<p><strong> 單元測試 </strong><br><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/77bdf04cec0150deb389ca81fc59842076481d60" target="_blank" rel="external">單元測試 : 顯示所有奇數 ID 文章</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示奇數<span class="title">ID</span>的<span class="title">Post</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">5</span>;</span><br><span class="line">        <span class="variable">$target</span> = App::make(PostService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;displayAllOddPosts();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>驗證傳回文章筆數是否為 <code>5</code> 筆。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/b652e244a652032d3904c709df83ccecfe46ef63" target="_blank" rel="external">新增 displayAllOddPost()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllOddPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">        <span class="variable">$cnt</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$post</span>-&gt;id % <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="variable">$cnt</span>++;</span><br><span class="line">                <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$cnt</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllOddPosts</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">    <span class="variable">$cnt</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$post</span>-&gt;id % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="variable">$cnt</span>++;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cnt</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 <code>PostRepository-&gt;getAllPosts()</code> 取得 <code>$posts</code> collection。</p>
<p><code>foreach</code> 整個 collection，由 <code>if ($post-&gt;id % 2)</code> 做判斷，若 ID 為奇數，則 <code>$cnt++</code> 並顯示訊息。</p>
<p>最後回傳所有文章的筆數。</p>
<p>目前為止完全符合需求，會得到第 1 個 <span class="label label-success">綠燈</span>。</p>
<h3 id="使用_Closure_重構-1">使用 Closure 重構</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllOddPosts</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">    <span class="variable">$cnt</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$post</span>-&gt;id % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="variable">$cnt</span>++;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cnt</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據需求，我們發現只有第 10 行的 <code>if ($post-&gt;id % 2)</code> 會根據使用者需求而異動，其他行數都不會異動，因此我們想將其他行數提煉出來。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/b73d48cf89b54e721fbb1e025d04dcc6b10abd53" target="_blank" rel="external">重構 : 使用 Closure 重構成 filterAllOddPosts()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllOddPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;filterAllOddPosts(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable">$post</span>-&gt;id % <span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> Closure $closure</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterAllOddPosts</span><span class="params">(Closure <span class="variable">$closure</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">        <span class="variable">$cnt</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$closure</span>(<span class="variable">$post</span>)) &#123;</span><br><span class="line">                <span class="variable">$cnt</span>++;</span><br><span class="line">                <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$cnt</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>37 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> Closure $closure</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterAllOddPosts</span><span class="params">(Closure <span class="variable">$closure</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">    <span class="variable">$cnt</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$closure</span>(<span class="variable">$post</span>)) &#123;</span><br><span class="line">            <span class="variable">$cnt</span>++;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cnt</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>提煉出 <code>filterAllOddPosts()</code> 後，我們發現 <code>foreach()</code> 內關於是否為奇數部分，會根據使用者需求而異動，根據之前的經驗 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當函式內，中間有一個布林，必須由使用者決定，而非函式本身所決定，可要求使用者傳入 closure 並執行之。</div>
<p>第 11 行我們以 <code>$closure</code> 取代，因為判斷需要 <code>Post</code> model 資料， 因此傳入 <code>$post</code>。</p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllOddPosts</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;filterAllOddPosts(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable">$post</span>-&gt;id % <span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原本由 <code>if ($post-&gt;id % 2)</code> 判斷奇數部分，改由 closure 傳進 <code>filterAllOddPosts()</code>。</p>
<p>重構後趕快執行測試，看看有沒有重構壞掉。</p>
<p>目前為止完全符合需求，會得到第 2 個 <span class="label label-success">綠燈</span>。</p>
<h3 id="使用_Collection_重構-1">使用 Collection 重構</h3><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  為什麼要自己寫 <strong>filterAllOddPosts()</strong> 呢? Laravel 的 collection 不是有自帶 <strong>filter()</strong> 嗎?</div>
<p>沒錯，因為實務上太多在 collection 內執行 filter 的需求，Laravel 的 collection 已經幫我們準備了 <code>filter()</code> 函式。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/16717e9edc23f409d11356403db6a10ee96eb845" target="_blank" rel="external">重構 : 使用 Collection-&gt;filter()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllOddPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts()</span><br><span class="line">            -&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="variable">$value</span>-&gt;id % <span class="number">2</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">            &#125;)-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於 Eloquent 傳回的就是 collection，因此可以將 closure 傳入 <code>filter()</code>，這樣我們連 <code>foreach()</code> 也不用寫。</p>
<p>由於 collection 的函式都支援 fluent API 風格，也是回傳 collection，因此可以繼續下 <code>each()</code> 顯示資訊。</p>
<p>最後再用 <code>count()</code> 回傳筆數。</p>
<p>重構後趕快執行測試，看看有沒有重構壞掉。</p>
<p>目前為止完全符合需求，會得到第 3 個 <span class="label label-success">綠燈</span>。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  為什麼 <strong>filter()</strong> 可以取代自己寫的 <strong>foreach()</strong> 呢?</div>
<p><strong> Collection.php </strong><br><figure class="highlight php"><figcaption><span>Illuminate/Support/Collection.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span> <span class="keyword">implements</span> <span class="title">ArrayAccess</span>, <span class="title">Arrayable</span>, <span class="title">Countable</span>, <span class="title">IteratorAggregate</span>, <span class="title">Jsonable</span>, <span class="title">JsonSerializable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run a filter over each of the items.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span>  callable|null  $callback</span><br><span class="line">     * <span class="doctag">@return</span> static</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">(callable <span class="variable">$callback</span> = null)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$callback</span>) &#123;</span><br><span class="line">            <span class="variable">$return</span> = [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;items <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$callback</span>(<span class="variable">$value</span>, <span class="variable">$key</span>)) &#123;</span><br><span class="line">                    <span class="variable">$return</span>[<span class="variable">$key</span>] = <span class="variable">$value</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">static</span>(<span class="variable">$return</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">static</span>(array_filter(<span class="variable">$this</span>-&gt;items));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若進去 trace Laravel 原始碼，會發現 <code>filter()</code> 內幫我們實現了 <code>foreach()</code>，而我們傳進去的 closure 正好在 <code>foreach()</code> 內執行 <code>if ($callback($value, $key))</code>。</p>
<p>其中 <code>$callback()</code> 剛好是藏在函式的 <code>if</code> 內，由使用者決定的邏輯，而 <code>$callback</code> 之外，都是函式自己的邏輯，也再次應證之前的結論 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當函式內，中間有一個布林，必須由使用者決定，而非函式本身所決定，可要求使用者傳入 closure 並執行之。</div>
<h2 id="由使用者改變一個物件">由使用者改變一個物件</h2><hr>
<h3 id="Where_Nested_Query">Where Nested Query</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">SELECT * </span><br><span class="line"><span class="keyword">FROM</span> posts</span><br><span class="line"><span class="keyword">WHERE</span> (<span class="keyword">status</span> = <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">status</span> = <span class="number">1</span>)</span></span><br></pre></td></tr></table></figure>
<p>若要寫出以上的巢狀 query，在 Eloquent 我們必須這樣寫。<span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>關於巢狀 query 寫法，詳細請參考 <a href="/laravel/eloquent/eloquent-where-and-or/">如何在 Eloquent 建立一個含 or 的 where 條件式?</a></span></span></span></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Post::where(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$query</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">'status'</span>, <span class="number">0</span>)</span><br><span class="line">        -&gt;orWhere(<span class="string">'status'</span>, <span class="number">1</span>);</span><br><span class="line">&#125;)-&gt;get();</span><br></pre></td></tr></table></figure>
<p>Eloquent 要求我們在 <code>where()</code> 傳入一個 closure，在 closure 的 <code>$query</code> 加入巢狀 query，，為什麼會有這樣怪異的寫法呢?</p>
<p>若去 trace Laravel 原始碼，會發現 <code>where()</code> 長這樣 :<br><figure class="highlight php"><figcaption><span>Illuminate/Database/Eloquent/Builder.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Add a basic where clause to the query.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span>  string  $column</span><br><span class="line">     * <span class="doctag">@param</span>  string  $operator</span><br><span class="line">     * <span class="doctag">@param</span>  mixed   $value</span><br><span class="line">     * <span class="doctag">@param</span>  string  $boolean</span><br><span class="line">     * <span class="doctag">@return</span> $this</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">where</span><span class="params">(<span class="variable">$column</span>, <span class="variable">$operator</span> = null, <span class="variable">$value</span> = null, <span class="variable">$boolean</span> = <span class="string">'and'</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$column</span> <span class="keyword">instanceof</span> Closure) &#123;</span><br><span class="line">            <span class="variable">$query</span> = <span class="variable">$this</span>-&gt;model-&gt;newQueryWithoutScopes();</span><br><span class="line"></span><br><span class="line">            call_user_func(<span class="variable">$column</span>, <span class="variable">$query</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$this</span>-&gt;query-&gt;addNestedWhereQuery(<span class="variable">$query</span>-&gt;getQuery(), <span class="variable">$boolean</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            call_user_func_array([<span class="variable">$this</span>-&gt;query, <span class="string">'where'</span>], func_get_args());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>15 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="variable">$this</span>-&gt;model-&gt;newQueryWithoutScopes();</span><br></pre></td></tr></table></figure></p>
<p>建立一個新的 query builder 物件。</p>
<p>17 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func(<span class="variable">$column</span>, <span class="variable">$query</span>);</span><br></pre></td></tr></table></figure></p>
<p>將 <code>$query</code> 物件傳進 closure，由使用者將巢狀 query 加到 <code>$query</code> 物件內。</p>
<p>19 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;query-&gt;addNestedWhereQuery(<span class="variable">$query</span>-&gt;getQuery(), <span class="variable">$boolean</span>);</span><br></pre></td></tr></table></figure></p>
<p>再將使用者修改過的 <code>$query</code> 物件加到 <code>addNestedWhereQuery()</code> 函式內。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當函式內，中間有一個物件，必須由使用者修改，而非函式本身所能修改，可要求使用者傳入 closure 並執行之。</div>
<p>我們來舉一個實務上的例子比較容易理解。</p>
<h3 id="實際範例-2">實際範例</h3><p><strong> 測試案例 </strong></p>
<ul>
<li>將 <code>Post</code> model 的 <code>title</code> 全部改成 <code>Laravel</code>，並顯示之。</li>
</ul>
<p><strong> 單元測試 </strong><br><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/2d6adf442b3a40228bf6953f6a62b746bac67514" target="_blank" rel="external">單元測試 : title 全部改成 Laravel 並顯示</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">title</span>全部改成<span class="title">Laravel</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">10</span>;</span><br><span class="line">        <span class="variable">$target</span> = App::make(PostService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;displayAllPostsWithLaravel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>驗證傳回文章筆數是否為 <code>10</code> 筆。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/133cb20860ac2029cfc4a978d397c20c59efd60f" target="_blank" rel="external">新增 displayAllPostWithLaravel()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPostsWithLaravel</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$post</span>-&gt;title = <span class="string">'Laravel'</span>;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPostsWithLaravel</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$post</span>-&gt;title = <span class="string">'Laravel'</span>;</span><br><span class="line">        <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 <code>PostRepository-&gt;getAllPosts()</code> 取得 <code>$posts</code> collection。</p>
<p><code>foreach</code> 整個 collection，由 <code>$post-&gt;title = &#39;Laravel&#39;</code> 對 <code>$post</code> 變數做修改，並顯示訊息。</p>
<p>最後回傳所有文章的筆數。</p>
<p>目前為止完全符合需求，會得到第 1 個 <span class="label label-success">綠燈</span>。</p>
<h3 id="使用_Closure_重構-2">使用 Closure 重構</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPostsWithLaravel</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$post</span>-&gt;title = <span class="string">'Laravel'</span>;</span><br><span class="line">        <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據需求，我們發現只有第 9 行的 <code>$post-&gt;title = &#39;Laravel&#39;</code>會根據使用者需求而異動，其他行數都不會異動，因此我們想將其他行數提煉出來。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/f951d5906c269292dd87f915ed3caa090752400e" target="_blank" rel="external">重構 : 使用 Closure 重構成 replaceAllOddPostsWithLaravel()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPostsWithLaravel</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;replaceAllPostsWithLaravel(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$post</span>-&gt;title = <span class="string">'Laravel'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> Closure $closure</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">replaceAllPostsWithLaravel</span><span class="params">(Closure <span class="variable">$closure</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$closure</span>(<span class="variable">$post</span>);</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>33 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> Closure $closure</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">replaceAllPostsWithLaravel</span><span class="params">(Closure <span class="variable">$closure</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$closure</span>(<span class="variable">$post</span>);</span><br><span class="line">        <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>提煉出 <code>replaceAllPostsWithLaravel()</code> 後，我們發現 <code>foreach()</code> 內修改 <code>$post</code> 物件部分，會根據使用者需求而異動，根據之前的經驗 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當函式內，中間有一個物件，必須由使用者修改，而非函式本身所能修改，可要求使用者傳入 closure 並執行之。</div>
<p>第 10 行我們以 <code>$closure</code> 取代，因為需要修改 <code>Post</code> model 資料， 因此傳入 <code>$post</code> 物件。</p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPostsWithLaravel</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;replaceAllPostsWithLaravel(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">        <span class="variable">$post</span>-&gt;title = <span class="string">'Laravel'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原本由 <code>$post-&gt;title = &#39;Laravel&#39;</code> 修改物件部分，改由 closure 傳進 <code>replaceAllOddPostsWithLaravel()</code>。</p>
<p>重構後趕快執行測試，看看有沒有重構壞掉。</p>
<p>目前為止完全符合需求，會得到第 2 個 <span class="label label-success">綠燈</span>。</p>
<h3 id="使用_Collection_重構-2">使用 Collection 重構</h3><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  為什麼要自己寫 <strong>replaceAllOddPostsWithLaravel()</strong> 呢? Laravel 的 collection 不是有自帶 <strong>each()</strong> 嗎?</div>
<p>沒錯，因為實務上太多在 collection 內修改物件的需求，Laravel 的 collection 已經幫我們準備了 <code>each()</code> 函式。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/1917242e68b5ebcb0ac64ecf485fd0acda964aec" target="_blank" rel="external">重構 : 使用 Collection-&gt;each()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPostsWithLaravel</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts()</span><br><span class="line">            -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$post</span>-&gt;title = <span class="string">'Laravel'</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            -&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">                <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            -&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於 Eloquent 傳回的就是 collection，因此可以將 closure 傳入 <code>each()</code>，並將 <code>$post</code>物件傳入 closure，這樣我們連 <code>foreach()</code> 也不用寫。</p>
<p>由於 collection 的函式都支援 fluent API 風格，也是回傳 collection，因此可以繼續下 <code>each()</code> 顯示資訊。</p>
<p>最後再用 <code>count()</code> 回傳筆數。</p>
<p>重構後趕快執行測試，看看有沒有重構壞掉。</p>
<p>目前為止完全符合需求，會得到第 3 個 <span class="label label-success">綠燈</span>。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  為什麼 <strong>each()</strong> 可以修改 <strong>$post</strong> 物件呢?</div>
<p>雖然 PHP 是以 pass by value 傳遞變數，但別忘了對於物件，PHP 是 pass by reference，因此在 closure 內可以直接修改 <code>$post</code> 物件。</p>
<p>Collection 的 <code>each()</code> 原始碼，之前已經分析過，就不再贅述，不過不管是使用 <code>each()</code>，或是自己建立的 <code>replaceAllOddPostsWithLaravel()</code>，其心法都是相同的 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  當函式內，中間有一個物件，必須由使用者修改，而非函式本身所能修改，可要求使用者傳入 closure 並執行之。</div>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>若重複的是一段邏輯，可將該邏輯提煉為函式；若重複的是一段邏輯以外的邏輯，可將以外的邏輯提煉為函式，而將該段邏輯成為 closure 傳入。</li>
<li>若可以使用 collection 提供的函式，優先使用之，其次再自己提煉函式，傳入 closure。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[將 Closure 內化到自己的程式碼中]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PHP" scheme="http://oomusou.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP 與 TypeScript 的 Template Literals]]></title>
    <link href="http://oomusou.io/php/php-template-literals/"/>
    <id>http://oomusou.io/php/php-template-literals/</id>
    <published>2016-04-29T12:23:43.000Z</published>
    <updated>2016-04-29T07:45:21.000Z</updated>
    <content type="html"><![CDATA[<p>TypeScript 提供了 Template Literals，可以讓字串處理的可讀性更高，不再只是湊字串而已，事實上，PHP 也有這種機制。  </p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>TypeScript 1.8.9</p>
<h2 id="TypeScript">TypeScript</h2><hr>
<figure class="highlight typescript"><figcaption><span>TypeScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name:<span class="built_in">string</span> = <span class="string">'Sam'</span>;</span><br><span class="line"><span class="keyword">var</span> sentence:<span class="built_in">string</span> = `Hello $&#123;name&#125;`;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sentence);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>在 TypeScript，只要字串改用<code>反引號</code> ，再配合 <code>${}</code> 即可。</p>
<h2 id="PHP">PHP</h2><hr>
<figure class="highlight php"><figcaption><span>PHP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="string">'Sam'</span>;</span><br><span class="line"><span class="variable">$sentence</span> = <span class="string">"Hello &#123;$name&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$sentence</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello Sam</span></span><br></pre></td></tr></table></figure>
<p>在 PHP，只要字串改用<code>雙引號</code>，再配合<code>{$}</code>即可。</p>
<p>剛好與 TypeScript 相反。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Template literals 方式湊字串，遠比傳統用 <code>+</code> 或 <code>.</code> 的方式可讀性高，最少可以先看到字串整體的全貌。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[PHP 也有支援如 TypeScript 的 Template Literal]]>
    
    </summary>
    
      <category term="PHP" scheme="http://oomusou.io/tags/PHP/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 開發 Angular 2?]]></title>
    <link href="http://oomusou.io/angular2/angular2-phpstorm-setup/"/>
    <id>http://oomusou.io/angular2/angular2-phpstorm-setup/</id>
    <published>2016-04-28T12:23:43.000Z</published>
    <updated>2016-04-28T08:57:04.000Z</updated>
    <content type="html"><![CDATA[<p>PhpStorm 不僅能開發 PHP 與 Laravel 而已，還內建 TypeScript 編譯，掛上 JetBrains 的官方 Angular 外掛後，PhpStorm 就能完美支援 TypeScript 與 Angular 2。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PhpStorm 2016.1<br>Angular 2.0.0-beta.15</p>
<h2 id="5_Min_Quickstart">5 Min Quickstart</h2><hr>
<p>本文將以 Angular 2 官網的 <a href="https://angular.io/docs/ts/latest/quickstart.html#" target="_blank" rel="external">5 Min Quickstart</a> 使用 PhpStorm 開發，而不使用官網的 <code>npm start</code> 方式。 <span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若你想使用 Laravel Elixir 方式開發 Angular 2，詳細請參考 <a href="/angular2/angular2-laravel-setup/">如何在 Laravel 執行 Angular 2</a></span></span></span></p>
<h2 id="建立專案">建立專案</h2><hr>
<p>我們將使用 PhpStorm 從頭開始建立 Angular 2 專案。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup000.png" alt=""></p>
<p>啟動 PhpStorm，按 <code>Create New Project</code> 建立新專案。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup001.png" alt=""></p>
<p>選擇左側 <code>Empty Project</code>，在 Location 輸入專案路徑。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup002.png" alt=""></p>
<p>PhpStorm 一如往常出現 <code>Detact PSR-0 namesapce roots</code> 提示，直接關閉不用理它，因為我們現在要寫的是 TypeScript，不是 PHP。</p>
<h2 id="安裝外掛">安裝外掛</h2><hr>
<p>Angular 2 簡單的說就是 TypeScript + Angular 2 framework，所以必須先在 PhpStorm 安裝 TypeScript 與 Angular 2 外掛，令人振奮的是：這些外掛都是官方提供，是 JetBrains 為 WebStorm 與 PhpStorm 量身定做的。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>外掛只要裝一次即可，將來若有新版，PhpStorm 會自動提醒你更新。</span></span></span></p>
<h3 id="JavaScript_外掛">JavaScript 外掛</h3><hr>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup003.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Plugins </em></strong></p>
<p>PhpStorm 在安裝時已經內建 <code>JavaScript Support</code> 外掛，支援 JavaScript 與 TypeScript。</p>
<p>輸入 <code>JavaScript</code>，確認 <code>JavaScript Support</code> 打勾。</p>
<h3 id="Node-js_外掛">Node.js 外掛</h3><hr>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup004.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Plugins </em></strong></p>
<p>PhpStorm 在安裝時並沒有內建 <code>NodeJS</code> 外掛，必須手動安裝。</p>
<p>輸入 <code>node.js</code>，會找到 <code>NodeJS</code> 外掛，按 <code>Install</code> 安裝，注意這是 <strong> JetBrains </strong> 官方寫的外掛。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup005.png" alt=""></p>
<p>安裝完後，須按 <code>Restart PhpStorm</code> 重新啟動 PhpStorm，外掛才會生效。</p>
<h3 id="Angular_外掛">Angular 外掛</h3><hr>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup006.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Plugins </em></strong></p>
<p>PhpStorm 在安裝時並沒有內建 <code>AngularJS</code> 外掛，必須手動安裝。</p>
<p>輸入 <code>AngularJS</code>，會找到 <code>AngularJS</code> 外掛，按 <code>Install</code> 安裝，注意這是 <strong> JetBrains </strong> 官方寫的外掛。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup007.png" alt=""></p>
<p>安裝完後，須按 <code>Restart PhpStorm</code> 重新啟動 PhpStorm，外掛才會生效。</p>
<h2 id="設定_TypeScript">設定 TypeScript</h2><hr>
<p>PhpStorm 預設並沒有啟動 TypeScript，必須自行設定。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>每個專案都要重新設定一次 TypeScript。</span></span></span></p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup008.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; TypeScript </em></strong></p>
<p>將 <code>Enable TypeScript Compiler</code> 打勾。</p>
<p><strong> Node interpreter </strong> : 預設會自動抓到 NVM 所安裝的 Node.js 版本，可自行切換。<br><strong> Compiler version </strong> : PhpStorm 預設就有安裝 TypeScript 版本，可自行切換。<br><strong> Use tsconfig.json </strong> :  使用 <code>tsconfig.json</code> 做為 TypeScript 的設定檔。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup009.png" alt=""></p>
<p>TypeScript 設定完成後，下方會多出 <code>TypeScript Compiler</code>，將來任何編譯錯誤訊息都會顯示在此。</p>
<h2 id="新增_TypeScript_設定檔">新增 TypeScript 設定檔</h2><hr>
<p>剛剛已經設定 TypeScript 使用 <code>tsconfig.json</code>，現在就來建立 <code>tsconfig.json</code>。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup012.png" alt=""></p>
<p>按熱鍵 &#8984; + N，出現 <code>New</code> 選單，選擇 <code>tsconfig.json File</code>。</p>
<p><strong> tsconfig.json </strong> <span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Angular2Quickstart_demo/commit/dec4aac1fd8f4428d054aa4f39a157fde1d93c46" target="_blank" rel="external">新增 TypeScript 設定檔</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"system"</span>,</span><br><span class="line">    <span class="string">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"removeComments"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"exclude"</span>: [</span><br><span class="line">    <span class="string">"node_modules"</span>,</span><br><span class="line">    <span class="string">"typings/main"</span>,</span><br><span class="line">    <span class="string">"typings/main.d.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup013.png" alt=""></p>
<p>在專案根目錄新增 <code>tsconfig.json</code>。</p>
<h2 id="新增_typings-json">新增 typings.json</h2><hr>
<p>TypeScript 是強型別語言，若使用了傳統 JavaScript 函式庫，就必須再加上 <code>d.ts</code> 檔案描述其型別，供 TypeScript 編譯時使用。</p>
<p><code>typings.json</code> 就是統一描述 Angular 2 所需參考 <code>d.ts</code> 的地方。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup016.png" alt=""></p>
<p>按熱鍵 &#8984; + N，出現 <code>New</code> 選單，選擇 <code>File</code>。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup017.png" alt=""></p>
<p>檔名輸入 <code>typings.json</code>。</p>
<p><strong> typings.json </strong> <span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Angular2Quickstart_demo/commit/18351d0afcf330a9ea0d67401efff090a441ae1d" target="_blank" rel="external">新增 typings.json</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>typings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"ambientDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"es6-shim"</span>: <span class="string">"github:DefinitelyTyped/DefinitelyTyped/es6-shim/es6-shim.d.ts#7de6c3dd94feaeb21f20054b9f30d5dabc5efabd"</span>,</span><br><span class="line">    <span class="string">"jasmine"</span>: <span class="string">"github:DefinitelyTyped/DefinitelyTyped/jasmine/jasmine.d.ts#5c182b9af717f73146399c2485f70f1e2ac0ff2b"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup018.png" alt=""></p>
<p>在專案根目錄新增 <code>typings.json</code>。</p>
<h2 id="安裝_Angular_2_與其相依套件">安裝 Angular 2 與其相依套件</h2><hr>
<p>除了 Angular 2 本身外，它還有很多相依的套件，須由 NPM 管理安裝。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup010.png" alt=""></p>
<p>按熱鍵 &#8984; + N，出現 <code>New</code> 選單，選擇 <code>package.json File</code>。</p>
<p><strong> package.json </strong> <span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Angular2Quickstart_demo/commit/18351d0afcf330a9ea0d67401efff090a441ae1d" target="_blank" rel="external">安裝 Angular 2 所相依的套件</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"angular2-quickstart"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"tsc &amp;&amp; concurrently \"npm run tsc:w\" \"npm run lite\" "</span>,</span><br><span class="line">    <span class="string">"lite"</span>: <span class="string">"lite-server"</span>,</span><br><span class="line">    <span class="string">"postinstall"</span>: <span class="string">"typings install"</span>,</span><br><span class="line">    <span class="string">"tsc"</span>: <span class="string">"tsc"</span>,</span><br><span class="line">    <span class="string">"tsc:w"</span>: <span class="string">"tsc -w"</span>,</span><br><span class="line">    <span class="string">"typings"</span>: <span class="string">"typings"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"angular2"</span>: <span class="string">"2.0.0-beta.16"</span>,</span><br><span class="line">    <span class="string">"systemjs"</span>: <span class="string">"0.19.26"</span>,</span><br><span class="line">    <span class="string">"es6-shim"</span>: <span class="string">"^0.35.0"</span>,</span><br><span class="line">    <span class="string">"reflect-metadata"</span>: <span class="string">"0.1.2"</span>,</span><br><span class="line">    <span class="string">"rxjs"</span>: <span class="string">"5.0.0-beta.2"</span>,</span><br><span class="line">    <span class="string">"zone.js"</span>: <span class="string">"0.6.12"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"concurrently"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="string">"lite-server"</span>: <span class="string">"^2.2.0"</span>,</span><br><span class="line">    <span class="string">"typescript"</span>: <span class="string">"^1.8.10"</span>,</span><br><span class="line">    <span class="string">"typings"</span>:<span class="string">"^0.8.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup014.png" alt=""></p>
<p>在專案根目錄新增 <code>package.json</code>。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup015.png" alt=""></p>
<p>選擇 <code>package.json</code>，按滑鼠右鍵，選擇 <code>Run &#39;npm install&#39;</code>。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup019.png" alt=""></p>
<p>PhpStorm 啟動 NPM 安裝相依套件。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>安裝 node 套件時，最低需求是不能看到 <code>ERR</code> 出現，有警告沒關係，嘗試更新 node.js 版本試試看。</span></span></span></p>
<h2 id="建立第一個_Component">建立第一個 Component</h2><hr>
<p>Angular 2 強調整個網頁都由 component 所構成，首先我們要先建立一個 component。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup020.png" alt=""></p>
<p>按熱鍵 &#8984; + N，出現 <code>New</code> 選單，選擇 <code>Directory</code>。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup021.png" alt=""></p>
<p>建立 <code>app</code> 目錄，統一將 TypeScript 程式碼放在 <code>app</code> 目錄下。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup022.png" alt=""></p>
<p>在 <code>app</code> 目錄下按熱鍵 &#8984; + N，出現 <code>New</code> 選單，選擇 <code>TypeScript file</code>。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup023.png" alt=""></p>
<p>檔名輸入 <code>app.component</code>。</p>
<p><strong> app.component.ts </strong> <span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Angular2Quickstart_demo/commit/ca12ceba99825e3af73b71fb280c3b8279e5192e" target="_blank" rel="external">建立第一個 Component</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>app/app.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'angular2/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'my-app'</span>,</span><br><span class="line">    template: <span class="string">'&lt;h1&gt;My First Angular 2 App&lt;/h1&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123; &#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup024.png" alt=""></p>
<p>在 <code>app</code> 目錄下建立 <code>app.component.ts</code>。</p>
<p>此為 TypeScript 語法，主要表示其 HTML tag 為 <code>my-app</code>，其所代表的 HTML 為 <code>&lt;h1&gt;My First Angular 2 App&lt;/h1&gt;</code>。</p>
<p>因為目前還沒有任何顯示邏輯，所以 <code>AppComponent</code> class 為空的。</p>
<p>特別注意左側 project 視窗，PhpStorm 已經在 <code>app.component.ts</code> 左側顯示 <code>TS</code> 圖示，表示 PhpStorm 已經認出副檔名為 <code>ts</code> 的 TypeScript。</p>
<p>此外，當存檔後，TypeScript 編譯器會自動編譯，並將相對應的 JavaScript 與 source map 產生在相同目錄下，不用擔心這樣會檔案很多很難管理，PhpStorm 很聰明的預設只會顯示 TypeScript 檔案，並不會顯示 JavaScript 與 source map 檔案，除非你去展開 TypeScript，才會出現 JavaScript 與 source map。</p>
<p>因為實務上其實只會去修改 TypeScript，並不會去修改 JavaScript 與 source map，所以 PhpStorm 很貼心的在 project 視窗只顯示 TypeScript 檔案。</p>
<p>下方 TypeScript 視窗會即時顯示出編譯結果。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup025.png" alt=""></p>
<p>若故意將 <code>AppComponent</code> 的右 <code>}</code> 刪除，存檔後馬上出現編譯錯誤，訊息會顯示在下方 TypeScript 視窗。</p>
<h2 id="建立_Angular_2_啟動檔">建立 Angular 2 啟動檔</h2><hr>
<p>Angular 2 需要一個程式的起動點，就類似 C 語言的 <code>main()</code> 一樣，<code>main.ts</code> 就是扮演起動 Angular 2 的角色。</p>
<p><strong> main.ts </strong> <span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Angular2Quickstart_demo/commit/df884e5ff97f0d95ce257156f95b7b449dac3ba2" target="_blank" rel="external">建立 Angular 2 的啟動檔</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>app/main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;bootstrap&#125;    from <span class="string">'angular2/platform/browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span>;</span><br><span class="line"></span><br><span class="line">bootstrap(AppComponent);</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup026.png" alt=""></p>
<p>在 <code>app</code> 目錄下建立 <code>main.ts</code>。</p>
<p>第 1 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;bootstrap&#125; from <span class="string">'angular2/platform/browser'</span></span><br></pre></td></tr></table></figure></p>
<p>載入 <code>angular2/platform/browser</code>，表示 Angular 2 跑在瀏覽器平台，此外，Angular 2 還可以跑在 <code>Apache Cordova</code> 與 <code>Native</code> 平台，    只要 import 不同 <code>bootstrap</code> 即可。</p>
<p>第 2 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span></span><br></pre></td></tr></table></figure></p>
<p>載入我們剛剛建立的 <code>app.component.ts</code>。</p>
<p>第 4 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap(AppComponent);</span><br></pre></td></tr></table></figure></p>
<p>啟動我們剛剛建立的 <code>app.component.ts</code>。</p>
<h2 id="建立_HTML">建立 HTML</h2><hr>
<p>接著我們要建立 <code>index.html</code>，並將我們建立 <code>&lt;my-app&gt;&lt;/my-app&gt;</code> component 放進 HTML中。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup027.png" alt=""></p>
<p>按熱鍵 &#8984; + N，出現 <code>New</code> 選單，選擇 <code>HTML file</code>。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup028.png" alt=""></p>
<p>檔名輸入 <code>index</code>。</p>
<p><strong> index.html </strong> <span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Angular2Quickstart_demo/commit/6b92f0feaa80087fb8a1e35dcd6e4536352bc0c2" target="_blank" rel="external">建立 HTML</a></span></span></span><br><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Angular 2 QuickStart<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1"</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"styles.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1. Load libraries --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- IE required polyfills, in this exact order --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/es6-shim/es6-shim.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/systemjs/dist/system-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/angular2/es6/dev/src/testing/shims_for_IE.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/angular2/bundles/angular2-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/systemjs/dist/system.src.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/rxjs/bundles/Rx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/angular2/bundles/angular2.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. Configure SystemJS --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">      System.config(&#123;</span><br><span class="line">        packages: &#123;        </span><br><span class="line">          app: &#123;</span><br><span class="line">            format: <span class="string">'register'</span>,</span><br><span class="line">            defaultExtension: <span class="string">'js'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      System.import(<span class="string">'app/main'</span>)</span><br><span class="line">            .then(<span class="literal">null</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 3. Display the application --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">my-app</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="title">my-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup029.png" alt=""></p>
<p>在專案根目錄新增 <code>index.html</code>。</p>
<p>第 7 行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. Load libraries --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- IE required polyfills, in this exact order --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/es6-shim/es6-shim.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/systemjs/dist/system-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/angular2/es6/dev/src/testing/shims_for_IE.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/angular2/bundles/angular2-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/systemjs/dist/system.src.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/rxjs/bundles/Rx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"node_modules/angular2/bundles/angular2.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>載入 Angular 2 所需要的 JavaScript。</p>
<p>18 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="number">2.</span> Configure SystemJS --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    System.config(&#123;</span><br><span class="line">        packages: &#123;</span><br><span class="line">            app: &#123;</span><br><span class="line">                format: <span class="string">'register'</span>,</span><br><span class="line">                defaultExtension: <span class="string">'js'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.import(<span class="string">'app/main'</span>)</span><br><span class="line">            .then(<span class="literal">null</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>設定 SystemJS。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup032.png" alt=""></p>
<p>在 <code>index.html</code> 輸入 <code>&lt;my-</code>，已經可以顯示 <code>my-app</code>，顯示 PhpStorm 已經可以抓到 Angular 2 的 component。</p>
<h2 id="在瀏覽器顯示">在瀏覽器顯示</h2><hr>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup030.png" alt=""></p>
<p>在 <code>index.html</code> 點擊右上角的瀏覽器圖示，選擇要顯示的瀏覽器。</p>
<p><img src="/images/angular2/angular2-phpstorm-setup/setup031.png" alt=""></p>
<p>若能顯示 <code>My First Angular 2 App</code>，表示 Angular 2 已經正常啟動，若出現 <code>loading</code>，則表示 Angular 2 啟動失敗。</p>
<p>PhpStorm 有內建 Http Server，因此不用另外啟動其他 Http Server就可以正確執行 Angular 2。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm 對於 TypeScript 與 Angular 2 支援完整，除了支援 TypeScript 與 Angular 2 的語法提示外，也可以抓到 Angular 2 的 component。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Angular2Quickstart_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[PhpStorm 也支援 TypeScript 與 Angular 2]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何判斷 Collection 的元素是否重複?]]></title>
    <link href="http://oomusou.io/laravel/collection/collection-duplicated/"/>
    <id>http://oomusou.io/laravel/collection/collection-duplicated/</id>
    <published>2016-04-26T12:23:43.000Z</published>
    <updated>2016-04-26T07:40:16.000Z</updated>
    <content type="html"><![CDATA[<p>實務上遇到的問題，不過 Collection 似乎沒有內建方法可用，需動用一點小技巧。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.30</p>
<h2 id="Collection_包含重複元素">Collection 包含重複元素</h2><hr>
<p><strong> CollectionTest.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52CollectionIsDuplicatedElement/commit/36e5ace382f465362dbb45a6859c53d2b4a9468c" target="_blank" rel="external">單元測試 : Collection 含有重複 Element</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/CollectionTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">CollectionDemo</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Collection</span>含有重複<span class="title">Element</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$fake</span> = collect([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">        <span class="variable">$target</span> = App::make(CollectionDemo::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;hasDuplicated(<span class="variable">$fake</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertTrue(<span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fake</span> = collect([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure></p>
<p>特別設計含有重複元素的 collection，<code>1</code> 為重複元素。</p>
<p><strong> CollectionDemo.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52CollectionIsDuplicatedElement/commit/0d6422204c18ffa3714ba1c03765d157a20fd8fb" target="_blank" rel="external">判斷 Collection 是否含有重複 Element</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/CollectionDemo.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> Collection $cols</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasDuplicated</span><span class="params">(Collection <span class="variable">$cols</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable">$cols</span>-&gt;count() != <span class="variable">$cols</span>-&gt;unique()-&gt;count());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 collection 內建的 <code>unique()</code>，它會傳回一個沒有重複的新 collection。</p>
<p>若兩個 collection 的 <code>count()</code> 不一樣，表示此 collection 必含重複元素。</p>
<h2 id="元素重複於_Collection_內">元素重複於 Collection 內</h2><hr>
<p><strong> CollectionTest.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52CollectionIsDuplicatedElement/commit/90d3c8384718519baa0843c902370bbddf3c18c0" target="_blank" rel="external">單元測試 : Element 在 Collection 內重複</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/CollectionTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">CollectionDemo</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Element</span>在<span class="title">Collection</span>內重複<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$fake</span> = collect([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">        <span class="variable">$target</span> = App::make(CollectionDemo::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;isDuplicated(<span class="variable">$fake</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertTrue(<span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>12 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;isDuplicated(<span class="variable">$fake</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<p>第一個參數傳入 collection，第二個參數傳入元素，判斷此元素是否在 collection 內重複。</p>
<p><strong> CollectionDemo.php </strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52CollectionIsDuplicatedElement/commit/5f7a52d98252f01ceb24c89c74c98f255daf57d3" target="_blank" rel="external">判斷 Element 是否重複於 Collection</a></span></span></span><br><figure class="highlight php"><figcaption><span>Services/CollectionDemo.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> Collection $cols</span><br><span class="line">     * <span class="doctag">@param</span> int $element</span><br><span class="line">     * <span class="doctag">@return</span> bool</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isDuplicated</span><span class="params">(Collection <span class="variable">$cols</span>, int <span class="variable">$element</span>)</span> : <span class="title">bool</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$cnt</span> = <span class="variable">$cols</span>-&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$element</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable">$value</span> === <span class="variable">$element</span>);</span><br><span class="line">        &#125;)-&gt;count();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="variable">$cnt</span> &gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 使用 collection 內建的 <code>filter()</code>，傳入一個 closure，filter 出符合傳入元素值的新 collection。</p>
<p> 若新 collection 的 <code>count()</code> 大於 <code>1</code>，表示重複了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Laravel 的 collection 相當好用，若能用的巧，可以幾乎完全不用寫 <code>for</code> 或 <code>foreach</code>，程式相當精簡。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52CollectionIsDuplicatedElement" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[判斷 Collection 元素是否重複的小技巧]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Laravel Elixir + Browsersync 自動刷新瀏覽器?]]></title>
    <link href="http://oomusou.io/laravel/elixir/elixir-browsersync/"/>
    <id>http://oomusou.io/laravel/elixir/elixir-browsersync/</id>
    <published>2016-04-25T15:23:43.000Z</published>
    <updated>2016-04-28T01:25:37.000Z</updated>
    <content type="html"><![CDATA[<p>由於 HTML/CSS 技術越來越複雜，如 Dreamweaver 那種所見即所得的工具已經很難全面支援 HTML/CSS，所以前端開發取而代之的是文字編輯器配合 Emmet，然後直接在瀏覽器預覽，此時如 Browsersync 就非常方便。Laravel Elixir 3.3 之後直接支援 Browsersync，讓我們只要直接存檔就可以立即在瀏覽器看結果。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.30<br>Laravel Elixir 5.0.0</p>
<h2 id="Prerequisite">Prerequisite</h2><hr>
<ul>
<li>在 OS X 已經成功安裝 Node.js、NPM 與 Gulp。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>詳細請參考<a href="/laravel/elixir/elixir-nodejs/">如何在 OS X 安裝 Laravel 前端開發環境?</a></span></span></span></li>
</ul>
<h2 id="安裝_Laravel_Elixir">安裝 Laravel Elixir</h2><hr>
<p>Gulp 可以幫我們做一些前端的自動化工作，如自動編譯 Less 與 Saas，Babel 自動編譯 JavaScript ES6，自動執行 PHPUnit…等。</p>
<p>Laravel Elixir 是 Laravel 對 Gulp 的再次封裝，讓我們可以更簡單地在 Laravel 使用 Gulp。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>詳細請參考<a href="http://laravel.com/docs/master/elixir" target="_blank" rel="external">Laravel Elixir</a></span></span></span></p>
<p>在使用 Composer 建立 Laravel 專案時，會自動安裝後端的 <code>composer.json</code> 內的 PHP package，但卻沒有自動安裝前端的 <code>package.json</code> 內的 Node package，需自行手動安裝。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ npm install</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync000.png" alt=""></p>
<p>使用 NPM 安裝 Laravel elixir。</p>
<h2 id="測試_Laravel_Elixir">測試 Laravel Elixir</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync001.png" alt=""></p>
<p>若能看到以上畫面，表示 Laravel Elixer 已經正常執行，可順利編譯 Saas。</p>
<h2 id="修改_gulpfile-js">修改 gulpfile.js</h2><hr>
<p><strong> gulpfile.js </strong> <span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52ElixirBrowserSync_demo/commit/87de4f3afcda27fd54b8b3fe3f3d38210c79ff92" target="_blank" rel="external">修改 gulpfile.js，啟動 Browsersync</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elixir = <span class="built_in">require</span>(<span class="string">'laravel-elixir'</span>);</span><br><span class="line"></span><br><span class="line">elixir(<span class="function"><span class="keyword">function</span> (<span class="params">mix</span>) </span>&#123;</span><br><span class="line">    mix.sass(<span class="string">'app.scss'</span>);</span><br><span class="line"></span><br><span class="line">    mix.browserSync(&#123;</span><br><span class="line">        files: [<span class="string">'app/**/*'</span>, <span class="string">'public/**/*'</span>, <span class="string">'resources/views/**/*'</span>],</span><br><span class="line">        port: <span class="number">5000</span>,</span><br><span class="line">        proxy: <span class="string">'localhost:8000'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync002.png" alt=""></p>
<p>啟動 Browsersync，若將來對 PHP、blade 或 JavaScript 有任何修改，只要存檔就會在瀏覽器自動更新。</p>
<ul>
<li><strong> files </strong> : 設定監視哪些檔案一變更，就要啟動 Browsersync。</li>
<li><strong> port </strong> : 設定 Browsersync 所使用的 port。</li>
<li><strong> proxy </strong> : 指定到 8000，因為 PHP 內建 Http server 為 8000。</li>
</ul>
<h2 id="啟動_Http_Server">啟動 Http Server</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve --host 0.0.0.0</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync003.png" alt=""></p>
<p>使用 PHP 內建的 Http server。</p>
<h2 id="啟動_Gulp_Watch">啟動 Gulp Watch</h2><hr>
<p>Gulp 會在背景執行，持續監視檔案，只要一變更，就會重新執行 Gulp。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp watch</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync004.png" alt=""></p>
<p>Gulp watch 必須在新的 process 執行，也就是必須有一個 process 執行 <code>php artisan serve</code>，一個 process 執行 <code>gulp watch</code>。</p>
<h2 id="自動啟動瀏覽器">自動啟動瀏覽器</h2><hr>
<p><img src="/images/laravel/elixir/elixir-browsersync/browsersync005.png" alt=""></p>
<p>Laravel 將執行在 <code>localhost:5000</code>。</p>
<p>將來修改 PHP、blade 或 JavaScript，只要存檔後，瀏覽器就會自動更新，不用再手動 refersh。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>有了 Laravel Elixir + Browsersync ，以後我們有任何修改，就不用再一直手動 refresh 看結果了，若搭配雙螢幕更為方便。</li>
<li>這種方式在 Windows 也可以使用，不侷限在 OS X，只要在 Windows 也裝好 Node.js、NPM 與 Gulp 即可。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52ElixirBrowserSync_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[Laravel Elixir 3.3 開始支援 Browsersync]]>
    
    </summary>
    
      <category term="Browsersync" scheme="http://oomusou.io/tags/Browsersync/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Laravel Elixir" scheme="http://oomusou.io/tags/Laravel-Elixir/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Laravel 執行 Angular 2 (使用 Laravel Elixir)?]]></title>
    <link href="http://oomusou.io/angular2/angular2-laravel-setup/"/>
    <id>http://oomusou.io/angular2/angular2-laravel-setup/</id>
    <published>2016-04-24T12:23:43.000Z</published>
    <updated>2016-04-28T08:22:21.000Z</updated>
    <content type="html"><![CDATA[<p>Angular 2 即將推出正式版，挾著一些特點：如使用 TypeScript，強烈物件導向風格，支援 component 開發方式，與 PhpStorm 的完整支援，都讓人非常心動，但該如何與 Laravel 環境整合呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.30<br>Angular 2.0.0-beta.15</p>
<h2 id="5_Min_Quickstart">5 Min Quickstart</h2><hr>
<p>本文將以 Angular 2 官網的 <a href="https://angular.io/docs/ts/latest/quickstart.html#" target="_blank" rel="external">5 Min Quickstart</a> 移植到 Laravel 環境。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>本文不對 Angular 2 設定檔與程式內容做詳細解釋，僅針對 Laravel 部分討論，Angular 2 部分請參考官網的 <a href="https://angular.io/docs/ts/latest/quickstart.html#" target="_blank" rel="external">5 Min Quickstart</a></span></span></span></p>
<h2 id="安裝_Angular_2_與其相依套件">安裝 Angular 2 與其相依套件</h2><hr>
<p>除了 Angular 2 本身外，它還有很多相依的套件，須由 NPM 管理安裝。</p>
<p><strong> package.json </strong> <span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/e1a3b19c9a9cbda2d40f72246aab17a1d5696686" target="_blank" rel="external">更新 Angular 2 所相依的套件</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="string">"concurrently"</span>: <span class="string">"^2.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"laravel-elixir"</span>: <span class="string">"^5.0.0"</span>,</span><br><span class="line">    <span class="string">"bootstrap-sass"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="string">"elixir-typescript"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="string">"angular2"</span>: <span class="string">"2.0.0-beta.15"</span>,</span><br><span class="line">    <span class="string">"systemjs"</span>: <span class="string">"0.19.26"</span>,</span><br><span class="line">    <span class="string">"es6-shim"</span>: <span class="string">"^0.35.0"</span>,</span><br><span class="line">    <span class="string">"reflect-metadata"</span>: <span class="string">"0.1.2"</span>,</span><br><span class="line">    <span class="string">"rxjs"</span>: <span class="string">"5.0.0-beta.2"</span>,</span><br><span class="line">    <span class="string">"zone.js"</span>: <span class="string">"0.6.10"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-laravel-setup/setup000.png" alt=""></p>
<p>Laravel 本身的 package.json 就有自帶一些套件，紅色框框部分為 Angular 2 所相依的套件。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>安裝 node 套件時，最低需求是不能看到 <code>ERR</code> 出現，有警告沒關係，嘗試更新 node.js 版本試試看。</span></span></span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ npm install</span><br></pre></td></tr></table></figure>
<p>安裝 Angular 2 與其相依的套件。</p>
<h2 id="新增_TypeScript_設定檔">新增 TypeScript 設定檔</h2><hr>
<p>Angular 2 使用 TypeScript，而 <code>tsconfig.json</code> 為 TypeScript compiler 的設定檔。</p>
<p><strong> tsconfig.json </strong> <span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/e1a3b19c9a9cbda2d40f72246aab17a1d5696686" target="_blank" rel="external">新增 TypeScript compiler 設定檔</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"system"</span>,</span><br><span class="line">    <span class="string">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"removeComments"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"exclude"</span>: [</span><br><span class="line">    <span class="string">"node_modules"</span>,</span><br><span class="line">    <span class="string">"typings/main"</span>,</span><br><span class="line">    <span class="string">"typings/main.d.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-laravel-setup/setup001.png" alt=""></p>
<p>在 <code>resources/assets</code> 建立 <code>typescript</code> 目錄，新增 <code>tsconfig.json</code>。</p>
<h2 id="建立第一個_Component">建立第一個 Component</h2><hr>
<p>Angular 2 強調整個網頁都由 component 所構成，首先我們要先建立一個 component。</p>
<p><strong> app.component.ts </strong> <span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/304c201f1c268c0300d6990d858492ff2f2240c5" target="_blank" rel="external">建立第一個 Component</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>resources/assets/typescript/app.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'angular2/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'my-app'</span>,</span><br><span class="line">    template: <span class="string">'&lt;h1&gt;My First Angular 2 App&lt;/h1&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123; &#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-laravel-setup/setup002.png" alt=""></p>
<p>在 <code>resources/assets/typescript</code> 目錄下建立 <code>app.component.ts</code>。</p>
<p>此為 TypeScript 語法，主要表示其 HTML tag 為 <code>my-app</code>，其所代表的 HTML 為 <code>&lt;h1&gt;My First Angular 2 App&lt;/h1&gt;</code>。</p>
<p>因為目前還沒有任何顯示邏輯，所以 <code>AppComponent</code> class 為空的。</p>
<h2 id="建立_Angular_2_啟動檔">建立 Angular 2 啟動檔</h2><hr>
<p>Angular 2 需要一個程式的起動點，就類似 C 語言的 <code>main()</code> 一樣，<code>main.ts</code> 就是扮演起動 Angular 2 的角色。</p>
<p><strong> main.ts </strong> <span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/85e4d464db0af6b422639696c57d67ca0d0fd800" target="_blank" rel="external">建立 Angular 2 的啟動檔</a></span></span></span><br><figure class="highlight typescript"><figcaption><span>resources/assets/typescript/main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path="../../../node_modules/angular2/typings/browser.d.ts"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;bootstrap&#125;    from <span class="string">'angular2/platform/browser'</span></span><br><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span></span><br><span class="line"></span><br><span class="line">bootstrap(AppComponent);</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-laravel-setup/setup003.png" alt=""></p>
<p>在 <code>resources/assets/typescript</code> 目錄下建立 <code>main.ts</code>。</p>
<p>第 1 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path="../../../node_modules/angular2/typings/browser.d.ts"/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>為 <code>browser</code> 的型別定義檔，TypeScript 為強型別語言，需要型別定義檔才能編譯。</p>
<p>第 3 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;bootstrap&#125; from <span class="string">'angular2/platform/browser'</span></span><br></pre></td></tr></table></figure></p>
<p>載入 <code>angular2/platform/browser</code>，表示 Angular 2 跑在瀏覽器平台，此外，Angular 2 還可以跑在 <code>Apache Cordova</code> 與 <code>Native</code> 平台，    只要 import 不同 <code>bootstrap</code> 即可。</p>
<p>第 4 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app.component'</span></span><br></pre></td></tr></table></figure></p>
<p>載入我們剛剛建立的 <code>app.component.ts</code>。</p>
<p>第 6 行<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap(AppComponent);</span><br></pre></td></tr></table></figure></p>
<p>啟動我們剛剛建立的 <code>app.component.ts</code>。</p>
<h2 id="將_Angular_2_整合進_Blade">將 Angular 2 整合進 Blade</h2><hr>
<p>接著我們要將 Angular 2 整合進 Laravel 的 blade 內。</p>
<p><strong> welcome.blade.php </strong> <span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/0540a11a83c81f01de1ccda2f5ef36ebf35d2a3b" target="_blank" rel="external">將 Angular 2 整合進 Blade</a></span></span></span><br><figure class="highlight html"><figcaption><span>resources/views/welcome.blade.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>Laravel<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"https://fonts.googleapis.com/css?family=Lato:100"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 1. Load libraries --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"es6-shim/es6-shim.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"systemjs/dist/system-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"angular2/bundles/angular2-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"systemjs/dist/system.src.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"rxjs/bundles/Rx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"angular2/bundles/angular2.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 2. Configure SystemJS --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">            System.config(&#123;</span><br><span class="line">                <span class="string">"defaultJSExtensions"</span>: <span class="literal">true</span>,</span><br><span class="line">                packages: &#123;</span><br><span class="line">                    app: &#123;</span><br><span class="line">                        format: <span class="string">'register'</span>,</span><br><span class="line">                        defaultExtension: <span class="string">'js'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            System.import(<span class="string">'main'</span>)</span><br><span class="line">                    .then(<span class="literal">null</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">            <span class="tag">html</span>, <span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">body</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> <span class="number">100</span></span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'Lato'</span></span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="class">.container</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">display</span>:<span class="value"> table-cell</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> middle</span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="class">.content</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">                <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="class">.title</span> <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">96px</span></span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span>Laravel 5<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">my-app</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="title">my-app</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure> </p>
<p>第 8 行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. Load libraries --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"es6-shim/es6-shim.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"systemjs/dist/system-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"angular2/bundles/angular2-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"systemjs/dist/system.src.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"rxjs/bundles/Rx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"angular2/bundles/angular2.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>載入 Angular 2 所需要的 JavaScript。</p>
<p>16 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="number">2.</span> Configure SystemJS --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    System.config(&#123;</span><br><span class="line">        <span class="string">"defaultJSExtensions"</span>: <span class="literal">true</span>,</span><br><span class="line">        packages: &#123;</span><br><span class="line">            app: &#123;</span><br><span class="line">                format: <span class="string">'register'</span>,</span><br><span class="line">                defaultExtension: <span class="string">'js'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.import(<span class="string">'main'</span>)</span><br><span class="line">          .then(<span class="literal">null</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>設定 SystemJS。</p>
<h2 id="設定_Laravel_Elixir">設定 Laravel Elixir</h2><hr>
<p><img src="/images/angular2/angular2-laravel-setup/setup004.png" alt=""></p>
<p>在設定 <code>gulpfile.js</code> 之前，必須先解一個雷。</p>
<p>在 <code>node_modules/elixir-typescript/index.js</code>，將第 45 行 mark 掉。</p>
<p>因為 <code>elixir-typescript</code> 會試著將 <code>app.component.ts</code> 與 <code>main.ts</code> 最後整合成 <code>app.js</code>，其用意是好的，但這會導致此範例執行失敗，或許有更好的解法。</p>
<p><strong> gulpfile.js </strong> <span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Angular2Beta_demo/commit/5440b9fe55dab96d28888986ff2a58b0ed9c4c7e" target="_blank" rel="external">設定 Laravel Elixir</a></span></span></span><br><figure class="highlight javascript"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elixir = <span class="built_in">require</span>(<span class="string">'laravel-elixir'</span>);</span><br><span class="line"><span class="keyword">var</span> elixirTypscript = <span class="built_in">require</span>(<span class="string">'elixir-typescript'</span>);</span><br><span class="line"></span><br><span class="line">elixir(<span class="function"><span class="keyword">function</span> (<span class="params">mix</span>) </span>&#123;</span><br><span class="line">    mix.sass(<span class="string">'app.scss'</span>);</span><br><span class="line"></span><br><span class="line">    mix.copy(<span class="string">'node_modules/angular2'</span>, <span class="string">'public/angular2'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/rxjs'</span>, <span class="string">'public/rxjs'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/systemjs'</span>, <span class="string">'public/systemjs'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/es6-promise'</span>, <span class="string">'public/es6-promise'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/es6-shim'</span>, <span class="string">'public/es6-shim'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/zone.js'</span>, <span class="string">'public/zone.js'</span>);</span><br><span class="line"></span><br><span class="line">    mix.typescript([</span><br><span class="line">            <span class="string">'app.component.ts'</span>,</span><br><span class="line">            <span class="string">'main.ts'</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'public/'</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    mix.browserSync(&#123;</span><br><span class="line">        files: [<span class="string">'app/**/*'</span>, <span class="string">'public/**/*'</span>, <span class="string">'resources/views/**/*'</span>],</span><br><span class="line">        port: <span class="number">5000</span>,</span><br><span class="line">        proxy: <span class="string">'localhost:8000'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/angular2/angular2-laravel-setup/setup005.png" alt=""></p>
<p>第 2 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elixirTypscript = <span class="built_in">require</span>(<span class="string">'elixir-typescript'</span>);</span><br></pre></td></tr></table></figure></p>
<p>載入 <code>elixir-typescript</code>，用來編譯 TypeScript。</p>
<p>第 7 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mix.copy(<span class="string">'node_modules/angular2'</span>, <span class="string">'public/angular2'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/rxjs'</span>, <span class="string">'public/rxjs'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/systemjs'</span>, <span class="string">'public/systemjs'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/es6-promise'</span>, <span class="string">'public/es6-promise'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/es6-shim'</span>, <span class="string">'public/es6-shim'</span>)</span><br><span class="line">        .copy(<span class="string">'node_modules/zone.js'</span>, <span class="string">'public/zone.js'</span>);</span><br></pre></td></tr></table></figure></p>
<p>將 Angular 2 所需要的 JavaScript 複製到 <code>public</code> 目錄下。</p>
<p>14 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mix.typescript([</span><br><span class="line">        <span class="string">'app.component.ts'</span>,</span><br><span class="line">        <span class="string">'main.ts'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'public/'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>將 <code>app.component.ts</code> 與 <code>main.ts</code> 編譯後，複製到 <code>public</code> 目錄下。</p>
<p>21 行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mix.browserSync(&#123;</span><br><span class="line">       files: [<span class="string">'app/**/*'</span>, <span class="string">'public/**/*'</span>, <span class="string">'resources/views/**/*'</span>],</span><br><span class="line">       port: <span class="number">5000</span>,</span><br><span class="line">       proxy: <span class="string">'localhost:8000'</span></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></p>
<p>啟動 Browsersync，若將來對 PHP、blade 或 TypeScript 有任何修改，只要存檔就會在瀏覽器自動更新。</p>
<ul>
<li><strong> files </strong> : 設定監視哪些檔案一變更，就要啟動 Browsersync。</li>
<li><strong> port </strong> : 設定 Browsersync 所使用的 port。</li>
<li><strong> proxy </strong> : 指定到 8000，因為 PHP 內建 Http server 為 8000。</li>
</ul>
<h2 id="編譯_TypeScript">編譯 TypeScript</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp</span><br></pre></td></tr></table></figure>
<p><img src="/images/angular2/angular2-laravel-setup/setup007.png" alt=""></p>
<p>使用 Laravel Elixir 編譯 TypeScript。</p>
<h2 id="啟動_Http_Server">啟動 Http Server</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve --host 0.0.0.0</span><br></pre></td></tr></table></figure>
<p><img src="/images/angular2/angular2-laravel-setup/setup006.png" alt=""></p>
<p>使用 PHP 內建的 Http server。</p>
<h2 id="啟動_Gulp_Watch">啟動 Gulp Watch</h2><hr>
<p>Gulp 會在背景執行，持續監視檔案，只要一變更，就會重新執行 gulp。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ gulp watch</span><br></pre></td></tr></table></figure>
<p><img src="/images/angular2/angular2-laravel-setup/setup009.png" alt=""></p>
<p>Gulp watch 必須在新的 process 執行，也就是必須有一個 process 執行 <code>php artisan serve</code>，一個 process 執行 <code>gulp watch</code>。</p>
<h2 id="自動啟動瀏覽器">自動啟動瀏覽器</h2><hr>
<p><img src="/images/angular2/angular2-laravel-setup/setup008.png" alt=""></p>
<p>若能顯示 <code>My First Angular 2 App</code>，表示 Angular 2 已經正常啟動，若出現 <code>loading</code>，則表示 Angular 2 啟動失敗。</p>
<p>將來修改 PHP、blade 或 TypeScript，只要存檔後，瀏覽器就會自動更新，不用再手動 refersh。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Angular 2 有了 TypeScript 與 component 之後，可以輕易寫出符合 SOLID 原則的程式碼，不再像 jQuery 那樣拿以維護。</li>
<li>Angular 2 可以融合在 Laravel blade 體系中，並且使用 Laravel Elixir 完成編譯與管理。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52Angular2Beta_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[在 Laravel 環境使用 Laravel Elixir 執行 Angular 2]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Browsersync" scheme="http://oomusou.io/tags/Browsersync/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Laravel Elixir" scheme="http://oomusou.io/tags/Laravel-Elixir/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何測試 Repository 模式 (使用 MySQL)?]]></title>
    <link href="http://oomusou.io/tdd/tdd-repository-testing-mysql/"/>
    <id>http://oomusou.io/tdd/tdd-repository-testing-mysql/</id>
    <published>2016-04-20T12:23:43.000Z</published>
    <updated>2016-04-26T04:08:53.000Z</updated>
    <content type="html"><![CDATA[<p>使用 SQLite In-Memory 的方式雖然又快又方便，但若使用了 <code>DB::raw</code> 或 <code>whereRaw()</code> 的寫法，由於直接使用了 MySQL 的函式，可能 SQLite 並不支援，就必須直接在 MySQL 跑測試。</p>
<p>雖然我們會另外開一個資料庫做測試，但也有可能我們想直接對正式有資料的資料庫做測試，我們該怎麼快速無痛切換呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.30<br>PHPUnit 4.8.24<br>PhpStorm 2016.1</p>
<h2 id="Repository模式">Repository模式</h2><hr>
<p>初學者常會商業邏輯與資料庫邏輯同時寫在 controller 內，如我們想將最新的 3 筆文章顯示在 view。<br><figure class="highlight php"><figcaption><span>app/Http/Controllers/PostsController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$posts</span> = Post::orderBy(<span class="string">'id'</span>, <span class="string">'desc'</span>)</span><br><span class="line">        -&gt;take(<span class="number">3</span>)</span><br><span class="line">        -&gt;get();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = compact(<span class="variable">$posts</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View(<span class="string">'posts.index'</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>這段程式碼在執行上沒有問題，但在設計上有幾個問題 : </p>
<ol>
<li><p>違反 SOLID 的單一職責原則，controller 原本該有的職責應該是商業邏輯，但現在卻將資料庫邏輯直接寫在 controller 內，這已經超出原本 controller 的職責，將會導致日後 controller 過於肥大而難以維護。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>單一職責原則 : 應該且僅有一個原因引起 class 的變更。</span></span></span></p>
</li>
<li><p>將資料庫邏輯直接寫在 controller 內，將來若有不同 controller 使用相同的資料庫邏輯，將無法重複使用。</p>
</li>
<li><p>由於 controller 內直接使用 Eloquent，表示 controller 直接相依於<code>Post</code> model，若我們要對 controller 做單元測試，必須直接存取資料庫，這違反了隔離測試 ( isolated test ) 原則。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>Isolated Test : 1.執行速度快 2.關注點分離 3.單一職責 4.可測試性 5.測試程式的健壯性</span></span></span></p>
</li>
<li><p>為了隔離測試，我們會希望 mock 掉資料庫邏輯，然後透過依賴注入將 mock 物件注入 contoller，但在 controller 直接使用 model，導致無法使用依賴注入，因此無法執行單元測試。</p>
</li>
</ol>
<p>比較好的方式是使用 repository 模式，將資料庫邏輯從 controller 中獨立出來寫在 repository，透過依賴注入將 repository注入controller。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>詳細請參考<a href="/laravel/laravel-repository/">如何使用 Repository 模式?</a></span></span></span></p>
<p>使用 repository 模式有以下好處 : </p>
<ol>
<li><p>Repository 專心負責資料庫邏輯，符合單一職責原則，可避免 controller 過於肥大而難以維護。</p>
</li>
<li><p>資料庫邏輯從 controller 搬到 repository，因此不同的 controller 可以重複使用。</p>
</li>
<li><p>controller 不再直接相依於 model，而是透過依賴注入將 repository 注入 controller，符合依賴反轉原則，且測試時不用直接存取資料庫，達到隔離測試要求。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>依賴反轉原則 : 高階模組不該依賴低階模組，兩者都該依賴其抽象。抽象不要依賴細節，細節要依賴抽象。</span></span></span></p>
</li>
<li><p>單元測試時直接 mock 掉 repository 即可，並透過依賴注入將 repository 注入到 controller，不用特別去 mock Eloquent model。</p>
</li>
</ol>
<p>將資料庫邏輯從 controller 搬到 repository 之後，本文的重點就是討論該如何測試 repository 內的資料庫邏輯。</p>
<h2 id="Test_Factory_Generator">Test Factory Generator</h2><hr>
<p>Laravel 5 提出了 model factory，直接整合了 faker，讓我們在 seeding 與 testing 時更為方便，而 Test Factory Generator 會自動根據 migration 產生 model factory，讓我們連 model factory 都不用寫。</p>
<p><strong>安裝</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ composer require mpociot/laravel-test-factory-helper --dev</span><br></pre></td></tr></table></figure>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo000.png" alt=""></p>
<p>使用 composer 安裝 Test Factory Generator，因為此套件只會在開發使用，可以加上 <code>--dev</code> 參數。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>關於 <code>--dev</code> 參數，詳細請參考<a href="/laravel/laravel-debugbar/#使用Composer安裝">如何使用 Laravel Debugbar #使用 Composer 安裝</a></span></span></span></p>
<p><strong> Service Provider </strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mpociot\LaravelTestFactoryHelper\TestFactoryHelperServiceProvider::class,</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo001.png" alt=""></p>
<p>在 <code>config/app.php</code> 中加入 <code>TestFactoryHelperServiceProvider</code>。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/f8dfabc170754efd4e581fe013a25b6e61240f67" target="_blank" rel="external">安裝 Laravel Test Factory Generator</a></span></span></span></p>
<h2 id="建立_Model_與_Migration">建立 Model 與 Migration</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:model Post -m</span><br></pre></td></tr></table></figure>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo002.png" alt=""></p>
<p>建立 <code>Post</code> model 與 migration，<code>-m</code> 讓我們在建立 model 時一併建立 migrarion。</p>
<p>會在 <code>app</code> 目錄下建立 <code>Post.php</code>，並在 <code>database/migrations</code> 目錄建立 migration 檔。</p>
<p><strong> Post.php </strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/bec5ad2e61b7dd7b302ee9a824059aa00599ede4" target="_blank" rel="external">建立Post.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>app/Post.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [</span><br><span class="line">        <span class="string">'title'</span>,</span><br><span class="line">        <span class="string">'description'</span>,</span><br><span class="line">        <span class="string">'content'</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 
<p>第7行<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="variable">$fillable</span> = [</span><br><span class="line">    <span class="string">'title'</span>,</span><br><span class="line">    <span class="string">'description'</span>,</span><br><span class="line">    <span class="string">'content'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<p>定義當使用 mass assignment 時可以被修改的欄位，進而保護其他欄位不被修改。</p>
<p><strong> create_posts_table.php </strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/3ea17c01a22fa0bfaa7f7e837d714ba7982eb7d0" target="_blank" rel="external">create_posts_table.php</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>database/migrations/2015_10_14_113810_create_posts_table.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatePostsTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'title'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'description'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;text(<span class="string">'content'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::drop(<span class="string">'posts'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>13行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> Schema::create(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'title'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'description'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;text(<span class="string">'content'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>加入 <code>title</code>、<code>description</code> 與 <code>content</code> 3 個欄位。 </p>
<p><strong> 正式資料庫連線 </strong><br><img src="/images/tdd/tdd-repository-testing-mysql/repo003.png" alt=""></p>
<p>將來 Test Factory Generator 必須連上資料庫才能產生 model factory，必須西確定專案已經與資料庫順利連線。</p>
<p><strong> 正式資料庫執行 Migrate </strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan migrate</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo004.png" alt=""></p>
<p>執行 migrate 將 table 建立在 MySQL 的正式資料庫。</p>
<h2 id="建立_Model_Factory">建立 Model Factory</h2><hr>
<p>測試 repository 時，將使用 model factory 幫我們建立測試資料。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan test-factory-helper:generate</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo008.png" alt=""></p>
<p>Test Factory Generator 幫我們自動建立 model factory。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/3283997109e50494a47d873bbf9891442203f227" target="_blank" rel="external">建立Model Factory</a></span></span></span></p>
<h2 id="新增_MySQL_測試資料庫連線">新增 MySQL 測試資料庫連線</h2><hr>
<p>之前設定的是 MySQL 正式資料庫連線，但在單元測試時，我們希望讀寫在另外一個 MySQL 資料庫。</p>
<p><strong> 新增資料庫連線 </strong><br><img src="/images/tdd/tdd-repository-testing-mysql/repo005.png" alt=""></p>
<p>先在 MySQL 建立 <code>homestead_testing</code> 資料庫，並在 <code>.env</code> 增加 <code>DB_DATABASE_TESTING</code>，設定為 <code>homestead_testing</code>。</p>
<p>將 <code>DB_CONNECTION</code> 先改成 <code>mysql_testing</code>，稍後會建立此連線，目的在替測試資料庫跑 migration，跑完 migration 之後會再切回來。</p>
<p><strong>database.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/97cee476f2640ccb6d84d37be6e6e7ddd16ea28d" target="_blank" rel="external">新增 mysql_testing 連線</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>config/database.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'mysql_testing'</span> =&gt; [</span><br><span class="line">   	<span class="string">'driver'</span> =&gt; <span class="string">'mysql'</span>,</span><br><span class="line">    <span class="string">'host'</span> =&gt; env(<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>),</span><br><span class="line">    <span class="string">'port'</span> =&gt; env(<span class="string">'DB_PORT'</span>, <span class="string">'3306'</span>),</span><br><span class="line">    <span class="string">'database'</span> =&gt; env(<span class="string">'DB_DATABASE_TESTING'</span>, <span class="string">'forge'</span>),</span><br><span class="line">    <span class="string">'username'</span> =&gt; env(<span class="string">'DB_USERNAME'</span>, <span class="string">'forge'</span>),</span><br><span class="line">    <span class="string">'password'</span> =&gt; env(<span class="string">'DB_PASSWORD'</span>, <span class="string">''</span>),</span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">    <span class="string">'collation'</span> =&gt; <span class="string">'utf8_unicode_ci'</span>,</span><br><span class="line">    <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'strict'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">'engine'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure> 
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo006.png" alt=""></p>
<p>在 <code>config/database.php</code> 新增 <code>mysql_testing</code> 連線。</p>
<p>將 <code>database</code> key 的 value 改為 <code>env(&#39;DB_DATABASE_TESTING&#39;, &#39;forge&#39;)</code>。</p>
<p><strong> 測試資料庫執行 Migrate </strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan migrate</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo007.png" alt=""></p>
<p>執行 migrate 將 table 建立在 MySQL 的測試資料庫。</p>
<p>目前為止，在正式資料庫與測試資料庫都已經跑過 migration。</p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo009.png" alt=""></p>
<p>將 <code>.env</code> 的資料庫連線從測試資料庫改為正式資料庫的 <code>mysql</code>。</p>
<p><strong> 修改 phpunit.xml </strong><br><strong>phpunit.xml</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/471d52aa09e10d5223886c9106871c5d2673a51a" target="_blank" rel="external">在 phpunit.xml 新增 DB_CONNECTION</a></span></span></span><br><figure class="highlight xml"><figcaption><span>phpunit.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">phpunit</span> <span class="attribute">backupGlobals</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">backupStaticAttributes</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">bootstrap</span>=<span class="value">"bootstrap/autoload.php"</span></span><br><span class="line">         <span class="attribute">colors</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertErrorsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertNoticesToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertWarningsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">processIsolation</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">stopOnFailure</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">testsuites</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">testsuite</span> <span class="attribute">name</span>=<span class="value">"Application Test Suite"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">"Test.php"</span>&gt;</span>./tests<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">testsuite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">testsuites</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">whitelist</span> <span class="attribute">processUncoveredFilesFromWhitelist</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">".php"</span>&gt;</span>./app<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">file</span>&gt;</span>./app/Http/routes.php<span class="tag">&lt;/<span class="title">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">whitelist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"mysql_testing"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">phpunit</span>&gt;</span></span><br></pre></td></tr></table></figure> </p>
<p>24行<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"mysql_testing"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可在此建立 <code>APP_ENV</code> 為 <code>testing</code> 時的全域變數。</p>
<p>設定 <code>DB_CONNECTION</code> 為 <code>mysql_testing</code>，當跑測試時，將會使用 <code>mysql_testing</code> 資料庫連線。</p>
<h2 id="測試_MySQL_測試資料庫連線">測試 MySQL 測試資料庫連線</h2><hr>
<p><code>ExampleTest.php</code> 為 Laravel 預設的測試範例，其中包含了 <code>testBasicExample()</code>，示範了如何測試預設的 <code>welcome.blade.php</code> 是否正確執行。</p>
<p><strong>ExampleTest.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/4dd438355c8c3ff9090ceb5c6cc5e0f304a2fbb8" target="_blank" rel="external">新增 MySQL 測試資料庫連線</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/ExampleTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A basic functional test example.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testBasicExample</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/'</span>)</span><br><span class="line">             -&gt;see(<span class="string">'Laravel 5'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MySQL</span>測試料庫連線<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = Post::all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertCount(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>16行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@test</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MySQL</span>測試料庫連線<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = Post::all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertCount(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於只是測試連線是否成功，尚未跑 model factory，因此預期 <code>Post</code> model 的資料筆數為 <code>0</code>。</p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo010.png" alt=""></p>
<p>實際跑測試，<span class="label label-success">綠燈</span> 表示連線成功。<span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>關於如何在 PhpStorm 跑單元測試，詳細請參考<a href="/phpstorm/phpstorm-debug-testing/">如何使用 PhpStorm 測試與除錯?</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  為什麼不需在 setUp() 下 Artisan::call('migrate:migrate')?</div>
<p>若使用 SQLite In-Memory，只要資料庫連線一斷，SQLite 會自動釋放記憶體，也就是說，當每個測試案例執行開始時，因為資料庫重新建立，所以必須重新跑一次 migration，但若使用 MySQL 測試，因為測試資料庫一直存在於 MySQL，因此不需再跑 migration。</p>
<h2 id="以_TDD_建立_Repository">以 TDD 建立 Repository</h2><hr>
<p>之前的所有動作都只是為了建立 repository 的測試環境，接下來將以 TDD 的方式建立 <code>PostRepository</code>。</p>
<p><strong>建立 PostRepository 的單元測試</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan make:test Unit/Repositories/PostRepositoryTest</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo011.png" alt=""></p>
<p><strong>PostRepositoryTest.php</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/451a7d6f02391178df34398a46f95683a93c81cc" target="_blank" rel="external">建立 PostRepositoyTest.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/Repositories/PostRepositoryTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">WithoutMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseTransactions</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepositoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A basic test example.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testExample</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將 <code>PostRepositoryTest.php</code> 建立在 <code>tests/Unit/Repositories</code> 目錄下。</p>
<p>實務上測試分 3 種，有<strong>單元測試</strong>，<strong>整合測試</strong>與<strong>驗收測試</strong>。</p>
<p>Repository 測試屬於單元測試，故建立在 <code>Unit</code> 目錄下，將來還有 <code>Integration</code> 目錄放整合測試，與 <code>Acceptance</code> 放驗收測試。</p>
<p>所建立的 <code>PostRepositoryTest</code> 也繼承於 <code>TestCase</code>。</p>
<p><strong>最新 3 筆文章</strong><br>TDD 要我們先寫測試再寫程式，在 <code>PostRepository</code> 實作抓最新的 3 筆文章前，必須先將其測試先寫好。</p>
<p><strong>PostRepositoryTest.php</strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/5701f9e374aef6746143eac3dead395c3c991118" target="_blank" rel="external">建立最新 3 筆文章</a></span></span></span></p>
<figure class="highlight php"><figcaption><span>tests/Unit/Repositories/PostRepositoryTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseTransactions</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepositoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseTransactions</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@test</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 最新3筆文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">100</span>)-&gt;create();</span><br><span class="line">        <span class="variable">$target</span> = App::make(PostRepository::class);</span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;getLatest3Posts()-&gt;count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Arrange</strong><br>負責建立要測試的資料，因為我們想要抓最新 3 筆文章，所以先使用 model factory 新增 100 筆測試資料進 MySQL。</p>
<p>建立 <code>$target</code> 待測物件，一律使用 <code>App::make()</code> 建立物件，不再使用<code>new</code>建立物件。</p>
<p>建立 <code>$expected</code>，也就我們預期會傳回最新 3 筆文章的結果。</p>
<p><strong>Act</strong><br>實際執行 <code>$target</code> 的 <code>getLatest3Posts()</code>，由於我們只想測試是否能傳回 3 筆資料，使用 collection 的 <code>count()</code> 計算筆數。</p>
<p><strong>Assert</strong><br>使用 PHPUnit 的 <code>assertEquals()</code>，判斷 <code>$expected</code> 與 <code>$actual</code> 是否相等，若相等則 <span class="label label-success">綠燈</span>，不相等則 <span class="label label-danger">紅燈</span>。</p>
<p>第 7 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">DatabaseTransactions</span>;</span><br></pre></td></tr></table></figure></p>
<p>若使用SQLite In-Memory，因為每次資料庫連線一斷，SQLite 就會自動釋放記憶體，因此每次使用 model factory 建立的假資料，並不會殘存在 SQLite In-Memory 內，但目前使用的是 MySQL，資料是實際存在 MySQL 內，並不會自動刪除，若一直跑測試，則 MySQL 的測試資料將越來越多，這樣每次跑測試時，由於資料庫的資料並不相同，所以可能每次跑的結果都不一樣。</p>
<p>Laravel 提供了 <code>DatabaseTransactions</code> trait，只要 <code>use</code> 以後，每次測試完，就會自動幫我們將假資料從 MySQL 刪除，這樣就可以確保我們每次執行測試的結果都是相同的。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  到底 <strong>use DatabaseTransactions;</strong> 有什麼黑魔法，能使得每次測試完就會自動刪除資料呢?</div>
<figure class="highlight php"><figcaption><span>vendor/laravel/framework/src/Illuminate/Foundation/Testing/DatabaseTransactions.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> DatabaseTransactions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Handle database transactions on the specified connections.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beginDatabaseTransaction</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$database</span> = <span class="variable">$this</span>-&gt;app-&gt;make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;connectionsToTransact() <span class="keyword">as</span> <span class="variable">$name</span>) &#123;</span><br><span class="line">            <span class="variable">$database</span>-&gt;connection(<span class="variable">$name</span>)-&gt;beginTransaction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;beforeApplicationDestroyed(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(<span class="variable">$database</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;connectionsToTransact() <span class="keyword">as</span> <span class="variable">$name</span>) &#123;</span><br><span class="line">                <span class="variable">$database</span>-&gt;connection(<span class="variable">$name</span>)-&gt;rollBack();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The database connections that should have transactions.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> array</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">connectionsToTransact</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> property_exists(<span class="variable">$this</span>, <span class="string">'connectionsToTransact'</span>)</span><br><span class="line">                            ? <span class="variable">$this</span>-&gt;connectionsToTransact : [<span class="keyword">null</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 10 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Handle database transactions on the specified connections.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> void</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beginDatabaseTransaction</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$database</span> = <span class="variable">$this</span>-&gt;app-&gt;make(<span class="string">'db'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;connectionsToTransact() <span class="keyword">as</span> <span class="variable">$name</span>) &#123;</span><br><span class="line">        <span class="variable">$database</span>-&gt;connection(<span class="variable">$name</span>)-&gt;beginTransaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;beforeApplicationDestroyed(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(<span class="variable">$database</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$this</span>-&gt;connectionsToTransact() <span class="keyword">as</span> <span class="variable">$name</span>) &#123;</span><br><span class="line">            <span class="variable">$database</span>-&gt;connection(<span class="variable">$name</span>)-&gt;rollBack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>當每個測試案例執行時，Laravel 會以 <code>beginTransaction()</code> 處理，當測試案例結束時，會再以 <code>rollBack()</code> 處理，因此最後假資料不會寫進資料庫。</p>
<p><strong>執行測試</strong><br><img src="/images/tdd/tdd-repository-testing-mysql/repo012.png" alt=""></p>
<p>得到第 1 個 <span class="label label-danger">紅燈</span> : <code>PostRepository</code> 不存在，因為我們還沒有建立。</p>
<p>事實上 PhpStorm 也將 <code>PostRepository</code> 反白，警告我們 <code>PostRepository</code> 並不存在。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/9b22d10d2be1bd688658b354a1ef23b744cace6a" target="_blank" rel="external">建立 PostRepository.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo013.png" alt=""></p>
<p>補上 <code>PostRepository.php</code> 後，繼續執行測試。</p>
<p>得到第 2 個 <span class="label label-danger">紅燈</span> : <code>getLatest3Posts()</code> 不存在，因為我們還沒有建立。</p>
<p>事實上 PhpStorm 也將 <code>getLatest3Posts()</code> 反白，警告我們 <code>getLatest3Posts()</code> 並不存在。</p>
<p><strong>PostRepository.php</strong><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo014.png" alt=""></p>
<p>補上 <code>getLatest3Posts()</code> 後，繼續執行測試。</p>
<p>得到第 3 個 <span class="label label-danger">紅燈</span> : 對 一個 <code>null</code> 去執行 <code>count()</code>，因為我們還沒寫 <code>getLatest3Post()</code> 內的程式碼。</p>
<p>事實上 PhpStorm也將<code>pluck()</code> 反白，警告我們 <code>getLatest3Posts()</code> 尚未傳回任何物件。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/d2be13d3f53378e28e266af0c97ffc523eead4e0" target="_blank" rel="external">回傳 collection</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::orderBy(<span class="string">'id'</span>, <span class="string">'desc'</span>)</span><br><span class="line">            -&gt;take(<span class="number">3</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo015.png" alt=""></p>
<p>在 <code>getLatest3Posts()</code> 補上 query 後回傳 collection 後，繼續執行測試。</p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>。</p>
<p>隨著 <span class="label label-success">綠燈</span> 的出現，我們也完成了 repository。</p>
<h2 id="切換到_MySQL_正式資料庫">切換到 MySQL 正式資料庫</h2><hr>
<p>既然都是在 MySQL 測試，我們可能想將測試實際跑在有正式上線資料的資料庫，而不只是跑在測試資料庫。</p>
<p><strong> 新增 phpunit_acceptance.xml </strong><br>從 <code>phpunit.xml</code> 複製一個新的 <code>phpunit_acceptance.xml</code>。</p>
<p><strong> phpunit_acceptance.xml </strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo/commit/d2be13d3f53378e28e266af0c97ffc523eead4e0" target="_blank" rel="external">新增 phpunit_acceptance.xml </a></span></span></span><br><figure class="highlight xml"><figcaption><span>phpunit_acceptance.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">phpunit</span> <span class="attribute">backupGlobals</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">backupStaticAttributes</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">bootstrap</span>=<span class="value">"bootstrap/autoload.php"</span></span><br><span class="line">         <span class="attribute">colors</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertErrorsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertNoticesToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">convertWarningsToExceptions</span>=<span class="value">"true"</span></span><br><span class="line">         <span class="attribute">processIsolation</span>=<span class="value">"false"</span></span><br><span class="line">         <span class="attribute">stopOnFailure</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">testsuites</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">testsuite</span> <span class="attribute">name</span>=<span class="value">"Application Test Suite"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">"Test.php"</span>&gt;</span>./tests<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">testsuite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">testsuites</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">whitelist</span> <span class="attribute">processUncoveredFilesFromWhitelist</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">directory</span> <span class="attribute">suffix</span>=<span class="value">".php"</span>&gt;</span>./app<span class="tag">&lt;/<span class="title">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">file</span>&gt;</span>./app/Http/routes.php<span class="tag">&lt;/<span class="title">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">whitelist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"mysql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">phpunit</span>&gt;</span></span><br></pre></td></tr></table></figure> </p>
<p>24行<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">php</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"APP_ENV"</span> <span class="attribute">value</span>=<span class="value">"testing"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"CACHE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"SESSION_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"array"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"QUEUE_DRIVER"</span> <span class="attribute">value</span>=<span class="value">"sync"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">env</span> <span class="attribute">name</span>=<span class="value">"DB_CONNECTION"</span> <span class="attribute">value</span>=<span class="value">"mysql"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">php</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>將 <code>DB_CONNECTION</code> 從 <code>mysql_testing</code> 改成 <code>mysql</code>，也就是我們想將測試直接跑在正式資料庫。</p>
<p><strong> 切換 phpunit.xml </strong><br><img src="/images/tdd/tdd-repository-testing-mysql/repo016.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; PHPUnit </em></strong></p>
<p>將 <code>Default configuration file</code> 改成剛剛建立的 <code>phpunit_acceptance.xml</code>。</p>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo017.png" alt=""></p>
<p>重新跑測試，目前的 <span class="label label-success">綠燈</span> 是跑在 <code>mysql</code> 這個資料庫連線。</p>
<h2 id="使用_CLI_方式執行_phpunit">使用 CLI 方式執行 phpunit</h2><hr>
<p>若你不習慣在 PhpStorm 內跑測試也沒關係，也可以使用 CLI 方式執行 phpunit。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ vendor/bin/phpunit -c phpunit_acceptance.xml</span><br></pre></td></tr></table></figure>
<p><img src="/images/tdd/tdd-repository-testing-mysql/repo018.png" alt=""></p>
<p>只要加上 <code>-c</code> 參數，並指定你要使用的 <code>phpunit_acceptance.xml</code> 即可。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於單元測試的資料量很少，其實直接跑在 MySQL 的速度也是很快，而且也不用擔心 SQLite 與 MySQL 的差異。</li>
<li>若直接跑在 MySQL，則建議不必每次在 <code>setup()</code> 去跑 migration，直接先跑 migration，然後搭配 <code>DatabaseTransactions</code> trait。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52RepositoryTestingMySQL_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[直接使用 MySQL 與 Test Factory Generator 測試 Repository]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="MySQL" scheme="http://oomusou.io/tags/MySQL/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討依賴注入]]></title>
    <link href="http://oomusou.io/tdd/tdd-di/"/>
    <id>http://oomusou.io/tdd/tdd-di/</id>
    <published>2016-04-16T12:23:43.000Z</published>
    <updated>2016-04-26T04:12:01.000Z</updated>
    <content type="html"><![CDATA[<p>依賴反轉原則是 SOLID 中最難理解的原則，而依賴注入則是單元測試的基石，本文將從測試角度探討依賴反轉與依賴注入，並將 Laravel 的 service container、constructor injection 與 method injection 應用在實務上。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.29</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>假設目前有 3 家貨運公司，每家公司的計費方式不同，使用者可以動態選擇不同的貨運公司，將一步步的重構成依賴注入方式。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>本範例靈感來自於91哥的<a href="https://dotblogs.com.tw/hatelove/archive/2013/01/02/learning-tdd-in-30-days-day17-refactoring-with-strategy-pattern.aspx" target="_blank" rel="external">30天快速上手TDD Day 17:Refactoring - Stagegy Pattern</a></span></span></span></p>
<h2 id="傳統寫法">傳統寫法</h2><hr>
<p>傳統我們會使用 <code>if else</code> 與 <code>new</code> 來建立物件。</p>
<p><strong>BlackCat.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/4862ffd79ac52e74a245010760662932839fb68d" target="_blank" rel="external">新增BlackCat.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>黑貓的計費方式。</p>
<p><strong>Hsinchu.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/2a7fe354bf337b7b74332c6cafb9dd1a4c02fce4" target="_blank" rel="external">新增Hsinchu.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Hsinchu.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hsinchu</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新竹貨運的計費方式。</p>
<p><strong>PostOffice.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/fa4b0f8cfc82f554b5f671cad2ff467e7e8c16a9" target="_blank" rel="external">新增PostOffice.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostOffice.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostOffice</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">70</span> + <span class="variable">$weight</span> * <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>郵局的計費方式。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/038eecfcabbcb867a6505456cfba78587d1c26bc" target="_blank" rel="external">新增ShippingService.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$companyName</span>, <span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$companyName</span> == <span class="string">'BlackCat'</span>) &#123;</span><br><span class="line">            <span class="variable">$blackCat</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$blackCat</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> (<span class="variable">$companyName</span> == <span class="string">'Hsinchu'</span>) &#123;</span><br><span class="line">            <span class="variable">$hsinchu</span> = <span class="keyword">new</span> Hsinchu();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$hsinchu</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> (<span class="variable">$companyName</span> == <span class="string">'PostOffice'</span>) &#123;</span><br><span class="line">            <span class="variable">$postOffice</span> = <span class="keyword">new</span> PostOffice();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$postOffice</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'No company exception'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>calculateFee()</code> 傳入 2 個參數 : <code>$companyName</code> 與 <code>$weight</code>。</p>
<p>使用者可自行由 <code>$companyName</code> 挑選貨運公司，並傳入 <code>$weight</code> 計算運費。</p>
<p>使用 <code>if else</code> 判斷 <code>$companyName</code> 字串，並 <code>new</code>出相對應物件，這是初學者學習物件導向時的寫法。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/cd5306243c8416ada62beb8fc3540cf20e79d55e" target="_blank" rel="external">將if else重構成switch</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> string $companyName</span><br><span class="line"> * <span class="doctag">@param</span> int $weight</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> * <span class="doctag">@throws</span> Exception</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$companyName</span>, <span class="variable">$weight</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">            <span class="variable">$blackCat</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$blackCat</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">            <span class="variable">$hsinchu</span> = <span class="keyword">new</span> Hsinchu();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$hsinchu</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">            <span class="variable">$postOffice</span> = <span class="keyword">new</span> PostOffice();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$postOffice</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'No company exception'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>將 <code>if else</code> 重構成 <code>switch</code>，可稍微改善程式碼的可讀性。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>將 <code>if else</code> 重構成 <code>switch</code>，請參考<a href="/phpstorm/phpstorm-if-switch/">如何在PhpStorm將if else重構成switch case?</a></span></span></span></p>
<h2 id="使用_Interface">使用 Interface</h2><hr>
<p>目前的寫法，執行上沒有什麼問題，若以 TDD 開發，我們將得到第一個 <span class="label label-success">綠燈</span>。</p>
<p>我們將繼續重構成更好的程式。</p>
<p>目前我們是實際去 <code>new Blackcat()</code>、<code>new Hsinchu()</code> 與 <code>new PostOffice()</code>，也就是說<code>ShippingService</code>將直接<strong>相依</strong>於<code>BlackCat</code>、<code>Hshinchu</code> 與 <code>PostOffice</code> 3 個 class。</p>
<p>物件導向就是希望達到<strong>高內聚，低耦合</strong>的設計。所謂的低耦合，就是希望能減少<strong>相依</strong>於外部的 class 的數量。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  何謂<strong>相依</strong>?</div>
<p>簡單的說，有 2 種寫法會產生相依 :</p>
<ol>
<li>去 new 其他 class。</li>
<li>去 extends 其他 class。</li>
</ol>
<p>由於 PHP 不用編譯，所以可能較無法體會相依的嚴重性，但若是需要編譯的程式語言，若你相依的 class 的 property 或 method 改變，可能導致你的程式無法編譯成功，也就是你必須配合相依的 class 做相對應的修改才能通過編譯，因此我們希望降低對其他 class 的相依程度與數量。</p>
<p>GoF 四人幫在設計模式曾說 : <strong>Program to an Interface, not an Implementation</strong>。也就是程式應該只相依於 interface，而不是相依於實際 class，目的就是要藉由 interface，降低對於實際 class 的相依程度。</p>
<p>若我們能將 <code>BlackCat</code>、 <code>Hshinchu</code> 與 <code>PostOffice</code> 3 個 class抽象化為 1 個 interface，則 <code>ShippingService</code>將從相依 3 個 class，降低成只相依於 1 個interface，將大大降低 <code>ShippingService</code> 與其他 class 的相依程度。</p>
<p>若以編譯的角度，由於 <code>ShippingService</code> 只相依於 interface，因此 <code>BlackCat</code>、 <code>Hshinchu</code> 與 <code>PostOffice</code> 做任何修改都不會影響我 <code>ShippingService</code> 的編譯。</p>
<p><strong>LogisticsInterface.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/c627e8ad2e73df8f0631521eb8d66f416013c83d" target="_blank" rel="external">抽取出LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsInterface.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </p>
<p>從 <code>BlackCat</code> 抽取出 <code>LogisticsInterface</code>，將 <code>BlackCat</code>、 <code>Hsinchu</code> 與 <code>PostOffice</code> 抽象化成 <code>LogisticsInterface</code>。</p>
<p><strong>BlackCat.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/7e611c3948d68b6e5226ea922b6748f97518ea6f" target="_blank" rel="external">BlackCat實現LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span> * <span class="variable">$weight</span> * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>BlackCat</code> 實現 <code>LogisticsInterface</code>。</p>
<p><strong>Hsinchu.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/dcf284c298cf6c9ac1b0615ed9cadcc0ef22c36b" target="_blank" rel="external">Hsinchu實現LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/Hsinchu.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hsinchu</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">80</span> * <span class="variable">$weight</span> * <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Hsinchu</code> 實現 <code>LogisticsInterface</code>。</p>
<p><strong>PostOffice.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/c627e8ad2e73df8f0631521eb8d66f416013c83d" target="_blank" rel="external">PostOffice實現LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostOffice.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostOffice</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">70</span> * <span class="variable">$weight</span> * <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>PostOffice</code> 實現 <code>LogisticsInterface</code>。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/24656ced564f230198248350c25676ca57e98c2c" target="_blank" rel="external">ShippingService只相依於LogisticsInterface</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$companyName</span>, <span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> Hsinchu();</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> PostOffice();</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'No company exception'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>$logistics</code> 的型別都是 <code>LogisticsInterface</code>，目前 PHP 7 對於變數還沒有支援 type hint，所以程式碼看起來差異不大，但藉由 PHPDoc，在 PhpStorm 打 <code>$logistics-&gt;</code>，已經可以得到語法提示: <code>calculateFee()</code>，表示 PhpStorm 已經知道<code>BlackCat</code>、 <code>Hsinchu</code> 與 <code>PostOffice</code> 都是 <code>LogisticsInterface</code> 型別的物件，也就是對於 <code>ShippingService</code> 來說，<code>BlackCat</code>、<code>Hsinchu</code> 與 <code>PostOffice</code> 都已經抽象化成 <code>LogisticsInterface</code>。</p>
<h2 id="工廠模式">工廠模式</h2><hr>
<p>雖然已經將 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>PostOffice</code> 抽象化成 <code>LogisticsInterface</code>，但是在 <code>ShoppingService</code> 中，仍看到 <code>new Blackcat()</code>、 <code>new Hsinchu()</code> 與 <code>new PostOffice()</code>，對於 <code>ShoppingService</code> 而言，我們看到了 3 個問題 :</p>
<ol>
<li><strong>違反單一職責原則</strong> : <code>calculateFee()</code> 原本應該只負責計算運費，現在卻還要負責建立貨運公司物件。</li>
<li><strong>違反開放封閉原則</strong> : 將來若有新的貨運公司供使用者選擇，勢必修改 <code>switch</code>。</li>
<li><strong>實質相依數為 3</strong> : 雖然已經重構出 interface，但實際上卻還必須 <code>new</code> 3 個class。</li>
</ol>
<p>比較好的方式是將 <code>new</code> 封裝在 <code>LogisticsFactory</code> 中。</p>
<p><strong>LogisticsFactory.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/9da99ca17a25ba8c65d852007ebc34a4558f8306" target="_blank" rel="external">新增LogisticsFactory.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/LogisticsFactory.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticsFactory</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> LogisticsInterface</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(string <span class="variable">$companyName</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> BlackCat();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Hsinchu();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PostOffice();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'No company exception'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Simple Factory模式使用了<code>static create()</code>，專門負責建立貨運公司物件:</p>
<ol>
<li>專門負責建立貨運公司的邏輯，符合單一職責原則。</li>
</ol>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>14</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">14</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/eb7a53f55a3a4bd625ce2f0b65b436dd6073b05f" target="_blank" rel="external">ShippingService只相依於LogisticsFactory</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$companyName</span>, <span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$logistics</span> = LogisticsFactory::create(<span class="variable">$companyName</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>將來有新的貨運公司，也只要統一修改<code>LogisticsFactory</code>即可，將其變化封裝在<code>LogisticsFactory</code>，對於 <code>ShoppingService</code>開放封閉。</li>
<li><code>ShoppingService</code> 從相依於 3 個 class 降低成僅相依於 <code>LogisticsInterface</code> 與 <code>LogisticsFactory</code>，實質相依數降為 2。</li>
</ol>
<h2 id="程式的可測試性">程式的可測試性</h2><hr>
<p>符合 spec 的程式，並不代表是好的程式，一個好的程式還要符合 5 個要求 :</p>
<ol>
<li><strong> 容易維護 </strong>。</li>
<li><strong> 容易新增功能 </strong>。</li>
<li><strong> 容易重複使用 </strong>。</li>
<li><strong> 容易上Git，不易與其他人衝突 </strong>。</li>
<li><strong> 容易寫測試 </strong>。</li>
</ol>
<p>使用 interface + 工廠模式，已經達到以上前4點要求，算是很棒的程式。</p>
<p>根據單元測試的定義 :<span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>單元測試的定義來自於<a href="https://dotblogs.com.tw/hatelove/archive/2012/11/13/learning-tdd-in-30-days-day5-how-to-isolate-dependency-the-basic-testability.aspx" target="_blank" rel="external">30天快速上手TDD Day 5:如何隔離相依性 - 基本的可測試性</a></span></span></span><br><div class="alert alert-info"><i class="fa fa-info"></i>  單元測試必須與外部環境、類別、資源、服務獨立，而不能直接相依。這樣才是單純的測試目標物件本身的邏輯是否符合預期。</div></p>
<p>若要對 <code>ShippingService</code> 進行單元測試，勢必將 <code>BlackCat</code>、 <code>Hsinchu</code> 與 <code>PostOffice</code> 加以抽換隔離，但使用了工廠模式之後，<code>ShippingService</code> 依然直接相依了 <code>LogisticsFactory</code>，而 <code>LogisticsFactory</code> 又直接相依 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>PostOffice</code>，當我們對 <code>ShippingService</code> 做單元測試時，由於無法對 <code>LogisticsFactory</code> 做抽換隔離，因此無法對<code>ShippingService</code> 做單元測試。</p>
<p>簡單的說，interface + 工廠模式，仍然無法達到可測試性的要求，我們必須繼續重構。</p>
<h2 id="依賴反轉">依賴反轉</h2><hr>
<p>為了可測試性，單元測試必須可決定待測物件的相依物件，如此才可由單元測試將待測物件的相依物件加以抽換隔離。</p>
<p>換句話說，我們不能讓待測物件直接相依其他 class，而應該由單元測試訂出 interface，讓待測物件僅能相依於interface，而實際相依的物件可由單元測試來決定，如此我們才能對相依物件加以抽換隔離。</p>
<p>這也就是所謂的依賴反轉原則 :<br><div class="alert alert-info"><i class="fa fa-info"></i>  高階模組不該依賴低階模組，兩者都應該要依賴其抽象。</div></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  抽象不要依賴細節，細節要依賴抽象。</div>
<p>好像越講越抽象 XDD。</p>
<p>其中<strong>相依</strong>與<strong>依賴</strong>是相同的，只是翻譯用字的問題。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  何謂高階模組? 何謂低階模組?</div>
<p>高階與低階是相對的。</p>
<p>簡單的說:</p>
<ul>
<li>當A class 去 <code>new</code> B class，A 就是高階模組，B就是低階模組。 </li>
</ul>
<p>若以本例而言 :</p>
<ol>
<li><code>ShippingService</code> 相對於 <code>BlackCat</code>，<code>ShippingService</code> 是高階模組，<code>BlackCat</code> 是低階模組，</li>
<li>單元測試相對於 <code>ShippingService</code>，單元測試是高階模組，<code>ShippingService</code> 是低階模組。</li>
<li><code>ShippingController</code> 相對於 <code>ShippingService</code>，<code>ShippingController</code> 是高階模組，<code>ShippingService</code> 是低階模組。</li>
</ol>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  何謂抽象? 何謂細節?</div>
<ul>
<li>interface 為抽象, abstract class 為抽象。</li>
<li>class 為細節去 implement interface，class 為細節去 extends abstract class。</li>
</ul>
<p>若以本例而言 :</p>
<img src="/images/tdd/tdd-di/di000.svg" width="550">
<p>在沒有使用 interface 前 :</p>
<ul>
<li><code>ShippingService</code> 直接 <code>new BlackCat()</code>。</li>
<li><code>ShippingService</code> 直接相依於 <code>BlackCat</code>。</li>
<li>也就是高階模組依賴低階模組。</li>
</ul>
<img src="/images/tdd/tdd-di/di001.svg" width="550">
<p>使用了 interface 之後 : </p>
<ul>
<li><code>ShippingService</code> 沒有相依於 <code>BlackCat</code>，也就是高階模組沒有依賴於低階模組。</li>
<li><code>ShippingService</code> 改成相依於 <code>LogisticsInterface</code>，也就是高階模組依賴其抽象(因為 <code>new</code> 而相依)。</li>
<li><code>BlackCat</code> 改成相依於 <code>LogisticsInterface</code>，也就是低階模組也依賴其抽象(因為 <code>implements</code> 而相依)。</li>
<li>也就是目前高階模組與低階模組都改成依賴其抽象。</li>
<li>高階模組<code>ShippingService</code> 原本依賴的是低階模組 <code>BlackCat</code> 的 <code>calculateFee()</code>，有了 interface 之後，變成<strong>反過來</strong>低階模組 <code>BlackCat</code> 要依賴高階模組所定義 <code>LogisticsInterface</code> 的 <code>calculateFee()</code>，所以稱為<strong>依賴反轉</strong>。</li>
</ul>
<p>更簡單的說，依賴反轉就是要你使用 interface 來寫程式，而不要直接相依於 class。</p>
<p>我們之前已經重構出 <code>LogisticsInterface</code>，事實上已經符合依賴反轉。</p>
<h2 id="依賴注入">依賴注入</h2><hr>
<p>有了依賴反轉還不足以達成可測試性，依賴反轉只確保了待測物件的相依物件相依於 interface。</p>
<p>既然相依物件相依於 interface，若單元測試可以產生該 interface 的物件，並加以注入，就可以將相依物件加以抽換隔離，這就是依賴注入。</p>
<h2 id="Constructor_Injection">Constructor Injection</h2><hr>
<p><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/b3b66a2cbbe3276d833aa0c655420938da465ec3" target="_blank" rel="external">ShippingService重構成constructor injection</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> LogisticsInterface */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$logistics</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * ShippingService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(LogisticsInterface <span class="variable">$logistics</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;logistics = <span class="variable">$logistics</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;logistics-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>12行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> LogisticsInterface */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$logistics</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * ShippingService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(LogisticsInterface <span class="variable">$logistics</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;logistics = <span class="variable">$logistics</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原本相依的 <code>LogisticsInterface</code> 型別的物件，改由 constructor 注入，藉由 PHP 的 type hint，描述要注入的物件型別為 <code>LogisticsInterface</code>。</p>
<p>原本使用 interface + 工廠模式，實質相依數為 2，改用 constructor injection 之後，連 <code>LogisticsFactory</code>都不需要了，僅相依於 <code>LogisticsInterface</code>，實質相依數降為 1。</p>
<p>17行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@param</span> int $weight</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(<span class="variable">$weight</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;logistics-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>將原本的 <code>logistics</code> 物件改成 field。</p>
<h2 id="Service_Container">Service Container</h2><hr>
<p>我們目前已經有了依賴注入，對於可測試性只剩下最後一哩路，若我們能將 mock 出的假物件，透過依賴注入取代掉原來的相依物件，就能將相依物件加以抽換隔離，達成隔離測試的要求，service container 就是要幫我們將相依物件抽換隔離。</p>
<p>Laravel 4 稱為 IoC container，Laravel 5 稱為 service container。<span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>以下句子來自於<a href="https://dotblogs.com.tw/hatelove/archive/2012/11/13/learning-tdd-in-30-days-day5-how-to-isolate-dependency-the-basic-testability.aspx" target="_blank" rel="external">30天快速上手TDD Day 5:如何隔離相依性 - 基本的可測試性</a></span></span></span>事實上 IoC (Inversion of Conttrol) 與 DI (Dependency Inversion) 講的是同一件事情，也就是由單元測試決定待測物件的相依物件。</p>
<p><strong> 單元測試 </strong><br><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/21260f19a09380370f13c26934107ce954d5114c" target="_blank" rel="external">新增ShippingService的單元測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓單元測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mock</span> = Mockery::mock(BlackCat::class);</span><br><span class="line">        <span class="variable">$mock</span>-&gt;shouldReceive(<span class="string">'calculateFee'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;withAnyArgs()</span><br><span class="line">            -&gt;andReturn(<span class="variable">$expected</span>);</span><br><span class="line"></span><br><span class="line">        App::instance(LogisticsInterface::class, <span class="variable">$mock</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>14行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mock</span> = Mockery::mock(BlackCat::class);</span><br><span class="line"><span class="variable">$mock</span>-&gt;shouldReceive(<span class="string">'calculateFee'</span>)</span><br><span class="line">    -&gt;once()</span><br><span class="line">    -&gt;withAnyArgs()</span><br><span class="line">    -&gt;andReturn(<span class="variable">$expected</span>);</span><br></pre></td></tr></table></figure></p>
<p>因為單元測試，我們只想測試 <code>ShippingService</code>，因此想將其相依的 <code>LogisticsInterface</code> 物件抽換隔離，因此利用 <code>Mockery</code> 根據 <code>BlackCat</code>建立假物件 <code>$mock</code>，並定義 <code>calculateFee()</code> 回傳的期望值為 <code>$expected</code>。</p>
<p><code>once()</code> 為預期 <code>calculateFee()</code>會被執行一次，且只會被執行一次，若完全沒被執行，或執行超過一次，PHPUnit 會顯示 <span class="label label-danger">紅燈</span>。</p>
<p><code>withAngArgs()</code> 為不特別在乎 <code>calculateFee()</code> 的參數型別與個數，一般來說，單元測試在乎的是被 mock method 是否被正確執行，以及其回傳值是否如預期，至於參數則不太重要。</p>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App::instance(LogisticsInterface::class, <span class="variable">$mock</span>);</span><br></pre></td></tr></table></figure></p>
<p>mock 物件已經建立好，接著要告訴 service container，當 constructor injection 的 type hint 遇到 <code>LogisticsInterface</code>時，該使用我們剛建立的 <code>$mock</code> 物件抽換隔離，而不是原來的相依物件。</p>
<p><code>App::instance()</code> 用到的地方不多，一般就是用在需要 mock 時。</p>
<p>22行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$target</span> = App::make(ShippingService::class);</span><br></pre></td></tr></table></figure></p>
<p>當 mock 與 service container 都準備好時，接著要建立待測物件準備測試，這裡不能再使用 <code>new</code> 建立物件，而必須使用 service container 提供的 <code>App::make()</code> 來建立物件，因為我們就是希望靠 service container 幫我們將 mock 物件抽換隔離原來的相依物件，因此必須改用 service container 提供的 <code>App::make()</code>。</p>
<p><strong> 整合測試 </strong><br><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/f736ffff42969a5e958b3d9d5340cb6acc8f5973" target="_blank" rel="external">新增ShippingService的整合測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓整合測試<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">    <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    App::bind(LogisticsInterface::class, BlackCat::class);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>當執行整合測試時，我們會希望實際執行相依物件的功能，而不再使用 mock 將其相依物件抽換隔離。</p>
<p>第8行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">App::bind(LogisticsInterface::class, BlackCat::class);</span><br></pre></td></tr></table></figure></p>
<p>當 constructor injection 配合 type hint 時，若是 class，Laravel 的 service container 會自動幫我們注入其相依物件，但若 type hint 為 interface 時，因為可能有很多 class implements 該 interface，所以必須先使用 <code>App::bind()</code> 告訴 service container，當 type hint 遇到 <code>LogisticsInterface</code> 時，實際上要注入的是 <code>BlackCat</code> 物件。</p>
<p>10行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$target</span> = App::make(ShippingService::class);</span><br></pre></td></tr></table></figure></p>
<p>當 <code>App::bind()</code> 完成後，就可以使用 <code>App::make()</code> 建立待測物件，service container 也會根據剛剛 <code>App::bind()</code> 的設定，自動依賴注入 <code>BlackCat</code> 物件。</p>
<h2 id="Method_Injection">Method Injection</h2><hr>
<p>Laravel 4 提出了 constructor injection 實現了依賴注入，而 Laravel 5 更進一步提出了 method injection。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  有 constructor injection 不就已經可測試了嗎? 為什麼還需要 method injection 呢?</div>
<p>由於 Laravel 4 只有 constructor injection，所以只要 class 要實現依賴注入，唯一的管道就是 constructor injection，若有些相依物件只有單一 method 使用一次，也必須使用 constructor injection，這將導致最後 constructor 的參數爆炸而難以維護。</p>
<p>對於一些只有單一 method 使用的相依物件，若能只在 method 的參數加上 type hint，就可自動依賴注入，而不需要動用 constructor，那就太好了，這就是 method injection。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(StoreBlogPostRequest <span class="variable">$request</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// The incoming request is valid...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如大家熟悉的form request，就是使用 method injection，相依的 <code>StoreBlogPostRequest</code> 物件並不是透過 constructor 注入，而是在 <code>store()</code> 注入。</p>
<p><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/be1a98426347564503a41e6c114d9c317f4491ac" target="_blank" rel="external">ShippingService重構成method injection</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line">     * <span class="doctag">@param</span> int $weight</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(LogisticsInterface <span class="variable">$logistics</span>, <span class="variable">$weight</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>重構成 method injection 後，就不必再使用 constructor 與 field，程式更加精簡。<span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>要注入的物件參數位置並不一定要排第一個，可以依實際需求調整。</span></span></span></p>
<p>第 1 個參數為我們要注入的 <code>LogisticsInterface</code> 物件，第 2 個參數為我們原本要傳的 <code>$weight</code> 參數。</p>
<p><strong> 單元測試 </strong><br><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>22</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">22</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/ebb25ee69a994070c4781415ebe8663d994b64e7" target="_blank" rel="external">ShippingService method injection的單元測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓單元測試<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">        <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mock</span> = Mockery::mock(BlackCat::class);</span><br><span class="line">        <span class="variable">$mock</span>-&gt;shouldReceive(<span class="string">'calculateFee'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;withAnyArgs()</span><br><span class="line">            -&gt;andReturn(<span class="variable">$expected</span>);</span><br><span class="line"></span><br><span class="line">        App::instance(LogisticsInterface::class, <span class="variable">$mock</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>20行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">    <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>之前 mock 的部分，與 constructor injection 相同，就不再解釋。</p>
<p>關鍵在於 <code>App::call()</code>，這是一個在 Laravel 官方文件沒有介紹的 method，但 Laravel 內部卻到處在用。<span class="margin-note-marker"><sup>23</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">23</span>method injection 的介紹，始見於 Matt Stauffer Blog 的 <a href="https://mattstauffer.co/blog/laravel-5.0-method-injection" target="_blank" rel="external">Laravel 5.0 - Method Injection</a></span></span></span></p>
<p>之前我們使用 constructor injection，就要搭配 <code>App::make()</code> 才能自動依賴注入。</p>
<p>現在我們使用 method injection，就要搭配 <code>App::call()</code> 才能自動依賴注入。</p>
<p>第 1 個參數要傳的字串，是 class 完整名稱，加上 <code>@</code> 與 method名稱。</p>
<p>第 2 個參數要傳的是陣列，也就是我們自己要傳的參數，其中參數名稱為 key，參數值為 value。</p>
<p><strong> 整合測試 </strong><br><strong> ShippingService.php </strong><span class="margin-note-marker"><sup>24</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">24</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/57fc7d2e6de9e52a070c327866d195c272f29ee3" target="_blank" rel="external">新增ShippingService method injection的整合測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Services/ShippingServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓整合測試<span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** arrange */</span></span><br><span class="line">    <span class="variable">$expected</span> = <span class="number">110</span>;</span><br><span class="line">    <span class="variable">$weight</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    App::bind(LogisticsInterface::class, BlackCat::class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** act */</span></span><br><span class="line">    <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">        <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** assert */</span></span><br><span class="line">    <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>10行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">    <span class="string">'weight'</span> =&gt; <span class="variable">$weight</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>關鍵一樣是使用 <code>App::call()</code>。</p>
<div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>  為什麼只能在 controller 使用 method injection，而無法在自己的 presenter、service 或 repository 使用 method injection?</div>
<p>當初學習 method injection時，我也非常興奮，總算可以解決 Laravel 4 的 constructor 參數爆炸的問題，但發現只能用在 controller，但無法用在自己的 presenter、service 或 repository，一直學習到 <code>App::call()</code> 時，問題才迎刃而解。</p>
<p>因為 Laravel 內部使用 <code>App::call()</code> 呼叫 controller 的 method，因此你可以在 controller 無痛使用 method injection，但若你自己的 presenter、service 或 repository 要使用 method injection，就必須在 controller 搭配 <code>App::call()</code>，如此 service containter 才會幫你自動依賴注入相依物件。</p>
<h2 id="再談可測試性">再談可測試性</h2><hr>
<p>本文從頭到尾，都是以<strong>可測試性</strong>的角度去談依賴注入，而我個人也的確是在寫單元測試之後，才領悟依賴反轉與依賴注入的重要性。</p>
<p>若是不寫測試，是否就不需要依賴反轉與依賴注入呢?</p>
<p>之前曾經提到 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  IoC (Inversion of Conttrol) 與 DI (Dependency Inversion) 講的是同一件事情，也就是由單元測試決定待測物件的相依物件。</div>
<p>根據之前的經驗，我們可以發現待測物件的相依物件都是在測試的 <code>App::bind()</code> 所決定。</p>
<p>之前有提到所謂的高階模組與低階模組是相對的，單元測試相對於 service，單元測試是高階模組，而 service 是低階模組。</p>
<p>對照於實際狀況，controller 相對於 service，controller是高階模組，而 service 是低階模組。</p>
<p>我們可以在單元測試以 <code>App::bind()</code> 決定 service 的相依物件，同樣的，我們也可以在 controller 以 <code>App::bind()</code> 去決定 service 的相依物件。</p>
<p>既然我們可以由 controller 去決定，去注入 service 的相依物件，我們就不再被底層綁死，不再依賴底層 service，而是由低階模組去依賴高階模組所制定的 interface，再由 controller 的 <code>App::bind()</code> 來決定低階模組的相依物件，這就是所謂的依賴反轉。</p>
<p>也就是說，若高層模組可以決定低階模組的相依物件，那整個設計的彈性與擴充性會非常好，因為需求都來自於人，而人所面對的是高階模組，而高階模組可以透過依賴注入去決定低階模組的相依物件，而不是被低階模組綁死，可彈性地依照需求而改變。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  若程式符合可測試性的要求，表示其具有低耦合的特性，也就是物件導向強調的高內聚，低耦合，因此程式將更容易維護，更容易新增功能，更容易重複使用，更容易上Git，不易與其他人衝突，也就是說我們可以將程式的可測試性，當成是否為好程式的指標之一。</div>
<h2 id="生活中的依賴反轉">生活中的依賴反轉</h2><hr>
<p>舉個生活上實際的例子，事實上硬體產業就大量使用依賴反轉。</p>
<p>比如電腦需要將畫面送到顯示器，系統廠對 design house 發出需求，此時系統廠相當於高階模組，而 design house 相當於低階模組。</p>
<p>Design house 當然可以設計出 IC 符合系統廠需求，但由於系統廠沒有規定任何傳輸介面規格，只提出顯示需求，因此 design house 可以使用自己設計的專屬傳輸介面，系統廠的電路板只要符合 design house 的專屬傳輸介面規格，就可以將電腦畫面傳送到顯示器。</p>
<p>這樣雖然可以達成需求，但有幾個問題：</p>
<ol>
<li>傳輸介面由 design house 規定，只要 design house 傳輸介面更改，系統廠的電路板就得跟著修改。</li>
<li>Design house 的專屬傳輸介面，需要搭該公司的控制 IC，因此系統廠還被綁死要使用該 design house 的控制 IC。</li>
<li>由於使用專屬傳輸介面，因此系統廠無法使用替代料，只能乖乖使用該 design house 的 IC，沒有議價空間，且備料時間也被綁死。</li>
</ol>
<p>這就是典型的高階模組依賴低階模組，也就是系統廠被 design house 綁死了。</p>
<p>所以系統廠很聰明，會聯絡各大系統廠一起制定傳輸介面規格，如VGA、HDMI、Display Port…等，如此 deisgn house 就得乖乖的依照系統廠制定的傳輸介面規格來設計 IC，這樣系統廠就不再被單一 design house 綁死，可以自行選擇控制 IC，還可以找替代料，增加議價空間，備料時間也更加彈性，這就是典型的低階模組反過來依賴高階模組所制定的規格，也就是依賴反轉。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Interface + 工廠模式無法達成可測試性的要求，因此才有了依賴注入與 service container。</li>
<li>若很多 method 都使用相同相依物件，可使用 constructor injection，若只有單一 method 使用的相依物件，建議改用 method injection。</li>
<li>Method Injection 必須搭配 <code>App::call()</code>，除了自動依賴注入相依物件外，也可以自行傳入其他參數。</li>
<li>可測試性與物件導向是相通的，我們可以藉由程式的可測試性，當成是否為好程式的指標之一。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52DI_demo" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[從測試角度探討依賴注入]]>
    
    </summary>
    
      <category term="LaraDiner" scheme="http://oomusou.io/tags/LaraDiner/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Mockery" scheme="http://oomusou.io/tags/Mockery/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何從 Route 傳參數給 Controller?]]></title>
    <link href="http://oomusou.io/laravel/laravel-route-pass-parameter-to-controller/"/>
    <id>http://oomusou.io/laravel/laravel-route-pass-parameter-to-controller/</id>
    <published>2016-04-12T12:23:43.000Z</published>
    <updated>2016-04-12T23:02:29.000Z</updated>
    <content type="html"><![CDATA[<p>實務上我們可能會遇到資料庫邏輯與商業邏輯完全相同，只有顯示邏輯不同，也就是 controller、service、repository 完全相同，只有 route 與 view 不相同，我們該如何在使用同一個 controller 的前提下，實現此需求呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.29</p>
<h2 id="測試案例">測試案例</h2><hr>
<p>我們以 TDD 方式來完成此需求。</p>
<ol>
<li>URI 為 <code>/welcome</code> 時，使用 <code>welcome.blade.php</code>。</li>
<li>URI 為 <code>/helloworld</code> 時，使用 <code>helloworld.blade.php</code>。</li>
</ol>
<h2 id="第一個測試">第一個測試</h2><hr>
<p><strong>HomeControllerTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/b50f496326ff766b8e36694e365e2f00d1083a0d" target="_blank" rel="external">新增HomeControllerTest的第一個測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/HomeControllerTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeControllerTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">welcomeURI</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/welcome'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Laravel 5'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們希望當URI為 <code>/welcome</code> 時，期望能在 view 看到 <code>Laravel 5</code> 字串。</p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route000.png" alt=""></p>
<p>馬上跑測試，我們得到第1個 <span class="label label-danger">紅燈</span>。</p>
<p>錯誤訊息為 <code>A request [http://localhost/welcome] failed</code>。</p>
<p>因為我們還沒有建立 route。</p>
<p><strong>routes.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/620423d81d0cb9abd0637a29c8cf288b8c9a5980" target="_blank" rel="external">修改routes.php，增加/welcome</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/welcome'</span>, [</span><br><span class="line">    <span class="string">'as'</span>   =&gt; <span class="string">'Welcome'</span>,</span><br><span class="line">    <span class="string">'uses'</span> =&gt; <span class="string">'HomeController@index'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route001.png" alt=""></p>
<p>補上 route 後，繼續跑測試。</p>
<p>我們得到第2個 <span class="label label-danger">紅燈</span>。</p>
<p>錯誤訊息為 <code>Class App\Http\Controllers\HomeController does not exist</code>。</p>
<p>因為我們還沒建立 <code>HomeController</code>。</p>
<p><strong>HomeController.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/98d5e4d48f15575d577778cfdf1df4aec772da45" target="_blank" rel="external">新增HomeController.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/HomeController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'Welcome'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route002.png" alt=""></p>
<p>新增 <code>HomeController</code> 後，繼續跑測試。</p>
<p>我們得到第1個 <span class="label label-success">綠燈</span>。</p>
<h2 id="第二個測試">第二個測試</h2><hr>
<p><strong>HomeControllerTest.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/20b989975ec1c389fe167fbccd9fad3e95785adf" target="_blank" rel="external">新增HomeControllerTest的第二個測試</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/HomeControllerTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeControllerTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">welcomeURI</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/welcome'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Laravel 5'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">helloWorld</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/helloworld'</span>)</span><br><span class="line">            -&gt;see(<span class="string">'Hello World'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route003.png" alt=""></p>
<p>馬上跑測試，我們得到第1個 <span class="label label-danger">紅燈</span>。</p>
<p>錯誤訊息為 <code>A request [http://localhost/helloworld] failed</code>。</p>
<p>因為我們還沒有建立 route。</p>
<p><strong>routes.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/96682203b8171694758fdeccad1e39384f17602e" target="_blank" rel="external">修改routes.php，增加/helloworld</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">HomeController</span>;</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/welcome'</span>, [</span><br><span class="line">    <span class="string">'as'</span> =&gt; <span class="string">'Welcome'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> App::make(HomeController::class)-&gt;index(<span class="string">'welcome'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/helloworld'</span>, [</span><br><span class="line">    <span class="string">'as'</span> =&gt; <span class="string">'HelloWorld'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> App::make(HomeController::class)-&gt;index(<span class="string">'helloworld'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>修改 routes 時，我們面臨了一個挑戰，需求為 route 與 view 不同，但 controller 相同，因此勢必使用同一個 <code>HomeController@index</code>。</p>
<p>也就是若我們可以將 view 當成參數，從 route 傳給 <code>HomeController@index</code>，就能達成我們的需求。</p>
<p>我們將陣列的 key 由 <code>uses</code> 改成 closure ，利用<code>App::make()</code>自己建立 <code>HomeController</code>物件，並將 view 為 <code>index()</code> 的參數傳入。</p>
<p><strong>HomeController.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RoutePassParameterToController/commit/329a5de62f885e34d0f1fa256fd8a59ca172317f" target="_blank" rel="external">修改HomeController.php，新增$viewName參數</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/HomeController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(<span class="variable">$viewName</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="variable">$viewName</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於 <code>routes.php</code> 將 view的名稱傳入 <code>HomeController@index</code>，所以必須重構符合 <code>routes.php</code>的要求。</p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route004.png" alt=""></p>
<p>重構 <code>HomeController.php</code>後，繼續跑測試。</p>
<p>我們得到第2個 <span class="label label-danger">紅燈</span>。</p>
<p>錯誤訊息為 <code>View [HelloWorld] not found</code>。</p>
<p>因為我們還沒建立 <code>helloworld.blade.php</code>。</p>
<p><img src="/images/laravel/laravel-route-pass-parameter-to-controller/route005.png" alt=""></p>
<p>新增<code>helloworld.blade.php</code>後，繼續跑測試。</p>
<p>我們得到2個 <span class="label label-success">綠燈</span>，兩個測試都通過了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>我們也可以自行由 <code>routes.php</code> 去建立 <code>controller</code> 物件，只是因為 Laravel 內部大量使用依賴注入，所以你無法自行使用 <code>new</code> 去建立，但透過 <code>App::make()</code> 與 service container，我們就可以再次掌握 controller 物件，因此可以透過 route 對 controller 傳參數。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的<a href="https://github.com/oomusou/Laravel52RoutePassParameterToController" target="_blank" rel="external">GitHub</a>上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[利用 Service Container 從 Route 將參數傳給 Controller]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Eloquent 建立一個含 or 的 where 條件式?]]></title>
    <link href="http://oomusou.io/laravel/eloquent/eloquent-where-and-or/"/>
    <id>http://oomusou.io/laravel/eloquent/eloquent-where-and-or/</id>
    <published>2016-04-09T06:23:43.000Z</published>
    <updated>2016-06-12T02:29:04.000Z</updated>
    <content type="html"><![CDATA[<p>實務上在 Eloquent 下 where 條件式時，其中可能包含一個 or 條件判斷，這種需求該如何使用 Eloquent 的 query builder 建立呢?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.29</p>
<h2 id="Migration">Migration</h2><hr>
<p><strong>create_posts_table.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52WhereAndOr_demo-/commit/da5b80c3c51164b14bfa22d84de6ee2f65dfd918" target="_blank" rel="external">建立 Post model 與 migration</a></span></span></span><br><figure class="highlight php"><figcaption><span>database/migration/2016_04_10_143945_create_posts_table.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatePostsTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'title'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;string(<span class="string">'description'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;text(<span class="string">'content'</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;tinyInteger(<span class="string">'status'</span>); <span class="comment">// 0: normal, 1:draft, 2:deleted</span></span><br><span class="line">            <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Schema::drop(<span class="string">'posts'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Schema::create(<span class="string">'posts'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint <span class="variable">$table</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'title'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;string(<span class="string">'description'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;text(<span class="string">'content'</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;tinyInteger(<span class="string">'status'</span>); <span class="comment">// 0: normal, 1:draft, 2:deleted</span></span><br><span class="line">    <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>posts</code> table 有 <code>status</code> 欄位，其中 <code>0</code> 為正常文章，<code>1</code> 為草稿文章，<code>2</code> 為已刪除文章。</p>
<h2 id="SQL">SQL</h2><hr>
<p>需求為列出所有<strong>正常</strong>與<strong>草稿</strong>文章，若使用 SQL，我們會這樣寫 :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">SELECT * </span><br><span class="line"><span class="keyword">FROM</span> posts</span><br><span class="line"><span class="keyword">WHERE</span> (<span class="keyword">status</span> = <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">status</span> = <span class="number">1</span>)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="whereRaw()">whereRaw()</h2><hr>
<p>若使用 Eloquent，我們該怎麼寫呢?很多人會想到 <code>whereRaw()</code> :<br><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52WhereAndOr_demo-/commit/3942ca94b8d806af49d21bb0b3b02fc1acabc904" target="_blank" rel="external">PostRepository.php 使用 whereRaw()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUndeletedPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereRaw(<span class="string">'status = 0 or status = 1'</span>)</span><br><span class="line">            -&gt;get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>這樣寫當然可以，不過 <code>whereRaw()</code> 的程式可讀性較差，畢竟 <code>whereRaw()</code> 裡面是SQL字串。</p>
<h2 id="where()_+_closure">where() + closure</h2><hr>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52WhereAndOr_demo-/commit/ef961c682976ad4041e8a29b99e42b5b8e6363c9" target="_blank" rel="external">PostRepository.php 使用 where() + closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUndeletedPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::where(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$query</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$query</span>-&gt;where(<span class="string">'status'</span>, <span class="number">0</span>)</span><br><span class="line">                -&gt;orWhere(<span class="string">'status'</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;)-&gt;get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>比較好的寫法是將 or 部分，寫成 closure 傳入 <code>where()</code>，這比較符合物件導向與 Eloquent 風格。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>這 3 種寫法所產出的 SQL 都一樣，沒有執行效率問題。</li>
<li>實務上建議少使用 <code>DB::raw()</code> 或 <code>whereRaw()</code>，可讀性較差，盡量使用 Eloquent 寫法。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52WhereAndOr_demo-" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[不使用 whereRaw() 也可以寫得出來]]>
    
    </summary>
    
      <category term="Eloquent" scheme="http://oomusou.io/tags/Eloquent/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 SQLite 建立最簡單的 Laravel 開發環境?]]></title>
    <link href="http://oomusou.io/laravel/laravel-sqlite/"/>
    <id>http://oomusou.io/laravel/laravel-sqlite/</id>
    <published>2016-04-08T04:23:43.000Z</published>
    <updated>2016-06-12T02:37:07.000Z</updated>
    <content type="html"><![CDATA[<p>有很多方式可以建立 Laravel 開發環境，如 MAMP、Homestead，但事實上我最近最常使用的是 PHP 內建 HTTP server 與 SQLite，這是最簡單，也是最省電的開發環境。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.29<br>PhpStorm 2016.1</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~$ composer create-project laravel/laravel Laravel52SQLite_demo --prefer-dist</span><br></pre></td></tr></table></figure>
<h2 id="建立_SQLite_資料庫">建立 SQLite 資料庫</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ cd database&#10;oomusou@mac:~/MyProject/database$ touch database.sqlite</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/laravel-sqlite/sqlite000.png" alt=""></p>
<p>在 <code>database</code> 目錄下，建立空的 <code>database.sqlite</code> 資料庫。</p>
<h2 id="修改_-env">修改 .env</h2><hr>
<p><strong>.env</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52SQLite_demo/commit/657be187128dd469887385d48d2706bd957fc8b2" target="_blank" rel="external">修改 .env</a></span></span></span><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">APP_ENV=local</span><br><span class="line">APP_DEBUG=<span class="keyword">true</span></span><br><span class="line">APP_KEY=base64:Hv/GYT3Mz3PFWgj4cDnhGhHnkByhuNKUT9NKbGRIfu4=</span><br><span class="line">APP_URL=http:<span class="comment">//localhost</span></span><br><span class="line"></span><br><span class="line">DB_CONNECTION=sqlite</span><br><span class="line">DB_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DB_PORT=<span class="number">3306</span></span><br><span class="line"><span class="comment">#DB_DATABASE=homestead</span></span><br><span class="line">DB_USERNAME=homestead</span><br><span class="line">DB_PASSWORD=secret</span><br><span class="line"></span><br><span class="line">CACHE_DRIVER=file</span><br><span class="line">SESSION_DRIVER=file</span><br><span class="line">QUEUE_DRIVER=sync</span><br><span class="line"></span><br><span class="line">REDIS_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">REDIS_PASSWORD=<span class="keyword">null</span></span><br><span class="line">REDIS_PORT=<span class="number">6379</span></span><br><span class="line"></span><br><span class="line">MAIL_DRIVER=smtp</span><br><span class="line">MAIL_HOST=mailtrap.io</span><br><span class="line">MAIL_PORT=<span class="number">2525</span></span><br><span class="line">MAIL_USERNAME=<span class="keyword">null</span></span><br><span class="line">MAIL_PASSWORD=<span class="keyword">null</span></span><br><span class="line">MAIL_ENCRYPTION=<span class="keyword">null</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/images/laravel/laravel-sqlite/sqlite001.png" alt=""></p>
<p>第 6 行<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">DB_CONNECTION</span>=<span class="string">sqlite</span></span><br></pre></td></tr></table></figure></p>
<p>將資料庫連線改成 <code>sqlite</code>。</p>
<p>第 9 行<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#DB_DATABASE=homestead</span></span><br></pre></td></tr></table></figure></p>
<p>將 <code>DB_DATABASE</code> 前面加加上 <code>#</code>，將這行註解掉。</p>
<h2 id="執行_Migration">執行 Migration</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan migrate</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/laravel-sqlite/sqlite002.png" alt=""></p>
<p>若能成功 migration，表示 Laravel 已經抓到 SQLite，並將資料順利 migrate 進 <code>database.sqlite</code>。</p>
<h2 id="使用_PhpStorm_管理_SQLite">使用 PhpStorm 管理 SQLite</h2><hr>
<p>很多人猶豫該用什麼 GUI 工具管理 SQLite，其實 PhpStorm 已經內建 SQLite 管理工具。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite003.png" alt=""></p>
<p>按下右側的 <code>Database</code>，再按下上方的 <code>+</code>，選擇 <code>Data Source form Path</code>。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite004.png" alt=""></p>
<p>選擇剛剛建立的 <code>database.sqlite</code>。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite005.png" alt=""></p>
<p>選擇 <code>Sqlite (Xerial)</code>。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite006.png" alt=""></p>
<p>若 PhpStorm 還沒安裝過 SQLite driver，會顯示 <code>Download missing files</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>SQLite driver 只要安裝一次即可，以後其他專案都不需再安裝。</span></span></span></p>
<p>按 <code>Download</code> 下載 SQLite driver。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite007.png" alt=""></p>
<p>按 <code>Test Connection</code> 測試 SQLite 連線。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite008.png" alt=""></p>
<p>連線成功。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite009.png" alt=""></p>
<p>PhpStorm 的 Database 可以順利顯示預設的 <code>users</code> table。</p>
<h2 id="使用_PHP_內建的_HTTP_Server">使用 PHP 內建的 HTTP Server</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve</span><br></pre></td></tr></table></figure>
<p><img src="/images/laravel/laravel-sqlite/sqlite010.png" alt=""></p>
<p>執行 PHP 內建的 Http server。</p>
<p><img src="/images/laravel/laravel-sqlite/sqlite011.png" alt=""></p>
<p>成功執行 Laravel 在 <code>http://localhost:8000/</code></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm 內建支援 SQLite，要管理 SQLite 不用再找其他 GUI 管理工具。</li>
<li>使用 SQLite + <code>php artisan serve</code>方式，不需安裝 MAMP 或 Homestead，只要有安裝 PHP 即可開發 Laravel。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52SQLite_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[SQLite 不只可以用在測試，也可以用來開發專案]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="SQLite" scheme="http://oomusou.io/tags/SQLite/"/>
    
  </entry>
  
</feed>
