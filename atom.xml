<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2016-08-06T03:11:22.000Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何在 Azure 使用 Laravel + MySQL?]]></title>
    <link href="http://oomusou.io/azure/azure-phpstorm-mysql/"/>
    <id>http://oomusou.io/azure/azure-phpstorm-mysql/</id>
    <published>2016-08-02T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>Azure 是微軟的雲端平台，除了可以跑 PHP 與 Laravel 外，更可以跑我們喜愛的 MySQL 資料庫。本文將實際在 Azure 建立 MySQL 資料庫，透過 <code>.env</code> 的設定，讓 Laravel 可以連上 MySQL，並透過 PhpStorm 直接管理 Azure 雲端的 MySQL 資料庫。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>在 <a href="/azure/azure-phpstorm-deploy/">如何使用 PhpStorm 部署 Laravel 到 Azure</a> 一文中，我們已經可以順利在 Azure 跑 PHP 7.0 與 Laravel，唯一就是 MySQL 還沒連上，本文將以前一篇為基礎，繼續設定 MySQL 部分。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<p>請參考 <a href="/azure/azure-phpstorm-deploy/">如何使用 PhpStorm 部署 Laravel 到 Azure</a>，將本機的 Laravel 專案部署到 Azure。</p>
<h2 id="在_Azure_建立_MySQL_資料庫">在 Azure 建立 MySQL 資料庫</h2><hr>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql000.png" alt=""></p>
<p><strong><em>New -&gt; Data + Analytics</em></strong>，選擇 <code>See all</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql001.png" alt=""></p>
<p>在 <code>Data services</code> 下選擇 <code>More</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql002.png" alt=""></p>
<p>選擇 <code>ClearDB</code> 的 <code>MySQL Database</code>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql003.png" alt=""></p>
<p>按 <code>Create</code> 建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql004.png" alt=""></p>
<ul>
<li><strong>Database Name</strong> : 輸入資料庫名稱。</li>
<li><strong>Resource group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
<li><strong>Location</strong> : 選擇離我們最近的 <code>East Asia</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql005.png" alt=""></p>
<ul>
<li><strong>Pricing Tier</strong> : 選擇免費的 <code>Mercury</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql006.png" alt=""></p>
<ul>
<li><strong>Legal Terms</strong> : 確認是 <code>0.00 TWD/month</code>，按 <code>Purchase</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql007.png" alt=""></p>
<p>建議將 <code>Pin to dashboard</code> 打勾，方便我們管理。</p>
<p>按 <code>Create</code> 開始建立 MySQL 資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql008.png" alt=""></p>
<p>MySQL 資料庫建立完成，會顯示 <code>Healthy</code>。</p>
<h2 id="設定本機_-env">設定本機 .env</h2><hr>
<p>MySQL 資料庫建立完成後，馬上來測試資料庫是否建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql009.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Properties</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql010.png" alt=""></p>
<p>注意其 <code>HOSTNAME</code>、<code>PORT</code>、<code>USERNAME</code>、<code>PASSWORD</code> 與 <code>CONNECTION STRING</code> 欄位。</p>
<p>其中 <code>CONNECTION STRING</code> 的 <code>Database</code>，即為我們剛剛建立的資料庫。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql011.png" alt=""></p>
<p>將本機 <code>.env</code> 的設定與 Azure 的設定一致。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql012.png" alt=""></p>
<p>執行 <code>php artisan migrate</code>，若能成功執行 migration，表示 MySQL 資料庫已經順利建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql016.png" alt=""></p>
<p>執行 seeding，將預設資料寫入 Azure 的 MySQL 資料庫。</p>
<h2 id="設定_PhpStorm_Database">設定 PhpStorm Database</h2><hr>
<p>目前為止，我們已經將資料 seeding 到 Azure 的 MySQL，不過還無法確定資料是否真的已經寫入成功，因此要設定 PhpStorm 的 Database 工具連到 Azure 查看資料。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql013.png" alt=""></p>
<p>點選右側的 <code>Database</code>，按 <code>+</code> 新增資料庫連線。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql014.png" alt=""></p>
<p><strong><em>Data Source -&gt; MySQL</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql015.png" alt=""></p>
<p>將之前的 Azure 的 <code>Host</code>、<code>Database</code>、<code>User</code> 與 <code>Password</code> 設定填過來。</p>
<p>按 <code>Test Connection</code> 測試是否可連線成功。</p>
<p>若第一次在 PhpStorm 連接 MySQL，需安裝 MySQL 的 Java driver。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql017.png" alt=""></p>
<p>PhpStorm 的 Database 工具可以看到 Azure MySQL 上所有的 table，也能看到 <code>posts</code> 上剛剛 seeding 的三筆資料。</p>
<h2 id="設定_Azure_-env">設定 Azure .env</h2><p>資料已經上 Azure 的 MySQL了，不過在 Azure 上的 Laravel 還不認識我們剛剛建立的 MySQL 資料庫。</p>
<p>Laravel 雖然提供了 <code>.env</code>，可以設定些敏感資訊，如資料庫連線。但預設 <code>.gitignore</code> 有排除 <code>.env</code>，所以並沒有上 GitHub，因此也不會上 Azure。</p>
<p>我們須在 Azure 的 <code>Application settings</code> 設定資料庫連線資訊。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql019.png" alt=""></p>
<p>選擇我們的 Laravel Web App。</p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql020.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Application Settings</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql021.png" alt=""></p>
<p>建立 <code>DB_CONNECTION</code>、<code>DB_HOST</code>、<code>DB_DATABASE</code>、<code>DB_USERNAME</code> 與 <code>DB_PASSWORD</code> 這些 key，並將 <code>.env</code> 的這些值設定在這裡。</p>
<h2 id="在_Azure_執行_Laravel">在 Azure 執行 Laravel</h2><hr>
<p><img src="/images/azure/azure-phpstorm-mysql/mysql018.png" alt=""></p>
<p>Azure 上的 Laravel 已經能順利讀取到 Azure 上的 MySQL 了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Azure 雖然沒有原生支援 MySQL，但透過 ClearDB 所提供的 MySQL 服務，我們依然可以在 Azure 上使用 PHP + Laravel + MySQL。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzureMySQL_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Cephas Lin, <a href="https://azure.microsoft.com/zh-tw/documentation/articles/store-php-create-mysql-database/" target="_blank" rel="external">在 Azure 中建立 MySQL 資料庫並連接到此資料庫</a></li>
<li>Mikhail Vink, <a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Windows+Azure+SQL+Database+in+PhpStorm" target="_blank" rel="external">Working with Windows Azure SQL Database in PhpStorm</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在 Azure 一樣可以使用我們喜愛的 MySQL]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="MySQL" scheme="http://oomusou.io/tags/MySQL/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 部署 Laravel 到 Azure?]]></title>
    <link href="http://oomusou.io/azure/azure-phpstorm-deploy/"/>
    <id>http://oomusou.io/azure/azure-phpstorm-deploy/</id>
    <published>2016-08-01T12:23:43.000Z</published>
    <updated>2016-08-06T12:01:37.000Z</updated>
    <content type="html"><![CDATA[<p>Azure 是微軟的雲端平台，也可以跑 PHP 與 Laravel，本文將以 PhpStorm 為工具，與 GitHub 結合，將來程式有任何變更，只要 push 到 GitHub，就會自動更新到 Azure，還可透過 PhpStorm 內建的工具管理 Azure。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure000.png" alt=""></p>
<p>啟動 PhpStorm，選擇 <code>Create New Project</code> 建立新專案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure001.png" alt=""></p>
<ul>
<li><strong>專案類型</strong> :  <code>Composer Project</code>。</li>
<li><strong>Location</strong> : Laravel 專案路徑與專案名稱</li>
<li><strong>composer.phar</strong> : 選擇 <code>Use existing composer.phar</code>，輸入 <code>/usr/local/bin/composer</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>選擇 <code>Download composer.phar from getcomposer.org</code> 亦可，這種方式在 OS X 本機並不需要事先安裝 Composer，PhpStorm 會自動將 Composer 下載到目錄專案跟目錄下，唯此種方式安裝 package 將無法使用到 cache，必須從網路上下載，安裝時間較長，所以實務上建議使用 <code>Use existing composer.phar</code>。</span></span></span></li>
<li><strong>Filter packages</strong> : 輸入 <code>laravel/laravel</code>，此為 Laravel 專案的 package 名稱。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure002.png" alt=""></p>
<p>將畫面向下卷，還有其他設定。</p>
<ul>
<li><strong>Version to install</strong> : 選擇 Laravel 版本，<code>&lt;default&gt;</code> 為 Laravel 最新版本。</li>
<li><strong>Path to PHP executable</strong> : 指定 PHP 執行檔路徑，主要為了執行 Composer。</li>
<li><strong>Command line parameters</strong> : Composer 參數，輸入 <code>prefer-dist</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure003.png" alt=""></p>
<p>建立 Laravel 專案中，由於 Composer 需解析 package 相依性，需要一些時間。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure004.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve</span><br></pre></td></tr></table></figure>
<p>執行 PHP 內建 Http Server。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure005.png" alt=""></p>
<p>Laravel 已經順利在 OS X 本機執行。</p>
<h2 id="建立_Local_Git_Repository">建立 Local Git Repository</h2><hr>
<p>實務上開發 Laravel 會搭配 Git 做版本控制，先在本機建立 local repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure006.png" alt=""></p>
<p><strong><em>VCS -&gt; Import ino Version Control -&gt; Create Git Repository</em></strong></p>
<p>建立 Git repository。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>相當於 <code>git init</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure007.png" alt=""></p>
<p>選擇 local repository 目錄，也就是目前專案目錄。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure008.png" alt=""></p>
<p>下方出現 <code>Version Control</code>，並顯示有檔案尚未受 Git 管理，按 <code>browse</code> 顯示檔案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure009.png" alt=""></p>
<p>選擇專案目錄，按 <code>+</code> (Add to VCS) 將檔案加入 stage。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>相當於 <code>git add .</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure010.png" alt=""></p>
<p>綠色檔案為加入 stage 的檔案，按 <code>VCS</code> (Commit Changes)。<br><img src="/images/azure/azure-phpstorm-deploy/azure011.png" alt=""></p>
<ul>
<li>不要選擇 <code>Perform code analysis</code>。</li>
<li><strong>Commit Message</strong> : Initial commit。</li>
</ul>
<p>按 <code>Commit</code> 寫檔案寫入 local repository。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>相當於 <code>git commit -m &quot;Initial commit&quot;</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure012.png" alt=""></p>
<p>Commit 成功後，下方會顯示 <code>xx files committed : initial commit</code>。</p>
<h2 id="建立_Remote_GitHub_Repository">建立 Remote GitHub Repository</h2><hr>
<p>將 local repository 上傳至 GitHub 建立 remote repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure017.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Version Control -&gt; GitHub</em></strong></p>
<p>設定 GitHub 帳號。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure013.png" alt=""></p>
<p><strong><em>VCS -&gt; Import into Version Control -&gt; Share Project on GitHub</em></strong></p>
<p>將專案發佈到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure014.png" alt=""></p>
<p>預設會使用專案名稱為 remote GitHub repository 名稱。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure015.png" alt=""></p>
<p>在 GitHub 建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure016.png" alt=""></p>
<p>在 GitHub 已經看到剛剛上傳的專案。</p>
<h2 id="建立_Azure_Web_App">建立 Azure Web App</h2><hr>
<p>之前都在 PhpStorm 操作，現在開始要在 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a> 操作了。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure018.png" alt=""></p>
<p><strong><em>New -&gt; Web + Mobile -&gt; Web App</em></strong></p>
<p>在 Azure 建立 Web App。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure019.png" alt=""></p>
<ul>
<li><strong>App name</strong> : 將來可以使用網址 <code>https://appname.azurewebsites.net</code> 連過來。</li>
<li><strong>Resource Group</strong> : 可以新建 group，也可以使用目前既有 group，使用 group 的優點是方便管理，若要刪除可以整個 group 一起刪除。</li>
</ul>
<p>按 <code>App Service plan/location</code> 繼續設定。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure020.png" alt=""></p>
<p>預設的 App Service plan 是在美國，並不適合我們，我們應該選離我們最近的主機，所以選擇 <code>Create New</code> 建立新的 App Service plan。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure021.png" alt=""></p>
<ul>
<li><strong>App Service plan</strong> : 替 App Service plan 選個名稱。</li>
<li><strong>Location</strong> : 選擇主機位置，離我們最近的是 <code>East Asia</code>，位在香港。</li>
<li><strong>Pricing tier</strong> : 預設為 <code>D1 Shared</code>，需要收費，由於我們只是測試用，可以選擇 <code>0</code> 元的方案。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure022.png" alt=""></p>
<p>預設只會顯示 <code>Recommended</code> 方案，按 <code>View all</code> 顯示全部方案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure023.png" alt=""></p>
<p>選擇 <code>0</code> 元的 <code>F1 Free</code> 方案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure024.png" alt=""></p>
<p>Pricing tier 改成 <code>F1 Free</code>，按 <code>OK</code> 繼續。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure025.png" alt=""></p>
<p>App Service plan/location 改成我們想要的 <code>Laravel (East Asia)</code>。</p>
<p>建議將 <code>Pin to dashboard</code> 打勾，方便我們管理。</p>
<p>按 <code>Create</code> 開始建立 Web App。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure026.png" alt=""></p>
<p>Azure 正在建立 Web App 中，需要一點時間。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure027.png" alt=""></p>
<p>Web App 建立完成，會顯示 <code>Running</code>。</p>
<h2 id="設定_PHP_版本">設定 PHP 版本</h2><hr>
<p>Web App 預設的版本為 PHP 5.4，無法執行 Laravel，必須另外設定。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure028.png" alt=""></p>
<p>選擇剛剛建立的 <code>Laravel52PhpStormAzure</code> Web App。</p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure029.png" alt=""></p>
<ul>
<li><strong>PHP version</strong> : 選擇 <code>5.6</code> 或 <code>7.0</code>。</li>
</ul>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="安裝_Composer">安裝 Composer</h2><hr>
<p>Laravel 預設的 <code>.gitignore</code> 有排除 <code>vendor</code> 目錄，使得上傳到 GitHub 不包含 <code>vendor</code> ，所以將來 Azure 從 GitHub 所抓下來的檔也沒有 <code>vendor</code> 目錄。</p>
<p>這使得 Azure 要自己下 <code>composer install</code> 安裝 <code>vendor</code> 下的 package，因此必須另外在 Azure 安裝 Composer。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure030.png" alt=""></p>
<p><strong><em>Tools -&gt; Develop -&gt; Extensions</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure031.png" alt=""></p>
<p>按 <code>Add</code> 新增 extension。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure032.png" alt=""></p>
<p>選 <code>Choose Extension</code> 與 <code>Composer</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure033.png" alt=""></p>
<p>成功安裝 Composer。</p>
<h2 id="設定_Deployment_Source">設定 Deployment Source</h2><hr>
<p>設定 Azure 從 GitHub 抓資料，只要有任何 push 到 GitHub，Azure 都會自動更新。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure034.png" alt=""></p>
<p><strong><em>Setting -&gt; Publishing -&gt; Deployment source</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure035.png" alt=""></p>
<p> <strong><em>Choose Source -&gt; GitHub</em></strong></p>
<p>Azure 支援多種 deployment source，本文以 GitHub 為例。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure036.png" alt=""></p>
<p>選擇 GitHub 上的 <code>project</code> 與 <code>branch</code>。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>第一次連上 GitHub，會需要設定 authentication。</span></span></span></p>
<p>按 <code>OK</code> 後，開始第一次從 GitHub 部署到 Azure。</p>
<p>由於第一次部署，<code>composer install</code> 要重新安裝 <code>vendor</code> 目錄，需要一點時間。</p>
<h2 id="設定_Remote_Host">設定 Remote Host</h2><hr>
<p>設定 Web App 一定得設定虛擬目錄，但是之前的部署皆由 Azure 自動完成，到底 Azure 將我們的專案下載到什麼目錄下呢?</p>
<p>讓我們再回到 PhpStorm。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure037.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Build, Execution Development -&gt; Deployment</em></strong></p>
<p>按 <code>+</code> 新增。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure038.png" alt=""></p>
<p>輸入自訂 server 名稱，選擇 type 為 <code>FTP</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure039.png" alt=""></p>
<p>需要輸入 <code>FTP host</code>、<code>User name</code> 與 <code>Web server root url</code>。</p>
<p>但此時我們還不知道該輸入什麼。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure040.png" alt=""></p>
<p>回到 <a href="https://portal.azure.com" target="_blank" rel="external">Azure portal</a>。</p>
<p><strong><em>Settings -&gt; General -&gt; Properties</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure044.png" alt=""></p>
<ul>
<li><code>URL</code> 為 <code>Web server root url</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure041.png" alt=""></p>
<ul>
<li><code>FTP/DEPLOYMENT USER</code> 為 <code>User name</code>。</li>
<li><code>FTP HOST NAME</code> 為 <code>FTP host</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure042.png" alt=""></p>
<p>再回到 PhpStorm，將 <code>FTP host</code>、<code>User name</code> 與 <code>Web server root url</code> 補上。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  FTP host 不包含 <strong>ftp://</strong></div>
<p><img src="/images/azure/azure-phpstorm-deploy/azure043.png" alt=""></p>
<p><strong><em>Tools -&gt; Deployment -&gt; Browse Remote Host</em></strong></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure045.png" alt=""></p>
<p>由 <code>Remote Host</code> 視窗，我們發現 Laravel 專案是放在 <code>site/wwwroot</code> 底下，所以 virtual root 應該設定在 <code>site/wwwroot/public</code>。</p>
<h2 id="設定_Virtual_Root">設定 Virtual Root</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure046.png" alt=""></p>
<p>再回到 <a href="http://protal.azure.com" target="_blank" rel="external">Azure portal</a>。</p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure047.png" alt=""></p>
<p>在 <code>Virtual application and directories</code> 下，將 virtual root 改成 <code>site\wwwroot\public</code>。</p>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="設定_-env">設定 .env</h2><hr>
<p>Laravel 提供了 <code>.env</code>，可以設定些敏感資訊，如資料庫連線。預設 <code>.gitignore</code>有排除 <code>.env</code>，所以並沒有上 GitHub，因此也不會上 Azure。</p>
<p>但 <code>.env</code> 的 <code>APP_KEY</code> 又是 Laravel 執行時所必要資訊，必須加以補上。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure046.png" alt=""></p>
<p><strong><em>Settings -&gt; General -&gt; Application settings</em></strong>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure048.png" alt=""></p>
<p>將本機的 <code>.env</code> 的 <code>APP_KEY</code> 內容加以複製。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure049.png" alt=""></p>
<p>在 <code>App settings</code> 下新增 <code>APP_KEY</code>，將 <code>.env</code> 的 <code>APP_KEY</code> 值貼上。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>實務上 <code>.env</code> 的設定，都可以改設定在 Azure 的 <code>App settings</code>。</span></span></span></p>
<p>最後記得按上方的 <code>Save</code> 存檔。</p>
<h2 id="第一次在_Azure_執行_Laravel">第一次在 Azure 執行 Laravel</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure050.png" alt=""></p>
<p>點擊 <code>URL</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure051.png" alt=""></p>
<p>在 Azure 的網址上正確執行 Laravel。</p>
<h2 id="修改並_Push_到_GitHub">修改並 Push 到 GitHub</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure052.png" alt=""></p>
<p>將 <code>welcome.blade.php</code> 加以修改，由 <code>Laravel 5</code> 改成 <code>Hello Laravel</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure053.png" alt=""></p>
<p>點擊下方的 <code>Version control</code> 標籤，按 <code>VCS</code> 將此次變更加以 commit。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure054.png" alt=""></p>
<p>填入 commit message 後，按 <code>Commit and Push</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure055.png" alt=""></p>
<p>按 <code>Push</code> 將直接 push 到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure056.png" alt=""></p>
<p>Push 到 GitHub 成功。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure057.png" alt=""></p>
<p>Azure 會自動從 GitHub 更新。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>本文以 GitHub 為例，實務上你可以搭配你習慣的版本控制系統。</li>
<li>透過 <a href="http://protal.azure.com" target="_blank" rel="external">Azure portal</a> 與 PhpStorm，您不需要下任何一行指令，就可以經鬆的將 Laravel 部署到 Azure。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzure_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Cephas, <a href="https://azure.microsoft.com/zh-tw/documentation/articles/app-service-web-php-get-started/" target="_blank" rel="external">建立、設定和部署 PHP Web 應用程式至 Azure</a></li>
<li>Robert McMurray, <a href="https://azure.microsoft.com/zh-tw/documentation/articles/web-sites-php-configure/" target="_blank" rel="external">在 Azure App Service Web Apps 中設定 PHP</a></li>
<li>Mikhail Vink, <a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Windows+Azure+from+within+PhpStorm" target="_blank" rel="external">Working with Windows Azure from within PhpStorm</a></li>
<li>KevinAtStout, <a href="https://www.youtube.com/watch?v=48moauj0KtE" target="_blank" rel="external">Connecting PhpStorm to Your Azure Web Server</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用有效率的工具部署 Laravel]]>
    
    </summary>
    
      <category term="Azure" scheme="http://oomusou.io/tags/Azure/"/>
    
      <category term="Git" scheme="http://oomusou.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://oomusou.io/tags/GitHub/"/>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Code Generation?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-code-generation/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-code-generation/</id>
    <published>2016-07-28T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>實務上開發專案時，有一些程式碼會不斷的出現，這時可靠 PhpStorm 的 Code Generation 幫我們產生這些 code snippet，除此之外，我們也可以將自己的 code snippet 加入 Live Template，可加快發開速度，並減少 typo。<br><a id="more"></a></p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="Namespace">Namespace</h2><hr>
<p>Laravel 5 的 <code>app</code> 目錄下都遵循 PSR-4，也就是每個在 <code>app</code> 目錄下的 class 都要有 namespace，且 Laravel 與 package 都有自己的 namespace，實務上我們不可能記得了這麼長的 namespace，Code Generation 可以幫我們自動引入相對應的 namespace，若 namespace 名稱相同，會讓我們用選的。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen009.png" alt=""></p>
<p><code>return</code> type 為 <code>Collection</code>，這是 Laravel 擴充的型別，輸入 <code>Col</code> 之後，Code Completion 會顯示 <code>Collection</code>，後面為其完整的 namespace。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen010.png" alt=""></p>
<p>Code Generation 自動幫我們 <code>use</code> 了正確的 namespace，不用我們操心。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen011.png" alt=""></p>
<p><code>Post</code> 出現反白，Code Inspection 抱怨找不到 <code>Post</code> class。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen012.png" alt=""></p>
<p>將滑鼠游標放在反白的 <code>Post</code> 上，按熱鍵 &#8997; + &#8617;，選擇 <code>Import class</code>。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/e9e14ebc547c7a805d78b4c880c6112172aaa31e" target="_blank" rel="external">PostRepository 自動 use namespace</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen013.png" alt=""></p>
<p>Code Generation 自動幫我們 <code>use</code> 了 model 的 namespace，不用我們操心。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen014.png" alt=""></p>
<p>實務上我們常常只會維護程式碼，但不會去維護 namespace，造成沒用到的 namespace 越來越多。</p>
<p>如我們將 <code>return Post::all()</code> 刪除後，因為沒使用到 <code>Post</code>，所以在 PhpStorm 的 <code>use App\Post</code> 會反灰警告你此 namspace 目前沒人使用。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/79745623c4cbc82c7759e30d4cb8bdcda4cc8890" target="_blank" rel="external">PostRepository 自動刪除沒用的 namespace</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen015.png" alt=""></p>
<p>按熱鍵 &#8963; + &#8997; + O，PhpStorm 會自動幫你將沒用到的 namespace 刪除。</p>
<h2 id="Constructor">Constructor</h2><hr>
<p>使用<strong>依賴注入</strong>後，必須建立 constructor 並注入相依物件，在每天的開發過程中需要不斷發生，Code Generation 可以幫我們自動完成 constructor injection。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen000.png" alt=""></p>
<p>按熱鍵 &#8963; + N，出現 <code>Generate</code> 選單，選擇 <code>Constructor...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen001.png" alt=""></p>
<p>在 constructor 參數列輸入要依賴注入的 class 名稱，輸入前幾個字母即可，Code Completion 會啟動讓你挑選 class 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen002.png" alt=""></p>
<p>Code Generation 自動幫我們 <code>use</code> 了 <code>PostRepository</code> 的 namespace。</p>
<p>輸入 <code>$</code>，Code Completion 會自動顯示建議的參數名稱，選擇你喜歡的命名方式。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen003.png" alt=""></p>
<p>Code Inspection 會出現警告，因為還沒產生 constructor 的 PHPDoc。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen004.png" alt=""></p>
<p>按熱鍵 &#8997; + &#8617;，選擇 <code>Update PHPDoc Comment</code>，由 PhpStorm 來幫我們產生 PHPDoc。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen005.png" alt=""></p>
<p>PhpStorm 自動幫我們產生 PHPDoc。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen006.png" alt=""></p>
<p>繼續按熱鍵 &#8997; + &#8617;，選擇 <code>Initialize fields</code>，由 PhpStorm 來幫我們產生其他程式碼。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen007.png" alt=""></p>
<p>選擇要由 Code Generation 要產生 field 的程式碼。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/blob/master/app/Services/PostService.php" target="_blank" rel="external">新增 PostService</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen008.png" alt=""></p>
<p>Code Generation 一氣呵成幫我們產生了 field，在 constructor 產生了指定 field 相對應的程式碼，另外也 <code>use</code> 相對應的 namespace。</p>
<h2 id="Getter/Setter">Getter/Setter</h2><hr>
<p>實務上常常需要對 private field 加上 getter 與 setter，如<strong>重構</strong>的 <strong>Self Encapculate Field</strong> 也會用到，Code Generation 可以幫我們自動產生 getter 與 setter。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen016.png" alt=""></p>
<p>新建立一個 <code>$postId</code> field，按熱鍵 &#8997; + &#8617;，會出現各種 getter 與 setter 產生方式。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/d4da6261ee4bed2d0bf916d6ffd22b1c5c364237" target="_blank" rel="external">支援 PHP 7 type hint 與 return type 的 getter 與 setter</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen017.png" alt=""></p>
<p>若選擇 <code>Add getter and setter</code>，Code Generation 會幫我們自動產生支援 PHP 7 type hint 與 return type 的 getter 與 setter。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/d27d4e15a740666c9ad0f1be71048c91970da567" target="_blank" rel="external">支援 fluent setter</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen018.png" alt=""></p>
<p>若選擇 <code>Add fluent setter</code>，Code Generation 甚至會幫我們自動產生 fluent 風格的 setter。</p>
<h2 id="Implement_Method">Implement Method</h2><hr>
<p>在物件導向中，實踐抽象化最重要的就是 interface，所以常常有 implement interface 的需求，Code Generation 提供兩種方式讓我們快速實作 interface。</p>
<p><strong>SMSInterface.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/42fcc908afef8c8d937ff84d1fd1ae981e882b30" target="_blank" rel="external">新增 SMSInterface</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen019.png" alt=""></p>
<p>定義了 <code>SMSInterface</code>，準備對簡訊的發送加以抽象化。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen020.png" alt=""></p>
<p>建立了 <code>AzureSMSService</code>，實作 <code>SMSInterface</code>，Code Inspection 馬上提出 <code>尚未實作 SMSInterface</code> 警告。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen021.png" alt=""></p>
<p>按熱鍵 &#8997; + &#8617;，選擇 <code>Add method stubs</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen022.png" alt=""></p>
<p>Code Generation 會自動幫我們根據 interface 產生了 method 框架，連 PHPDoc 也會幫我們產生。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen023.png" alt=""></p>
<p>另外一種方式，按熱鍵 &#8963; + I，出現 <code>Choose methods to implement</code> 視窗，選擇你要 implement 的 method。</p>
<p><strong>AzureSMSService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/9db85e766750a619ba89ce75987b3d3d718f0503" target="_blank" rel="external">自動實現 interface 的 method</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen022.png" alt=""></p>
<h2 id="Override_Method">Override Method</h2><hr>
<p>繼承是實現物件導向抽象化的另一種方式，當子類別可 override 父類別的 method。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen024.png" alt=""></p>
<p><code>AzurePostService</code> 繼承了 <code>PostService</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen025.png" alt=""></p>
<p>若我們想 override 父類別 <code>PostService</code> 的 <code>showTitle()</code>，可按熱鍵 &#8963; + O，出現 <code>Choose method to override</code> 視窗，選擇你要 override 的 method。</p>
<p><strong>AzurePostService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo/commit/0766384172f9df83539dfb17600e401b2ff96686" target="_blank" rel="external">自動複寫 class 的 method</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-generation/codegen026.png" alt=""></p>
<p>Code Generation 會自動幫我們根據父類別產生 method 框架，連 PHPDoc 也會幫我們產生。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  AzurePostService 去繼承 PostService 可能不是實務上使用繼承的一個好例子，這裡只是為了示範 Code Generation 的功能，實務上應該為了抽象化的多型來使用繼承，並遵守 SOLID 原則的<strong>里氏替換</strong>原則，而不是為了 code reuse 去使用繼承。</div>
<h2 id="Postfix_Completion">Postfix Completion</h2><hr>
<p>很羨慕 fluent API 的好用嗎? Postfix Completion 讓我們可以類似 fluent API 的方式寫 PHP。</p>
<h3 id="not">not</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen039.png" alt=""></p>
<p>輸入 <code>$title.not</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen040.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>!</code> 區塊。</p>
<h3 id="par">par</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen041.png" alt=""></p>
<p>輸入 <code>$title.par</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen042.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>( )</code> 區塊。</p>
<h3 id="if">if</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen029.png" alt=""></p>
<p>輸入 <code>$title.if</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen030.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if ( )</code> 區塊。</p>
<h3 id="else">else</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen031.png" alt=""></p>
<p>輸入 <code>$title.else</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen032.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if (! )</code> 區塊。</p>
<h3 id="fe">fe</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen033.png" alt=""></p>
<p>輸入 <code>$title.fe</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen034.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>foreach( )</code> 區塊。</p>
<h3 id="null">null</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen035.png" alt=""></p>
<p>輸入 <code>$title.null</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen036.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if ( === null)</code> 區塊。</p>
<h3 id="nn">nn</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen037.png" alt=""></p>
<p>輸入 <code>$title.nn</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen038.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>if ( !== null)</code> 區塊。</p>
<h3 id="return">return</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen043.png" alt=""></p>
<p>輸入 <code>$title.return</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen044.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>return</code>。</p>
<h3 id="echo">echo</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen027.png" alt=""></p>
<p>輸入 <code>$title.echo</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen028.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>echo $title;</code>。</p>
<h3 id="var_dump">var_dump</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen045.png" alt=""></p>
<p>輸入 <code>$title.var_dump</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen046.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>var_dump()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen047.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; General -&gt; Postfix Completion</em></strong></p>
<p>在 <strong><em>Preferences</em></strong> 設定底下，可以看到所有 PhpStorm 支援的 Postfix Completion，包含 JavaScript 與 PHP。</p>
<p>可惜 Postfix Completion 無法擴充，就只能用 PhpStorm 所提供的 postfix。</p>
<h2 id="Live_Template">Live Template</h2><hr>
<p>除了 Postfix Completion 外，PhpStorm 另外提供 Live Template，這是可以自行擴充的。</p>
<h3 id="fore">fore</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen049.png" alt=""></p>
<p>輸入 <code>fore</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen050.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>foreach( )</code> 區塊。</p>
<h3 id="forek">forek</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen051.png" alt=""></p>
<p>輸入 <code>forek</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen052.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>foreach( )</code> 區塊，並包含 key 與 value。</p>
<h3 id="thr">thr</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen053.png" alt=""></p>
<p>輸入 <code>thr</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen054.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>throw new</code> 區塊。</p>
<h3 id="prif">prif</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen055.png" alt=""></p>
<p>輸入 <code>prif</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen056.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>private function</code> 區塊。</p>
<h3 id="prof">prof</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen057.png" alt=""></p>
<p>輸入 <code>prof</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen058.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>protected function</code> 區塊。</p>
<h3 id="pubf">pubf</h3><p><img src="/images/phpstorm/phpstorm-code-generation/codegen059.png" alt=""></p>
<p>輸入 <code>pubf</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen060.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>public function</code> 區塊。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen048.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; Live Templates</em></strong></p>
<p>在 <strong><em>Preferences</em></strong> 設定底下，可以看到所有 PhpStorm 支援的 Live Template，還包含各種其通語言，甚至包含 Angular 2。</p>
<h2 id="自訂_Live_Template">自訂 Live Template</h2><hr>
<p>你也可以自己將常用的 code snippet，存成自己的 Live Template。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen061.png" alt=""></p>
<p>如在寫單元測試時，<code>$this-&gt;assertEquals()</code> 常常使用，所以我們想將它存成 Live Template。</p>
<p>選擇你的 code snippet，<strong><em>Tools-&gt; Save as Live Template</em></strong>。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen062.png" alt=""></p>
<p>輸入你自己的想要的縮寫，並在滑鼠游標停止處加上 <code>$END$</code>，將來 PhpStorm 會將游標停在此方便你輸入。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen063.png" alt=""></p>
<p>輸入 <code>pubf</code>，按熱鍵 &#8677;。</p>
<p><img src="/images/phpstorm/phpstorm-code-generation/codegen064.png" alt=""></p>
<p>Code Generation 會自動幫我們產生 <code>$this-&gt;assertEquals()</code>，並將游標放在 <code>( )</code> 中，方便你後續輸入。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Post Completion 無法自行擴充，不過 Live Template 可以自行擴充。</li>
<li>Post Completion 與 Live Template 有些是重複的，可視需求決定用哪一種，只要能提高開發效率即可。</li>
<li>要善用工具改善開發速度，將時間花在真正需要的地方，Code Generation 讓我們可以打更少的字， 還可以避免 typo。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCodeGeneration_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/generating-code.html" target="_blank" rel="external">Generating Code</a><br>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/live-templates.html" target="_blank" rel="external">Using Postfix Template</a><br>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/live-templates.html" target="_blank" rel="external">Live Template</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓我們打更少的字加快開發速度]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Code Completion?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-code-completion/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-code-completion/</id>
    <published>2016-07-25T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>PHP 進入了物件導向與 framework 時代之後，出現了大量的 namespace、class、interface 與 method，基本上這些東西已經很難用記憶的方式來寫程式，必須靠工具輔助。PhpStorm 的 Code Completion 幫我們處理了大部分的東西，讓我們只要用選的就可以開發程式，一來開發速度變快，二來也可以減少 typo，是 modern PHP 的關鍵。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="Basic_Code_Completion">Basic Code Completion</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code004.png" alt=""></p>
<p>當任何地方需要使用 Code Completion 時，就可以按熱鍵 &#8963; + &#9251;。</p>
<p>如 constructor 要依賴注入時，不知道要注入的 class 名稱，可以按熱鍵 &#8963; + &#9251;，Code Completion 會列出目前 scope 可用的 class 名稱讓你挑選。</p>
<h2 id="Smart_Type_Code_Completion">Smart Type Code Completion</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code005.png" alt=""></p>
<p>當任何地方需要使用 Code Completion 時，且希望 Code Completion 能根據型別自動選擇適當的變數，就可以按熱鍵 &#8963; + &#8679; + &#9251;。</p>
<p>如 <code>getTitle()</code> 需要輸入變數時，不知道要輸入的變數名稱，可以按熱鍵 &#8963; + &#8679; + &#9251;，Smart Type Code Completion 會根據 <code>getType()</code> 的 scalar type hint 或 PHPDoc 的 <code>@param</code> 列出目前 scope 最適合的變數讓你挑選。</p>
<h2 id="Class">Class</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code006.png" alt=""></p>
<p>一般我們都會取將物件變數名稱以 class 名稱的 camelCase 命名，當 <code>new</code> 時，Code Completion 會自動依照變數名稱抓到 class 名稱讓你選擇。</p>
<h2 id="Field">Field</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code007.png" alt=""></p>
<ul>
<li>若是一般 class，Code Completion 可以直接抓到 public field。</li>
<li>若是 model，則必須透過 IDE Helper 幫 model 加上 PHPDoc 註解，Code Completion 才能抓到。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 IDE Helper 的安裝與執行，詳細請參考<a href="/phpstorm/phpstorm-ide-helper/">如何在 PhpStorm 活用 PHPDoc?</a></span></span></span></li>
</ul>
<h2 id="Method">Method</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-completion/code000.png" alt=""></p>
<p>PhpStorm 2016.2 之前的 Code Completion，讓你選擇可以選擇 method，並提供參數資訊，老實說這樣已經很好用了。</p>
<p><img src="/images/phpstorm/phpstorm-code-completion/code001.png" alt=""></p>
<p>PhpStorm 2016.2 對於參數的 Code Completion 做了更強的支援，不過預設並沒有啟動。</p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; General -&gt; Smart Keys</em></strong></p>
<ul>
<li>將 <code>Enable smart function parameters completion</code> 打勾。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-code-completion/code002.png" alt=""></p>
<p>以後選擇 method 後，PhpStorm 還會幫你將原 method 的參數名稱複製過來，讓你可以更清楚要填什麼參數。</p>
<p>除此之外，若你使用的 PHP 7 的 type hint，或使用 PHPDoc 的 <code>@param</code> 描述參數型別，PhpStorm 會自動將相同型別的參數列在前面讓你挑選。</p>
<p><img src="/images/phpstorm/phpstorm-code-completion/code003.png" alt=""></p>
<p>按 enter 選擇了變數後，PhpStorm 會自動跳到下一個參數，也讓你用選的。</p>
<h2 id="Collection">Collection</h2><hr>
<p>Collection 並非 PHP 原生型別，是由 Laravel 所擴充，由於其實踐了 <code>ArrayAccess</code> 、 <code>Countable</code> 與 <code>IteratorAggregate</code> interface，因此 <code>Collection</code> 使用起來很像 array，若要描述 <code>Collection</code> 元素的型別，可搭配 PHPDoc。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/33f673dcbde4a935e04364c4ce4d064c9371a3cc" target="_blank" rel="external">PostRepository 新增 getAllPosts()</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code008.png" alt=""></p>
<p><code>getAllPosts()</code> 回傳的是 <code>Collection</code> 型別，若由 PhpStorm 的熱鍵 &#8997; + &#8617;，只會有 <code>@return Collection</code>，如此 <code>foreach</code> 時將無法顯示其元素的 field 與 method，必須加上 <code>|Post[]</code>，表示回傳值除了是 <code>Collection</code> 外，也是 <code>Post</code> 型別的 array。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/70964d9bf2013ebc4b092f0f7699d42f40b26568" target="_blank" rel="external">PostService 新增 showAllPosts()</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code009.png" alt=""></p>
<p>如此在 <code>foreach</code> 時，就可以顯示 <code>$post</code> 的屬性 <code>title</code>。</p>
<h2 id="Service_Container">Service Container</h2><hr>
<p><strong>PostServiceUnitTest.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/3b9d185307e4a64258fd8790439b820b44766931" target="_blank" rel="external">PostServiceUnitTest 使用 app::make()</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code010.png" alt=""></p>
<p>使用 <code>App::make()</code> 或 <code>app()</code> 透過 service container 建立物件時，PhpStorm 也可以抓到該物件的 method。</p>
<h2 id="Controller">Controller</h2><hr>
<p><strong>routes.php</strong><br><img src="/images/phpstorm/phpstorm-code-completion/code011.png" alt=""></p>
<p>在 <code>routes.php</code> 的 <code>uses</code>，可以抓到 controller 與其 method。</p>
<h2 id="Route">Route</h2><hr>
<p><strong>index.blade.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/988652b299d7bb6f2e17e91ca175b58e5f7cb325" target="_blank" rel="external">Blade 有 route 別名</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code012.png" alt=""></p>
<p>Blade 的 <code>route()</code> 可以抓到 <code>routes.php</code> 所定義的 route 別名。</p>
<h2 id="View">View</h2><hr>
<p><strong>PostController.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/ee4f0fc1673c491e176bcf5858ce35afee38e465" target="_blank" rel="external">view() 可抓到 view</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code013.png" alt=""></p>
<p>在 controller 內的 <code>return view()</code> 可以抓到 view 的名稱。</p>
<h2 id="config::get()">config::get()</h2><hr>
<p><strong>PostController.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/a6efc5f5bba41a79eab09abeeb7384c808d06653" target="_blank" rel="external">Config::get() 可抓到設定</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code014.png" alt=""></p>
<p><code>Config::get()</code> 可以抓到 array 的 key 值.</p>
<h2 id="DIR"><strong>DIR</strong></h2><hr>
<p><strong>PostServiceUnitTest.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo/commit/3227a9b15a1f441433758becf7e294bbab8a7f4e" target="_blank" rel="external"><strong>DIR</strong> 可抓到目前目錄的檔案</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-completion/code015.png" alt=""></p>
<p><code>__DIR__</code> 可抓到目前目錄的檔案，這在寫測試時特別好用，可以將測試案例檔案(如 Excel 檔)放在目前單元測試下，<code>__DIR</code> 會抓到 Excel 檔。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>寫程式重點不是在記憶力，而是在抽象化思考，Code Completion 讓我們從 namespace、class 與 method 解放，將注意力放在解決需求上。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCodeCompletion_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>Gary Hockin, <a href="https://blog.jetbrains.com/phpstorm/2016/07/parameter-code-completion-in-phpstorm-2016-2" target="_blank" rel="external">PhpStorm Code Completion in PhpStorm 2016.2</a><br>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/auto-completing-code.html" target="_blank" rel="external">Auto-Completing Code</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓我們忘記 Namespace，Class 與 Method]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Code Inspection?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-code-inspection/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-code-inspection/</id>
    <published>2016-07-24T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>PHP 不需編譯，只要存檔就可執行，優點是很方便，缺點是很多程式語法上的錯誤必須在瀏覽器執行才能發現。PhpStorm 的 Code Inspection 就相當於編譯器，在程式開發階段就可檢查語法上的錯誤，再搭配單元測試檢查邏輯上的錯誤，如此雙重保障，就能提早發現錯誤加以解決，降低除錯成本。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>初學者在使用 PhpStorm 時，第一個不習慣的就是原來在 Sublime Text 很漂亮的程式碼，在 PhpStorm 打開了以後，平白無故多了很多警告，覺得很礙眼。</p>
<p><strong>Authenticate.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/350f66fde6c4a532424670478cf2f5b72fed9ba9" target="_blank" rel="external">將 Authenticate.php 改成 use Auth</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect000.png" alt=""></p>
<p>與 Sublime Text 不同的是 :</p>
<ul>
<li>右上角多了 <span class="label label-warning">咖啡色</span> 的方塊 : 表示 Code Inspection 偵測到錯誤。</li>
<li>scroll bar 多了 <span class="label label-warning">咖啡色</span> 區塊 : 表示錯誤所在的相對位置。</li>
<li><code>Auth::guard()</code>多了反白警告 : 表示錯誤所在的實際位置。 </li>
</ul>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect001.png" alt=""></p>
<p>右上角方塊的顏色，表示各種不同的嚴重層級。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect002.png" alt=""></p>
<p>將滑鼠 hover 到 scroll bar 的顏色區塊上，會顯示錯誤訊息。</p>
<p>可用滑鼠直接點 scroll bar 的顏色區塊，快速跳到有錯誤的程式碼位置，或按熱鍵 F2 前進搜尋錯誤，&#8679; + F2 倒退搜尋錯誤。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect003.png" alt=""></p>
<p>將滑鼠游標放放到反白的 <code>Auth::guard()</code> 上，PhpStorm 顯示 <code>Method guard not found</code>。</p>
<p>主要是因為 <code>Auth</code> 為 Facade，執行上沒有問題，但是 Code Inspection 找不到。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect004.png" alt=""></p>
<p>將 namespace 引用改成 IDE Helper 所提供的 <code>Auth</code> 後，Code Inspection 就可以找到 <code>Auth::guard()</code> 了，右上角會出現 <span class="label label-success">綠色</span> 勾勾，表示通過 Code Inspection 檢查。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>關於使用 IDE Helper 解決 Code Inspection 警告的問題，詳細請參考<a href="/phpstorm/phpstorm-ide-helper/">如何在 PhpStorm 活用 PHPDoc?</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  實務上對於 Laravel 或 package 的程式碼，我不會要求需通過 Code Inspection 檢查，但自己寫的程式碼，都必須通過 Code Inspection 的 <span class="label label-success">綠色</span> 勾勾。</div>
<h2 id="調整_PhpStorm_檢查層級">調整 PhpStorm 檢查層級</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect005.png" alt=""></p>
<p>若你覺得 Code Inspection 檢查太嚴格，希望 PhpStorm 只幫你檢查 PHP 語法就好，可以按右下角的<strong>哨兵</strong>符號，將 Code Inspection level 調到 <code>Syntax</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect006.png" alt=""></p>
<p>調整完 Code Inspection level 後，不用改 <code>use Auth</code>，也可以達到右上角會出現 <span class="label label-success">綠色</span> 勾勾。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  實務上建議除非是 legacy code 真的不容易修正，否則不建議修改 Code Inspection level，畢竟 PhpStorm 所有的檢查都是有意義的，可以讓你及早發現淺在錯誤，避免實際在瀏覽器測試才發現錯誤的窘境。</div>
<h2 id="設定_Code_Inspection">設定 Code Inspection</h2><hr>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect007.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; Inspections</em></strong></p>
<p>假如你不想調整 Code Inspection level，只想將某個你認為不重要的警告拿掉，或降低層級，可以在 PhpStorm 的 preferences 設定。</p>
<p>如之前 <code>Auth::guard()</code> 的錯誤，你也可以直接在讓 <code>undefined method</code> 不要被檢查。</p>
<p>Code Inspection 所有的檢查規則都可以客製化，可以依照你的需求加以設定。</p>
<h2 id="常見_Code_Inspection">常見 Code Inspection</h2><hr>
<h3 id="使用未定義變數">使用未定義變數</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/3d187e1275e77b698b3d5487cc93e409a45511ae" target="_blank" rel="external">使用未定義變數</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect010.png" alt=""></p>
<p>直接使用一個未定義參數，Code Inspection 會加以警告。</p>
<h3 id="Namespace_不存在">Namespace 不存在</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/2855120534815ea7e14f174079a4512b30db5c2e" target="_blank" rel="external">Namespace 不存在</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect011.png" alt=""></p>
<p>Namespace 因為打錯，而引用了一個不存在的 namespace，Code Inspection 會加以警告。</p>
<h3 id="Class_不存在">Class 不存在</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/d73af1cd30f52375c62fcab8416c84f6c611397f" target="_blank" rel="external">Class 不存在</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect012.png" alt=""></p>
<p>依賴注入時 class 名稱打錯，注入了一個不存在的 class，Code Inspection 會加以警告。</p>
<h3 id="Field_不存在">Field 不存在</h3><p><strong>PostIDPO.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/d389f473081f69e088073a5daa9c5c9e26cf3b47" target="_blank" rel="external">重構成 Parameter Object</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect013.png" alt=""></p>
<p>將原 <code>showTitle()</code> 的 <code>$id</code> 與 <code>$default</code> 透過重構的 <code>Introduce to Parameter Object</code> 重構成 <code>PostIDPO</code> class。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/c7a50e8620653797d9041e406d51d2a21ee0e03b" target="_blank" rel="external">Field 不存在</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect014.png" alt=""></p>
<p><code>showTitle()</code> 改傳入 <code>PostIDPO</code> 物件。</p>
<p>若將 <code>id</code> 打錯成 <code>ip</code>，使用了一個不存在的 field，Code Inspection 會加以警告。</p>
<h3 id="Method_不存在">Method 不存在</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52DI_demo/commit/4862ffd79ac52e74a245010760662932839fb68d" target="_blank" rel="external">Method 不存在</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect015.png" alt=""></p>
<p>若將 method 名稱打錯，呼叫一個物件不存在的 method，Code Inspection 會加以警告。</p>
<h3 id="參數型別檢查">參數型別檢查</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/blob/master/app/Services/PostService.php" target="_blank" rel="external">新增 PostService</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect008.png" alt=""></p>
<p>在 <code>showTitle()</code> 的參數與回傳值都使用了 PHP 7 的 scalar type hint。</p>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/blob/master/tests/PostServiceTest.php" target="_blank" rel="external">新增 PostServiceTest</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect009.png" alt=""></p>
<p>若加上了 <code>declare(strict_type = 1);</code>，只要傳入的參數型別不對，Code Inspection 會提出警告。</p>
<h3 id="Case_忘了加_break">Case 忘了加 break</h3><p><strong>PostService.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/4c015e7c250e0db86916f15789ae216745554ecb" target="_blank" rel="external">Case 忘了加上 break</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect016.png" alt=""></p>
<p>PHP 語法上允許 <code>switch case</code> 不加上 <code>break</code> 的寫法，但大多時候是忘了加上 <code>break</code>，而造成邏輯上的錯誤，Code Inspection 會提出警告，可是需求決定是否該加上 <code>break</code>。</p>
<h3 id="沒有_PHPDoc">沒有 PHPDoc</h3><p><img src="/images/phpstorm/phpstorm-code-inspection/inspect017.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Editor -&gt; Inspections -&gt; PHPDoc</em></strong></p>
<p>PhpStorm 預設並沒有將 <code>Missing PHPDoc comment</code> 打勾，但實務上建議將此選項打勾。</p>
<p>PHP 7 因為有完整 type hint 與 return type，所以 PHPDoc 重要性不如以往，但 PHP 7 之前，則必須靠 PHPDoc 描述型別，PhpStorm 的 Code Inspection 才能發揮威力，所以建議開啟。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect018.png" alt=""></p>
<p><code>showTitle()</code> 沒有寫 PHPDoc，Code Inspection 會提出警告。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect019.png" alt=""></p>
<p>要補上 PHPDoc 也很簡單，將滑鼠游標放在 method 名稱上，按熱鍵 &#8997; + &#8617;，選擇 <code>Generate PHPDoc Comment</code> 或 <code>Generate PHPDoc for function</code> 皆可。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo/commit/51b7adc049927b19bd87f25bf26116932b61abff" target="_blank" rel="external">加上 PHPDoc</a></span></span></span><br><img src="/images/phpstorm/phpstorm-code-inspection/inspect020.png" alt=""></p>
<p>PhpStorm 會自動幫你加上 PHPDoc，只要再加上 method 功能的描述即可。</p>
<h2 id="執行_Code_Inpection">執行 Code Inpection</h2><hr>
<p>預設每個開啟的檔案都會自動執行 Code Inspection，此外你也可以自行選擇檔案，讓 Code Inspection 一次檢查多個檔案。</p>
<h3 id="一次檢查多個檔案">一次檢查多個檔案</h3><p><img src="/images/phpstorm/phpstorm-code-inspection/inspect021.png" alt=""></p>
<p>在 project windows 用 &#8984; 與滑鼠選擇多個檔案，按滑鼠右鍵，選擇 <code>Inspect Code...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect022.png" alt=""></p>
<p>選擇 <code>Selected files</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect023.png" alt=""></p>
<p>Code Inspection 最後會顯示有哪些檔案違反了哪些檢查規則。</p>
<h3 id="一次檢查整個專案">一次檢查整個專案</h3><p><img src="/images/phpstorm/phpstorm-code-inspection/inspect024.png" alt=""></p>
<p><strong><em>Code -&gt; Inspect Code…</em></strong></p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect025.png" alt=""></p>
<p>選擇 <code>Whole project</code>。</p>
<p><img src="/images/phpstorm/phpstorm-code-inspection/inspect026.png" alt=""></p>
<p>Code Inspection 將整個專案做檢查，會檢查出很多警告與錯誤，可視需求決定是否該修正。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>為了使 Code Inspection 沒有出現任何警告，可能會對程式碼產生強迫症，不過提早發現淺在錯誤總是好事，可視自己需求決定是否修正，或者關閉 Code Inspection 某個檢查規則。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCodeInspection_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>PhpStorm Online Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.2/code-inspection.html#phpCodeInspections" target="_blank" rel="external">Code Inspection</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓我們提早發現語法錯誤]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 的 Project Template 建立 Laravel 專案?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-project-template/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-project-template/</id>
    <published>2016-07-23T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>PhpStorm 2016.2 提供一個新功能，可以將專案打包成 project template，以後新建專案時，可以選擇此 template 直接重建專案，如常用的 package 與 codebase 可以先打包好，將來要建立新專案就很方便。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>我在寫部落格範例時，有些東西是必要的，如 IDE Helper，SQLite 環境，PHPUnit 單元測試環境，以前每次寫一個範例，就得重新安裝這些 package 與 codebase，很花時間，有了 project template之後，只要設定一次即可，以後部落格範例都可以套用此 project template，非常方便。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.2.41<br>PhpStorm 2016.2</p>
<h2 id="建立_Project_Template">建立 Project Template</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template000.png" alt=""></p>
<p><strong><em>Tools -&gt;Save Project as Template</em></strong></p>
<p>任何你目前的 Laravel 專案，都可以存成 project template。</p>
<p><img src="/images/phpstorm/phpstorm-project-template/template001.png" alt=""></p>
<p>輸入 project template 名稱，不必與原來 project 名稱相同，只要你方便識別即可。</p>
<h2 id="建立新_Project">建立新 Project</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template002.png" alt=""></p>
<p>選擇 <code>Create New Project</code>。</p>
<p><img src="/images/phpstorm/phpstorm-project-template/template003.png" alt=""></p>
<p>選擇 <code>User-defined</code> 的 <code>Laravel52Blog</code>，這是我們剛剛所建立的 project template。</p>
<p>在 <code>Location</code> 輸入你的專案路徑。</p>
<h2 id="重建_Vendor_目錄">重建 Vendor 目錄</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template004.png" alt=""></p>
<p>如同從 GitHub 下載的 Laravel 專案一樣，<code>vendor</code> 目錄下是空的，你有兩種方法重建 <code>vendor</code> 目錄。</p>
<ul>
<li><strong>composer install</strong> : 根據 <code>composer.lock</code> 重建 <code>vendor</code> 目錄，所有 package 版本會與原 project template 完全一樣。</li>
<li><strong>composer update</strong> : 根據 <code>composer.json</code> 重建 <code>vendor</code> 目錄，所有 package 版本會升級成與原 project template 相容的版本。</li>
</ul>
<p>兩種方式都可以，端看你的需求而定，我的需求是想升級到 Laravel 最新的版本，所以下 <code>composer update</code>。</p>
<p><img src="/images/phpstorm/phpstorm-project-template/template005.png" alt=""></p>
<p><code>composer update</code> 執行完後，<code>vendor</code> 目錄已經補齊。</p>
<h2 id="設定_Excluded_Folders">設定 Excluded Folders</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template006.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Directories</em></strong></p>
<p>若你有設定 <code>Excluded Folders</code>，將所有目錄刪除。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若你由 PhpStorm 幫你建立 Laravel 專案，他會幫你設定 <code>Excluded Folders</code>，若自己由 Composer 建立 Laravel 專案，則不會有此設定。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-project-template/template007.png" alt=""></p>
<p>刪除完後，只留下 <code>Tests</code>、<code>Sources</code> 與 <code>Resource Root</code> 三個目錄設定。</p>
<h2 id="設定_PHP_7">設定 PHP 7</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template008.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP</em></strong></p>
<ul>
<li><strong>PHP language level</strong> : 設定為 <code>7</code>。</li>
<li><strong>Interpreter</strong> : 設定 PHP 7 interpreter 位置。</li>
</ul>
<h2 id="設定_PHPUnit">設定 PHPUnit</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template009.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; PHPUnit</em></strong></p>
<ul>
<li><strong>Use Composer autoloader</strong> : 選擇專案目錄下的 <code>vendor/autoload.php</code>。</li>
<li><strong>Default configuration file</strong> : 選擇專案根目錄下的 <code>phpunit.xml</code>。</li>
</ul>
<h2 id="單元測試">單元測試</h2><hr>
<p><img src="/images/phpstorm/phpstorm-project-template/template010.png" alt=""></p>
<p>確認專案已經可以正常執行。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Project template 並不包含原專案的 git repository，也就是你必須重新建立一個新的 git local repository。</li>
<li>透過這種方式，建立新專案時將更為方便，直接套用你常用的 package 與 codebase。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormProjectTemplate_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[將常用的 Package 與 Codebase 打包成 Project Template]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 Xdebug on Demand?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-xdebug-on-demand/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-xdebug-on-demand/</id>
    <published>2016-07-18T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>Xdebug 是 PhpStorm debug 的必備工具，但是啟動 Xdebug 又會使 Composer 變慢，實務上很兩難，這個問題在 PhpStorm 2016.2 得到完美解決，平時不用開啟 Xdebug，PhpStorm 會在需要 debug 時才自動啟動 Xdebug，不會影響 Composer 執行速度。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand000.png" alt=""></p>
<p>Composer 在某一個版本以後，只要在 <code>php.ini</code> 有啟動 Xdebug，就會出現以上黃色警告訊息。</p>
<p>主要是 Xdebug 會大幅影響 Composer 解析套件相依時的執行速度，因此不建議你開啟 Xdebug。</p>
<p>在之前並沒好的解法，除非你不使用 Xdebug，但 Xdebug 又是 PhpStorm 的大絕，也只好犧牲 Composer 了。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>MAMP PRO 3.5.2<br>PhpStorm 2016.2</p>
<h2 id="設定_Xdebug_On_Demand">設定 Xdebug On Demand</h2><hr>
<p>本文以 MAMP PRO 為例，在 PhpStorm 設定 Xdebug on Demand。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand001.png" alt=""></p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; PHP </em></strong></p>
<ul>
<li><strong>PHP Language level</strong> : 選擇 <code>7</code>。</li>
<li><strong>Interpreter</strong> : 按 <code>...</code> 設定 PHP interpreter。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand002.png" alt=""></p>
<p>按 <code>+</code> 新增 PHP interpreter，因為以 MAMP PRO 為例，選擇 <code>Other Local...</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand003.png" alt=""></p>
<ul>
<li><strong>Name</strong> : 輸入 <code>PHP 7</code>。</li>
<li><strong>PHP executable</strong> : 選擇 PHP interpreter 所在路徑，以 MAMP PRO 為例，其路徑為 <code>/Applications/MAMP/bin/php/php7.0.8/bin/php</code>。注意此時 <code>php.ini</code> 並沒有啟動 <code>xdebug.so</code>，所以顯示 <code>Debugger: Not installed</code>。</li>
<li><strong>Debugger extension</strong> : 選擇 <code>xdebug.so</code> 所在路徑，以 MAMP PRO 為例，其路徑為 <code>/Applications/MAMP/bin/php/php7.0.8/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so</code>。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand004.png" alt=""></p>
<p>設定好了之後，就可以選擇剛剛設定的 <code>PHP7</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand005.png" alt=""></p>
<p>在單元測試中設定中斷點，按熱鍵 &#8963; + &#8679; + D，程式碼依舊會在中斷點停止，所有變數也可以正常顯示。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug-on-demand/demand006.png" alt=""></p>
<p>由於沒有在 <code>php.ini</code> 啟動 <code>xdebug.so</code>，Composer 再也不會抱怨 Xdebug 已經啟動，可以全速執行。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Xdebug 與 Composer 一直是無解的問題，透過 PhpStorm 2016.2，我們終於可以兼顧 Xdebug 的便利與 Composer 的速度。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Gary Hockin, <a href="https://blog.jetbrains.com/phpstorm/2016/06/xdebug-on-demand-for-cli-php-scripts-in-phpstorm-2016-2-eap/" target="_blank" rel="external">Xdebug On Demand for CLI PHP Scripts in PhpStorm 2016.2</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[關閉 Xdebug 加速 Composer]]>
    
    </summary>
    
      <category term="MAMP" scheme="http://oomusou.io/tags/MAMP/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
      <category term="Xdebug" scheme="http://oomusou.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Null Object 模式?]]></title>
    <link href="http://oomusou.io/dp/dp-nullobject/"/>
    <id>http://oomusou.io/dp/dp-nullobject/</id>
    <published>2016-07-15T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>當我們透過 Eloquent 對資料庫抓資料時，由於 <code>where()</code> 的條件可能撈不到資料，導致 <code>first()</code> 傳會 <code>null</code>，若再對 <code>null</code> 物件的欄位屬性做存取，會出現 <code>Trying to get property of non-object</code> 的錯誤訊息，當然有各種方法避開這個錯誤，但比較理想的方式是引入 <code>Null Object</code> 模式。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>實務上我們有個 <code>post</code> table，內有 <code>title</code>、<code>description</code> 與 <code>title</code> 三個欄位，根據需求，我們想要有個 <code>PostService</code> 有個 <code>showTitle()</code> 的 API，只要傳入 <code>post</code> table 的 <code>ID</code>，就會回傳該筆資料的 <code>title</code>。</p>
<p><strong> PostService.php </strong><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  PostRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示 title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getTitle(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>PostService</code> 的 <code>showTitle()</code>，我們會呼叫 <code>PostRepository</code> 的 <code>getTitle()</code> 傳回字串。</p>
<p><strong> PostRepository.php </strong><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳 post.title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>PostRepository</code> 的 <code>getTitle()</code>，我們會直接使用 Eloquent 的 <code>where()</code> 去抓資料，<code>get()</code> 回傳的是 <code>Collection</code>，然後再透過 <code>Collection</code> 的 <code>first()</code> 傳回第一筆 <code>Post</code> model，最後再抓 <code>Post</code> model 的 <code>title</code> 屬性。</p>
<p>目前這種寫法，若 <code>where()</code> 抓得到資料時就不會出錯，但若 <code>where()</code> 抓不到資料，<code>first()</code> 將會傳回 <code>null</code>，再存取其 <code>title</code> 屬性就會出現 <code>Trying to get property of non-object</code> 的錯誤，這是大家常見的錯誤訊息。</p>
<h2 id="常見解決方式">常見解決方式</h2><hr>
<h3 id="判斷_null">判斷 null</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$post</span> = Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">        -&gt;get()</span><br><span class="line">        -&gt;first();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$post</span> != <span class="keyword">null</span>)  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$post</span>-&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'no title'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>first()</code> 可能傳回 <code>null</code>，那就在讀取 <code>title</code> 屬性前先判斷 <code>$post</code> 是否為 <code>null</code>，若不是 <code>null</code> 則傳回 <code>title</code>，若為 <code>null</code> 則傳回預設值。</p>
<h3 id="try_catch">try catch</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>)</span> : <span class="title">string</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="keyword">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'no title'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然會出現 <code>Trying to get property of non-object</code> exception，就用 <code>try catch</code> 去攔，若有 exception 就傳回預設值。</p>
<p>這兩種解法雖然都可行，但有個致命傷，違反 <code>Tell, Don&#39;t Ask</code> 原則。</p>
<p>好的 API，應該只負責 tell，也就是告訴 API 我的需求是什麼，然後就傳回我要的資料，而不是 ask API 之後，呼叫端還要再做額外的判斷或加工。</p>
<p>因為只要呼叫端還需要判斷，就有可能因為忘記判斷而造成不可預期的錯誤，這就不是好的 API。</p>
<p>第一個方式必須使用 <code>if else</code> 判斷是否為 <code>null</code>，第二個方式還必須去 <code>try catch</code>，都不算是好的 API，比較理想的方式是只要 <code>return Post::whereId()-&gt;get()-&gt;first()-&gt;title</code> 一次就可以抓到想要的資料，不需要額外判斷。</p>
<h2 id="Null_Object_模式">Null Object 模式</h2><hr>
<blockquote><p>Replace the null value with the null object.</p>
<p>將 null 值替換成 null 物件。</p>
<footer><strong>Martin Fowler</strong><cite>&nbsp;- Refactoring Ch 9.7 Introduce Null Object</cite></footer></blockquote>
<p>Null Object 模式並非出自<a href="http://www.tenlong.com.tw/items/9572054112?item_id=997944" target="_blank" rel="external">設計模式</a>一書，而是出現在<a href="http://www.tenlong.com.tw/items/7115369097?item_id=1009173" target="_blank" rel="external">重構</a>的 Ch 9.7，教大家將 <code>null</code> 值重構成 <code>null</code> 物件，因為只要有 <code>null</code> 值，就必須去 <code>if</code> 判斷是否 <code>null</code>，甚至於去 <code>try catch</code>，這樣的 API 並不好用，而且只要忘記判斷就可能出錯。</p>
<p>什麼是 Null Object 呢? 剛剛會出錯，就是因為我們期望是一個 <code>Post</code> 物件，也有 <code>title</code> 屬性，但因為回傳 <code>null</code> 值，沒有 <code>title</code> 屬性才出錯，既然如此，假如我們也能傳回一個 <code>Post</code> 物件，也有 <code>title</code> 屬性，這樣就不會錯了，這就是 Null Object 概念。</p>
<p>至於 Null Object 的 <code>title</code> 屬性該存放什麼值呢? 這沒有一定的答案，完全看需求端定義，可能需求端認為若找不到資料，傳回空字串即可，也可能傳回<code>no title</code>即可，這些值就是 Null Object 的 <code>title</code> 屬性的值。</p>
<p>我們來將原來的程式碼重構成 Null Object 模式。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo/commit/99aea8c60702e4c1a6bf753689ea3139ad242e2b" target="_blank" rel="external">建立 PostService(使用 Null Object 模式)</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span>  PostRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 顯示 title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@param</span> string $default</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showTitle</span><span class="params">(int <span class="variable">$id</span>, string <span class="variable">$default</span> = <span class="string">''</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getTitle(<span class="variable">$id</span>, <span class="variable">$default</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>PostService</code> 的 <code>showTitle()</code> 多了第二個參數 <code>$default</code>，預設值為空字串，若需求端想要有自己的預設值，如 <code>no title</code>，可自行傳入。</p>
<p>另外只要呼叫 <code>PostRepository</code> 的 <code>getFirstPost()</code> 即可，不用加入任何 <code>if</code> 判斷或 <code>try catch</code>。</p>
<p><strong> PostRepository.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo/commit/88660f71a28eb5360280b884ceab99641600d4b6" target="_blank" rel="external">建立 PostRepository(使用 Null Object 模式)</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 回傳 post.title</span><br><span class="line">     * <span class="doctag">@param</span> int $id</span><br><span class="line">     * <span class="doctag">@param</span> string $default</span><br><span class="line">     * <span class="doctag">@return</span> string</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">(int <span class="variable">$id</span>, string <span class="variable">$default</span> = <span class="string">''</span>)</span> : <span class="title">string</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::whereId(<span class="variable">$id</span>)</span><br><span class="line">            -&gt;get()</span><br><span class="line">            -&gt;first(<span class="keyword">null</span>, <span class="keyword">new</span> Post([<span class="string">'title'</span> =&gt; <span class="variable">$default</span>]))</span><br><span class="line">            -&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 <code>Collection</code> 的 <code>first()</code> 第一個參數傳入 null，第二個參數傳入一個 <code>Post</code> model，也就是我們的 Null Object，至於 <code>title</code> 該如何定義，則由需求端傳入的參數 <code>$default</code> 決定。</p>
<p>這樣的 <code>first()</code> 寫法的意義為 : 若 <code>where()</code> 找得到資料，則 <code>first()</code> 依照正常方式傳回 <code>Post</code> 物件，若找不到資料，請傳回我們自己的 <code>new Post()</code>，也就是 Null Object。</p>
<p>為什麼 <code>first()</code> 的第一個參數為 <code>null</code> 呢? 在 Laravel 官網並沒有解釋，這要實際看 Laravel 的 source code。</p>
<p><strong> Collection.php </strong><br><figure class="highlight php"><figcaption><span>vendor/laravel/framework/src/illuminate/Support/Collection.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Get the first item from the collection.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span>  callable|null  $callback</span><br><span class="line"> * <span class="doctag">@param</span>  mixed  $default</span><br><span class="line"> * <span class="doctag">@return</span> mixed</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span><span class="params">(callable <span class="variable">$callback</span> = null, <span class="variable">$default</span> = null)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arr::first(<span class="variable">$this</span>-&gt;items, <span class="variable">$callback</span>, <span class="variable">$default</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>Collection</code> 的 <code>first()</code>，預設可以都不傳任何參數，就會傳回第一個物件。</li>
<li>也可以第一個參數傳進 closure，告訴 <code>Collection</code> 該以何種條件去回傳第一個物件。</li>
<li>也可以第二個參數傳進 <code>$default</code>，當 <code>first()</code> 找不到任何資料時，該回傳什麼預設值。</li>
</ul>
<p>因為 Null Object 就是預設值，所以我們要傳入第二個參數，但第一個參數的 closure 我們不用傳，所以傳一個 <code>null</code> 即可。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo/commit/84ebcd8db360c865bbe8b7e01cc3e0f6818d5de4" target="_blank" rel="external">建立單元測試 PostServiceTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 有資料取<span class="title">title</span>欄位資料<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">3</span>)-&gt;create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;showTitle(<span class="number">1</span>, <span class="string">'no title'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'title1'</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 無資料的<span class="title">title</span>欄位資料<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">3</span>)-&gt;create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$this</span>-&gt;target-&gt;showTitle(<span class="number">4</span>, <span class="string">'no title'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="string">'no title'</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/dp/dp-nullobject/nullobject000.png" alt=""></p>
<p>最後補上單元測試，分別測試 <code>where()</code> 找得到資料與找不到資料的測試案例，證明 Null Object 重構成功。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Null Object 模式是實務上常常使用的模式，當程式碼出現需要判斷 <code>null</code> 值，就該考慮重構成 Null Object 模式，這種風格符合物件導向多型的原則，不該因為 <code>null</code> 值而有不同的行為，也符合 <code>Tell, Don&#39;t Ask</code> 原則，可以寫出更好用的 API。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52FirstNullObject_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Martin Fowler, <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672" target="_blank" rel="external">Refactoring : Improving the Design of Existing Code</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 Null Object 模式將符合 Tell, don't Ask 原則]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Laravel Collection" scheme="http://oomusou.io/tags/Laravel-Collection/"/>
    
      <category term="Laravel Eloquent" scheme="http://oomusou.io/tags/Laravel-Eloquent/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何對 Collection 做 Assertion?]]></title>
    <link href="http://oomusou.io/tdd/tdd-collection-assertion/"/>
    <id>http://oomusou.io/tdd/tdd-collection-assertion/</id>
    <published>2016-07-09T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p><code>Collection</code> 並非 PHP 原生的型別，是 Laravel 所擴充，因此 PHPUnit 並無法直接對其做 assertion，本文介紹兩種方式，一種是使用 PHPUnit 的 <code>assertArraySubset()</code>，一種是自己寫 Collection Macro，各有其優缺點，可視需求決定要使用哪種方法。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>實務上天天都有驗證 collection 的需求，在<a href="/tdd/tdd-repository-testing-mysql/">如何測試 Repository 模式(使用 MySQL)?</a>與<a href="/tdd/tdd-repository-testing-sqlite/">如何測試 Repository 模式(使用 SQLite)?</a> 一文中，對 collection 都沒有提出系統化的 assertion 方式，本文整理出實務上我最常用的兩種測試手法。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.37</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>我們將以 <code>Post</code> model 為例，顯示<code>所有文章</code>，並寫單元測試判斷結果是否如預期。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p>無論是對 repository 或 service 做單元測試，當其 field 或 method 回傳值為 <code>Collection</code>時，就必須面對如何 assertion 的問題。</p>
<h2 id="使用_assertArraySubset()">使用 assertArraySubset()</h2><hr>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/9fa92fbedd7f367b12510dbeee10bdf8020338d9" target="_blank" rel="external">第一種測試方法</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章1<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create([</span><br><span class="line">                <span class="string">'title'</span>       =&gt; <span class="string">"title&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'description'</span> =&gt; <span class="string">"desc&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'content'</span>     =&gt; <span class="string">"content&#123;$value&#125;"</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">            -&gt;displayAllPosts()</span><br><span class="line">            -&gt;toArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>12 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line">collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    Post::create([</span><br><span class="line">        <span class="string">'title'</span>       =&gt; <span class="string">"title&#123;$value&#125;"</span>,</span><br><span class="line">        <span class="string">'description'</span> =&gt; <span class="string">"desc&#123;$value&#125;"</span>,</span><br><span class="line">        <span class="string">'content'</span>     =&gt; <span class="string">"content&#123;$value&#125;"</span></span><br><span class="line">    ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>由於單元測試是使用 SQLite in Memory 為資料庫，只要測試一結束，記憶體就會釋放，因此每次測試都要重新新增資料。</p>
<p>使用 <code>Collection-&gt;each()</code> 將假資料透過 <code>Post::create()</code> 新增。</p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">    -&gt;displayAllPosts()</span><br><span class="line">    -&gt;toArray();</span><br></pre></td></tr></table></figure></p>
<p>測試 <code>PostService-&gt;displayAllPosts()</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此時 <code>PostService</code> 與 <code>displayAllPost()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostService</code> 與 <code>displayAllPost()</code>。</span></span></span></p>
<p><code>displayAllPosts()</code> 回傳的是 <code>Collection</code>，但 PHPUnit 無法對 <code>Collection</code> 做 assertion，必須先轉成 array。</p>
<p>26 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">    [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">    [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">    [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"><span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>這裡不能使用 <code>assertEquals()</code>，因為 <code>posts</code> table 還包含 <code>created_at</code> 與 <code>updated_at</code> 兩個欄位，若使用 <code>assertEquals()</code> 一定失敗，必須改用 <code>assertArraySubset()</code>。</p>
<p>也就是說，<code>$expected</code> 並不用包含 <code>Collection</code> 的所有欄位，只要包含你想測試的欄位即可。</p>
<p>剩下的 <code>PostService</code> 與 <code>PostRepository</code> 就以 TDD 的方式建立，在此不再贅述。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>若對剩下的步驟有興趣，詳細請參考 <a href="/phpstorm/phpstorm-refactor-namespace/">如何使用 PhpStorm 重構 Namespace?</a></span></span></span></p>
<h2 id="使用_Collection_Macro">使用 Collection Macro</h2><hr>
<p>使用 <code>assertArraySubset()</code> 雖然可行，但為了配合 <code>Collection-&gt;toArray()</code> 的格式，<code>$expected</code> 必須寫的比較繁瑣，連 key 都要交代，若 collection 只傳會我要驗證欄位的資料給 <code>$actual</code>，且 <code>$expected</code> 也只包含要驗證的資料，那測試程式就非常的簡潔。</p>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/0bc408423156af0c7602a6d4db60bdb1bd8b7b10" target="_blank" rel="external">第二種測試方法</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章2<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        collect(range(<span class="number">1</span>, <span class="number">3</span>))-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create([</span><br><span class="line">                <span class="string">'title'</span>       =&gt; <span class="string">"title&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'description'</span> =&gt; <span class="string">"desc&#123;$value&#125;"</span>,</span><br><span class="line">                <span class="string">'content'</span>     =&gt; <span class="string">"content&#123;$value&#125;"</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">            -&gt;displayAllPosts()</span><br><span class="line">            -&gt;pick([</span><br><span class="line">                <span class="string">'title'</span>,</span><br><span class="line">                <span class="string">'description'</span>,</span><br><span class="line">                <span class="string">'content'</span></span><br><span class="line">            ])</span><br><span class="line">            -&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title1'</span>, <span class="string">'desc1'</span>, <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title2'</span>, <span class="string">'desc2'</span>, <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title3'</span>, <span class="string">'desc3'</span>, <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(PostService::class)</span><br><span class="line">    -&gt;displayAllPosts()</span><br><span class="line">    -&gt;pick([</span><br><span class="line">        <span class="string">'title'</span>,</span><br><span class="line">        <span class="string">'description'</span>,</span><br><span class="line">        <span class="string">'content'</span></span><br><span class="line">    ])</span><br><span class="line">    -&gt;all();</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>pick()</code> 從 collection 只抓回要驗證欄位的資料，只要將<code>欄位名稱</code>以陣列方式傳入 <code>pick()</code> 即可。</p>
<p>但 collection 並沒有內建 <code>pick()</code>，稍後會自己建立 collection macro。</p>
<p><code>all()</code> 為 collection 內建 method，將 collection 轉成陣列。</p>
<p>31 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">    [<span class="string">'title1'</span>, <span class="string">'desc1'</span>, <span class="string">'content1'</span>],</span><br><span class="line">    [<span class="string">'title2'</span>, <span class="string">'desc2'</span>, <span class="string">'content2'</span>],</span><br><span class="line">    [<span class="string">'title3'</span>, <span class="string">'desc3'</span>, <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>因為已經被 <code>pick()</code> 轉成簡單的陣列，且不含 key，可以簡單的使用 <code>assertEquals()</code> 來做 assertion。</p>
<p><strong>AppServiceProvider.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/31983807ab1c69261858d9c1a0217f3a4e3032e5" target="_blank" rel="external">新增 Collection::macro(), pick()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Providers/AppServiceProvider.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Bootstrap any application services.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Register any application services.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> void</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        Collection::macro(<span class="string">'pick'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> collect(<span class="variable">$this</span>-&gt;items)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> collect(<span class="variable">$columns</span>)</span><br><span class="line">                    -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$column</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable">$value</span>-&gt;<span class="variable">$column</span>;</span><br><span class="line">                    &#125;)-&gt;all();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>25 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collection::macro(<span class="string">'pick'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> collect(<span class="variable">$this</span>-&gt;items)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$columns</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> collect(<span class="variable">$columns</span>)</span><br><span class="line">            -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$column</span>)</span> <span class="title">use</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;<span class="variable">$column</span>;</span><br><span class="line">            &#125;)-&gt;all();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>我們將使用 <code>map()</code> 將 <code>$columns</code> 所要的欄位顯示 map 回去。</p>
<p>因為 <code>$columns</code> 是陣列，我們要處理的是 <code>$columns</code> 每個元素的值，依此還要再用一層 <code>map()</code>。</p>
<p>重點在於只回傳 <code>$column</code> 欄位的值，因此我們使用 PHP 的變數讀取屬性的方式，以 <code>$value-&gt;$column</code> 的技巧，只回傳所需要欄位的值。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>詳細請參考<a href="/javascript/javascript-variable-property/">如何使用變數讀取 property?</a></span></span></span></p>
<p>因為牽涉到兩層巢狀 closure，所以程式可讀性較差，實務上建議 closure 只寫一層，不要寫兩層以上。</p>
<p>不過因為這段程式碼不需要維護，只要複製貼上到 <code>AppServiceProvider.php</code> 的 <code>register()</code>即可，我們的目的是要用 <code>pick()</code>，讓我們的測試程式更加精簡，不會去維護這段程式碼，因此還可以接受。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 PHPUnit 無法直接對 collection 做 assertion，<code>assertArraySubset()</code> 算是不滿意但可以接受的方式。</li>
<li><code>pick()</code> 比較接近我理想中對 collection 的 assertion 方式，但必須使用 collection macro 在 service provider 對 collection 做擴充，但只要複製貼上即可，以後就可以當成 collection 原生的 method 使用。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Freek Ven der Herten, <a href="https://murze.be/2015/12/using-collection-macros-in-laravel/" target="_blank" rel="external">Using collection macros in Laravel</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[介紹兩種方法對 Collection 做 Assertion]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Laravel Collection" scheme="http://oomusou.io/tags/Laravel-Collection/"/>
    
      <category term="PHPUnit" scheme="http://oomusou.io/tags/PHPUnit/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 將 new 重構成依賴注入?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-refactor-di/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-refactor-di/</id>
    <published>2016-07-08T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>為了可測試性與低耦合，我們會使用<code>依賴注入</code>取代 <code>new</code> 建立物件，對於 legacy code，當然可以使用手動的方式重構，透過 PhpStorm，我們可以使用更簡單的方式將 <code>new</code> 重構成 <code>依賴注入</code>。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>若使用 TDD 方式開發，為了隔離測試，一定會使用依賴注入建立物件，在<a href="/tdd/tdd-di/">深入探討依賴注入</a>一文中曾以可測試性角度探討之，不過在實務上，一直沒有以工具的角度探討如何實踐，本文將使用 PhpStorm，實際將 legacy code 的 <code>new</code> 重構成 <code>依賴注入</code>。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo/commit/b2de0729c2a8188b1f49ee1051d93aa4522cd764" target="_blank" rel="external">建立 PostService()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$postRepository</span> = <span class="keyword">new</span> PostRepository();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$postRepository</span>-&gt;getLatest3Posts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 legacy code，我們常會發現 class 直接在 method 內被 <code>new</code>，以執行結果角度而言是對的，但有以下兩個問題 :</p>
<ol>
<li>由於 <code>PostRepository</code> 在 <code>showLatest3Posts()</code> 內直接被 <code>new</code>，因此無法對 <code>PostRepository</code> 做隔離，導致無法對 <code>PostService</code> 做單元測試。</li>
<li>由於 <code>PostRepository</code> 在 <code>showLatest3Posts()</code> 內直接被 <code>new</code>，導致 <code>PostService</code> 直接相依於 <code>PostRepository</code>，耦合性太高，無法被抽換，違反 SOLID 原則的 <code>開放封閉原則</code>與<code>依賴反轉原則</code>。</li>
</ol>
<p>要解決這兩個問題，又不影響執行結果，最簡單的方式就是將 <code>new</code> <code>重構</code>成<code>依賴注入</code>。</p>
<h2 id="Extract_Field">Extract Field</h2><hr>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di000.png" alt=""></p>
<p>將來要將 <code>$postRepository</code> 重構成 field，使用 constructor injection 方式。</p>
<p>將滑鼠游標放在 <code>$postRepository</code> 變數上，按熱鍵 &#8963; + T，出現 <code>Refactor This</code> 選單，選擇 <code>Extract Field</code>。 </p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di001.png" alt=""></p>
<p>可以重構成兩種方式，因為將使用 constructor injection 來建立物件，不需要 <code>new</code>，因此選擇 <code>$postRepository</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di002.png" alt=""></p>
<p>PhpStorm 會自動使用原來變數名稱為 field 名稱。</p>
<ul>
<li><strong>Initialize in</strong> : 選 <code>Current method</code>。</li>
<li><strong>Visibility</strong> : 選 <code>private</code>。</li>
</ul>
<p>注意 <code>Initialize in</code> 並不是選擇 <code>Class constructor</code>，因為我們要用的是 constructor injection，而不是在 constructor 去 <code>new</code> 一個物件給 field。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di003.png" alt=""></p>
<p>PhpStorm 幫我們加上了 field，這是我們預期的。</p>
<p>但 PhpStorm 一樣是在 method 去 <code>new</code> 產生物件，只是改成 field，這不是我們想要的。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di004.png" alt=""></p>
<p>將 method 內有 <code>new</code> 的一行手動刪除。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di005.png" alt=""></p>
<p>在 field 加上 PHPDoc 描述型別。</p>
<p>在 PhpStorm 要替 field 加上 PHPDoc 很簡單，只要在 field 上面輸入 <code>/**</code>，再按 &#9251; 空白鍵，就會出現 <code>/** @var */</code>。</p>
<p>在 <code>@var</code> 之後輸入型別，輸入 <code>Po</code> 之後就會出現語法提示讓你用挑的。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di006.png" alt=""></p>
<p>在 field 加上型別描述，為 constructor injection 的 type hint </p>
<h2 id="Generate_Constructor">Generate Constructor</h2><p><img src="/images/phpstorm/phpstorm-refactor-di/di007.png" alt=""></p>
<p>按熱鍵 &#8984; + N，出現 <code>Generate</code> 選單，選擇 <code>Constructor</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di008.png" alt=""></p>
<p>選擇你要使用依賴注入的 field。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di009.png" alt=""></p>
<p>PhpStorm 自動幫我們在 constructor 產生依賴注入。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo/commit/682ab1054e279860ffe7ae31cf3ec61ba7e35dfc" target="_blank" rel="external">將 PostService() 重構成依賴注入</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> PostRepository */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showLatest3Posts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getLatest3Posts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="單元測試">單元測試</h2><hr>
<p><img src="/images/phpstorm/phpstorm-refactor-di/di010.png" alt=""></p>
<p>馬上跑單元測試，<span class="label label-success">綠燈</span> 打完收工。</p>
<p><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo/commit/a7c05c06d73529d6399a6d0167716561cee09c23" target="_blank" rel="external">單元測試 : 建立 PostServiceTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示最新3筆文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        factory(Post::class, <span class="number">100</span>)-&gt;create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = App::make(PostService::class)</span><br><span class="line">            -&gt;showLatest3Posts()</span><br><span class="line">            -&gt;pluck(<span class="string">'id'</span>)</span><br><span class="line">            -&gt;all();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = [<span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>];</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Legacy code 蠻免會使用 <code>new</code> 去建立物件，為了降低耦合度與增加可測試性，勢必改用依賴注入，透過 PhpStorm 的重構，可以快速地將 <code>new</code> 重構成依賴注入，非常方便。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormRefactorNew2DI_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[快速快速將 Legacy Code 重構成依賴注入]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 重構成 Closure?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-refactor-closure/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-refactor-closure/</id>
    <published>2016-07-07T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>在實務上，我們常常會遇到將重複程式碼重構成 closure 的需求，PhpStorm 沒辦法直接重構，需透過一些技巧。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>以前一直不知道如何將 closure 用在自己的程式上，一直到看了 <a href="https://adamwathan.me/refactoring-to-collections/" target="_blank" rel="external">Refactoring to Collection</a> 之後，整理了一篇<a href="/php/php-closure-practice/">實務上如何活用 Closure?</a>，不過當時仍然不知道要如何在 PhpStorm 完成，都是手動複製貼上，本文以 PhpStorm 的 <code>Extract Method</code>、<code>Extract Parameter</code> 與 <code>Surround With</code> ，將重複的程式碼重構成 closure。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="實際案例">實際案例</h2><hr>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/e27a224d1a15054f53965d73b8e3b690d0958caf" target="_blank" rel="external">新增 displayAllPost()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>21 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">        <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若我們發現以下程式碼是重複的，想將其提出成為一個 method<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br></pre></td></tr></table></figure></p>
<p>也就是除了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br></pre></td></tr></table></figure></p>
<p>之外，其他都是重複程式碼，想 <code>Extract Method</code>。</p>
<h2 id="Extract_Method">Extract Method</h2><hr>
<p>PhpStorm 內建的 <code>Extract Method</code> 無法簡單的萃取出這段程式碼，需靠一點技巧。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure000.png" alt=""></p>
<p>先選擇全部程式碼，按熱鍵 &#8963; + T，顯示 <code>Refactor This</code> 選單，選擇 <code>Extract Method</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure001.png" alt=""></p>
<p>輸入我們要重構的新 method 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure002.png" alt=""></p>
<p>PhpStorm 會幫我們選擇的程式碼重構成 <code>loopAllPosts()</code>，並且自動加上 <code>return $this-&gt;loopAllPosts()</code>。</p>
<p>但是這樣還沒完，因為<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br></pre></td></tr></table></figure></p>
<p>並不是我們要的，而是希望由 closure 傳入的，所以我們必須將這段程式碼 <code>Extract Parameter</code>。</p>
<h2 id="Extract_Parameter">Extract Parameter</h2><hr>
<p>不過 PhpStorm 也沒有辦法簡單的的將一段程式碼 <code>Extract Parameter</code>。</p>
<p>還記得國中幾何嗎? 我們常常需要加上<code>輔助線</code>才能證明，我們來替這段程式碼加上輔助線。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure003.png" alt=""></p>
<p>因為 PhpStorm 只能將一個字串或一個數字使用 <code>Extract Parameter</code>，而無法將一段程式碼去 <code>Extract Parameter</code>，因此我們將我們要萃取的程式碼先用<code>單引號</code>括起來，騙 PhpStorm 這是一個<code>字串</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure004.png" alt=""></p>
<p>將滑鼠游標放在<code>假字串</code>內，按熱鍵 &#8963; + T，顯示 <code>Refactor This</code> 選單，選擇 <code>Extract Parameter</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure005.png" alt=""></p>
<p>輸入 paramter 名稱。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure006.png" alt=""></p>
<p>PhpStorm 或幫我們將<code>假字串</code>以 <code>$closure</code> 變數取代，並將<code>假字串</code>搬到<code>loopAllPosts()</code>的參數。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure007.png" alt=""></p>
<p>將 <code>$post</code> 傳入 closure，這個 PhpStorm 沒辦法幫我們做，必須手動加上。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure008.png" alt=""></p>
<p>這個<code>假字串</code>很像我們的 closure，但仍然不是，我們需要繼續重構。</p>
<h2 id="Surround_With">Surround With</h2><hr>
<p>一樣重施<code>輔助線</code>技巧，PhpStorm 無法將字串重構成 function，需加上 <code>return</code>，騙 PhpStorm 可以將此段程式碼重構。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure009.png" alt=""></p>
<p>選擇 <code>return</code> 與 <code>假字串</code>，按熱鍵 &#8997; + &#8984; + T，出現 <code>Surround With</code> 對話框，選擇 <code>function</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>選擇部分，可將滑鼠游標放在<code>假字串</code>內，按熱鍵 &#8997; + &#8593; 數次，直到選到你要的部分為止。</span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure010.png" alt=""></p>
<p>PhpStorm 會幫我們加上 <code>function</code> 關鍵字，已經很接近 closure 了。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure011.png" alt=""></p>
<p>手動將剛剛的<code>輔助線</code>全部刪除，並加上 <code>$post</code> 參數。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure012.png" alt=""></p>
<p>按熱鍵 &#8997; + &#8984; + T，PhpStorm 會將我們將程式重新 format 成漂漂亮亮符合 <code>PSR-2</code> 格式的程式碼。</p>
<p><strong> PostService.php </strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/fc815ed863aa1b605ed5363d668143c687a40715" target="_blank" rel="external">重構成 Closure</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;loopAllPosts(<span class="function"><span class="keyword">function</span> <span class="params">(Post <span class="variable">$post</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$txt</span> = <span class="string">"&#123;$post-&gt;id&#125; : &#123;$post-&gt;title&#125;"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="variable">$txt</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">loopAllPosts</span><span class="params">(Closure <span class="variable">$closure</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">          <span class="variable">$posts</span> = <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">foreach</span> (<span class="variable">$posts</span> <span class="keyword">as</span> <span class="variable">$post</span>) &#123;</span><br><span class="line">            <span class="variable">$closure</span>(<span class="variable">$post</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">return</span> <span class="variable">$posts</span>-&gt;count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="單元測試">單元測試</h2><hr>
<p><img src="/images/phpstorm/phpstorm-refactor-closure/closure013.png" alt=""></p>
<p>馬上跑單元測試，<span class="label label-success">綠燈</span> 打完收工。</p>
<p><strong> PostServiceTest.php </strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo/commit/93611680214f43c8f177b86e6159b3342204f75e" target="_blank" rel="external">單元測試 : 顯示所有 Post()</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"> </span>&#123;</span><br><span class="line">     <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有<span class="title">Post</span><span class="params">()</span></span><br><span class="line">     </span>&#123;</span><br><span class="line">         <span class="comment">/** arrange */</span></span><br><span class="line">         <span class="variable">$expected</span> = <span class="number">10</span>;</span><br><span class="line">         <span class="variable">$target</span> = App::make(PostService::class);</span><br><span class="line"> </span><br><span class="line">         <span class="comment">/** act */</span></span><br><span class="line">         <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;displayAllPosts();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">/** assert */</span></span><br><span class="line">         <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Summary">Summary</h2><hr>
<ol>
<li>將全部程式碼以 <code>Extract Method</code> 提煉成新的 method。</li>
<li>將不同的程式碼加上單引號變成字串，使用 <code>Extract Parameter</code> 提煉參數。</li>
<li>將<code>假字串</code>使用 <code>Surround With</code> 變成 closure。</li>
<li>將<code>輔助線</code>刪除。</li>
<li>跑單元測試確認重構成功。</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm 內建的 <code>Extract Method</code> 與 <code>Extract Parameter</code>，搭配<code>輔助線</code>的小技巧，一樣的可以快速地重構出 closure。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52LearnClosureByLaravel_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[透過輔助線重構成 Closure]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[實作模式筆記 (Motivation)]]></title>
    <link href="http://oomusou.io/ip/ip-motivation/"/>
    <id>http://oomusou.io/ip/ip-motivation/</id>
    <published>2016-07-04T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>以軟體成本的角度，闡明使用模式除了可以增加程式可讀性，還可大幅降低維護成本。<br><a id="more"></a></p>
<h2 id="Motivation">Motivation</h2><hr>
<p>本文為 Kent Beck 的 <a href="https://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091" target="_blank" rel="external">Implementation Patterns</a> 一書的讀書筆記，主要是整理給自己複習用，並加上自己的腦補。</p>
<h2 id="軟體整體成本">軟體整體成本</h2><hr>
<p><img src="/images/ip/ip-motivation/mot000.png" alt=""></p>
<p>軟體整體成本 = 開發成本 + 維護成本。</p>
<blockquote><p>Once the industry gained experience with software development, it was a big surprise to many that the cost of maintenance is much higher than than the cost of initial development.</p>
<p>當業界累積了軟體開發經驗後，才驚覺軟體的維護成本源遠高於它的開發成本。</p>
</blockquote>
<p>大部分人覺得軟體成本在於開發成本，只要開發完成後，維護成本很低，其實剛好相反，軟體最大的成本是在維護。</p>
<blockquote><p>Maintenance is expensive because understanding existing code is time-cosuming and error-prone. Making changes is generally easy when you know what needs changing. Learning what the current code does is the expensive part. Once the changes are made, they need to be tested and deployed.</p>
<p>軟體的昂貴維護成本在於理解既有的程式碼非常耗時，而且容易出錯。當你知道要在哪裡修改之後，維護反而是輕而易舉的事情。理解目前的程式碼是最昂貴的維護成本。修改之後，還必須進行測試與部署。</p>
</blockquote>
<p><img src="/images/ip/ip-motivation/mot001.png" alt=""></p>
<p>軟體維護成本 = 理解程式碼 + 修改程式碼 + 測試程式碼 + 部署程式碼</p>
<p>其中最昂貴的成本是<code>理解程式碼</code>。</p>
<h2 id="降低軟體成本">降低軟體成本</h2><hr>
<blockquote><p>One strategy for reducing overall cost is to invest more in initial development in hope of reducing or eliminating the need for maintenance. Such efforts have generally failed to reduce overall costs. When code needs to change in unanticipated ways, no amount of forethought can perfectly prepare the code for change.</p>
<p>其中一種降低軟體整體成本的策略是「在開發初期花更多時間制定規格與瞭解需求，設計萬全的架構，減少將來維護的成本」，但這種方式往往會失敗。當「計畫趕不上變化時」，之前所做的萬全準備都派不上用場。</p>
</blockquote>
<p>硬體因為規格明確，常常使用大量的 over design 來應付未來變化；但軟體的規格常伴隨著需求而變動，因此即時 over design 也常常用不到。</p>
<blockquote><p>The premature attemps to make the code general enough to meet future needs often interfere with unacticipated changes that turn out to be necessary.</p>
<p>人們可能為了防備將來發生變化，而過早的考慮程式碼的通用性，但如果出現了沒有預料而又勢在必行的變化，先前的做法往往就會與現實發生衝突。</p>
</blockquote>
<p>假如 over design 而將來能用到還沒關係，就怕 over design 還是趕不上需求的變化。</p>
<blockquote><p>My strategy for reducing overall costs is to ask all programmers to address the cost of understanding code during the maintenance phase by focusing on communicating, programmer-to-programmer. The immediate benefits of clear code are fewer defects, easier sharing of code, and smoother development.</p>
<p>我用來減少整體成本的策略是注重程式可讀性，減少理解程式碼成本。其立即的收益是程式碼 bug 更少、程式碼更易於共用、開發曲線也更為平坦。</p>
</blockquote>
<p>軟體維護成本中最昂貴的就是理解程式碼，從程式可讀性下手，將可最快有效降低軟體維護成本。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>軟體最大的成本在於維護，而維護最大的成本就是理解程式碼，使用模式可幫助程式可讀性，可以立即有效降低軟體成本。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Kent Beck, <a href="https://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091" target="_blank" rel="external">Implementation Patterns</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Ch.4 Motivation]]>
    
    </summary>
    
      <category term="Implementation Pattern" scheme="http://oomusou.io/tags/Implementation-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[實作模式筆記 (A Theory of Programming)]]></title>
    <link href="http://oomusou.io/ip/ip-theory/"/>
    <id>http://oomusou.io/ip/ip-theory/</id>
    <published>2016-07-01T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>此章討論<code>程式設計理論</code>，提出了 3 條<code>程式設計價值觀</code>與 6 條<code>程式設計原則</code>，這些都是所有程式語言都能使用的普世價值觀與原則，當我們遇到一個全新的問題，沒有模式可以使用時，可以轉而思考這些價值觀與原則；當我們學習新的程式語言時，也可以藉由這些價值觀與原則為起點，一樣可以寫出優秀的程式碼。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>本文為 Kent Beck 的 <a href="https://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091" target="_blank" rel="external">Implementation Patterns</a> 一書的讀書筆記，主要是整理給自己複習用，並加上自己的腦補。</p>
<h2 id="程式設計理論">程式設計理論</h2><hr>
<blockquote><p>No lists of patterns, no matter how exhaustive, can cover every situation that comes up while programming. Eventually (or even frequently) you’ll come upon a situation where none of the cookie cutters fits. This need for general approaches to unique problems is one reason to study the theory of programming. Another is the sense of mastery that comes of knowing both what to do and why.</p>
<p>無論蒐集多麼完整的模式，也無法涵蓋所有的需求。最終你會遇到沒有任何模式適用的情況，因此你需要通用的解決問題方法，這也是我們為什麼要學習程式設計理論的原因，其次是「知其然，亦知其所以然」所帶來的成就感。</p>
</blockquote>
<blockquote><p>Each pattern carries with it a little bit of theory. There are larger and more pervasive forces at work in programming than covered in individual patterns. They are divided into two types : values and principles.</p>
<p>每個模式都有一些理論基礎，在程式設計中有一些更基礎的理論，不是單一模式可以涵蓋的，那就是<code>程式設計價值觀</code>與<code>程式設計原則</code>。</p>
</blockquote>
<h2 id="程式設計價值觀">程式設計價值觀</h2><hr>
<blockquote><p>Three values that are consistent with excellence in programming are communication, simplicity, and flexibility. While these three sometimes conflict, more often they are complement each other. The best programs offer many options for future extension, contain no extraneous elements, and are easy to read and understand.</p>
<p>有三種價值觀與優秀程式設計是一脈相承的，他們分別是<code>程式可讀性</code>、<code>程式簡潔性</code>、<code>程式靈活性</code>，雖然他們有時候會有所衝突，但更多時候，他們是互補的。好的程式是容易閱讀與理解，不包含多餘的元素，且為將來擴充提供眾多選項。</p>
</blockquote>
<p>通常程式靈活性與程式簡潔性會有所衝突，這也是為什麼在設計模式中，常會發現很多 interface 存在，雖然成就了靈活性，卻讓架構比較複雜，所以才有 TDD 讓我們不 over design。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>稍後將以 AWS 與阿里雲的雲端服務為例解釋。</span></span></span></p>
<h3 id="程式可讀性">程式可讀性</h3><hr>
<blockquote><p>Code communicates well when a reader can understand it, modify it, or use it.</p>
<p>當閱讀者能理解某段程式碼，並進一步修改它或使用它，那麼這段程式碼就是可讀性高的程式碼。</p>
</blockquote>
<p>程式的可讀性是可維護性的首要條件，要修改或新增功能，首先必須要讀懂原來的程式碼，才能在適當的地方修改或增加程式。</p>
<blockquote><p>While programming it’s tempting to think only of the computer. However, good things happen when I think of others while I program. I get cleaner code that is easier to read, it is more cost-effective, my thinking is clearer, I give myself a fresh perspective, my stress level drops, and I meet some of my social needs.</p>
<p>在設計程式時，我們很容易從電腦的角度進行思考，但只有一面進行程式設計，一面考慮其他閱讀者是否能讀懂我寫的程式，才能寫出容易閱讀的程式碼。在這種前提下寫出來的程式碼，將更容易閱讀、更有效率、更能清晰地展現出我的想法，它給了我全新的視野、減輕了我的壓力，且社會需求也得到滿足。</p>
</blockquote>
<ul>
<li><strong>幫助思考</strong></li>
</ul>
<p>達成程式可讀性的另外一個法門，就是採用 TDD 方式開發，由於先寫測試，我們會以可測試性的角度去思考，而不是從電腦的角度去思考。</p>
<p>可測試性高通常代表 3 件事情 :</p>
<ul>
<li>API 好用，所以好測試，符合需求且貼近現實。</li>
<li>測試案例好寫，表示你的設計符合<strong>單一職責</strong>原則。</li>
<li><p>容易隔離測試與 mock，表示你的程式耦合度低。</p>
</li>
<li><p><strong>容易閱讀</strong></p>
</li>
</ul>
<p>當測試好寫，就代表你的 method 與 API 好用好理解，也就是程式可讀性高。</p>
<ul>
<li><strong>減輕壓力</strong></li>
</ul>
<p><img src="/images/ip/ip-theory/theory003.png" alt=""></p>
<p><img src="/images/ip/ip-theory/theory000.png" alt=""></p>
<p>傳統方式開發必須同時考慮眾多需求，腦筋容易打結，但 TDD 要你一次只專心一件事情 : <code>把紅燈變綠燈</code>，減輕開發時的壓力。</p>
<ul>
<li><strong>社會需求</strong></li>
</ul>
<p>人類是社會性的物種，明確的完成「其他人閱讀程式碼」的需求，而不是「悶著頭自己寫程式」，完成每個人的社會需求。</p>
<blockquote><p>Every time a bit of logic was a little hard to explain, it was easier to rewrite the code than explain why the code was hard to understand.</p>
<p>每次遇到難以解釋的邏輯，將程式重新改寫，會比去理解它容易。</p>
</blockquote>
<p>其實遇到難以解釋的邏輯，只要<code>重構</code>即可，不需重寫，只要我們有測試做保障，就能將原來難以解釋的邏輯重構成容易閱讀的程式碼。</p>
<blockquote><p>The majority of the cost of software is incurred after the software has been first deployed.</p>
<p>絕大部分的軟體成本，都是在軟體第一次部署後才產生。</p>
</blockquote>
<p>Kent Beck 在書中的程式可讀性與程式靈活性都提到這句話。</p>
<p>軟體第一次部署後，使用者才開始使用，有使用才會有新的需求，才需要去維護程式。</p>
<ul>
<li>必須先閱讀程式</li>
<li>然後才去修改程式</li>
<li>最後確保是否會改A壞B</li>
</ul>
<p>這才是軟體絕大部分的成本。</p>
<p>若程式可讀性不高，維護程式的第一步就卡關了，這也是最大的維護成本。</p>
<h3 id="程式簡潔性">程式簡潔性</h3><hr>
<blockquote><p>Eliminating excess complexity enables those reading, using, and modifying programs to understand them more quickly. It is this excess complexity that removes value from software, both by making the software less likely to run correctly and more difficult to change sucessfully in the future.</p>
<p>去除多餘的複雜性可以讓那些閱讀、使用與修改程式碼的人更容易理解。多餘的複雜性降低了軟體的價值，一方面<br>降低了軟體正確執行的可能性，另一方面也增加了將來維護程式碼的難度。</p>
</blockquote>
<p>要去除程式碼的複雜度，可以跑測試的 coverage，若 coverage 沒有 100%，就有幾種可能 :</p>
<ol>
<li>有些程式碼永遠跑不到，也就是沒有任何需求，卻有這些程式碼，這就增加了複雜性。</li>
<li>也有可能是測試案例不完全，導致程式碼沒有執行到。</li>
</ol>
<p>不論是哪一種，寫測試都可以幫著我們達成程式簡潔性。</p>
<blockquote><p>Apply simplicity at all level.</p>
<ul>
<li>Format code so no code can be deleted without losing information.</li>
<li>Design with no extraneous elements.</li>
<li>Challenge requirements to find those that are essential.</li>
</ul>
<p>Eliminating excess complexity illuminates the remaining code.</p>
<p>在程式碼的各個層次都要達到程式簡潔性。</p>
<ul>
<li>對程式碼重新排版與重構，刪除沒有必要的程式碼。</li>
<li>不要沒有需求的部分做 over design。</li>
<li>對需求提出質疑，找出真正不可或缺的需求。</li>
</ul>
<p>將程式碼中多餘的複雜度去除後，你的程式碼將會<code>閃亮亮</code>。</p>
</blockquote>
<blockquote><p>However, I find a simplication that would make a program harder to understand. I choose communication over simplicity in these case.</p>
<p>有時候，當我發現程式簡潔性會造成程式碼難以理解時，我會選擇程式可讀性。</p>
</blockquote>
<p>重構的 <code>Inline Temp</code> 與 <code>Replace Temp with Query</code>，雖然會讓程式碼行數變少，但有時候用過頭，會讓程式過長，導致橫向發展，程式碼雖然看起來簡潔了，但卻變得難以閱讀，應以程式可讀性為優先考量。</p>
<p><code>eval()</code> 的使用也要小心，有時雖然程式碼簡潔了，但卻很容易喪失可讀性。</p>
<h3 id="程式靈活性">程式靈活性</h3><hr>
<blockquote><p>Of the three values listed here, flexibility is the justification used for the most ineffective coding and design practices</p>
<p>三種價值觀中，程式靈活性是最常用來判斷程式碼與設計好壞的指標。</p>
</blockquote>
<blockquote><p>Why all the complexibility? Flexibility. Programs should be flexible, but only in ways the change. If the constant never changes, all the complexibility is cost without benefit.</p>
<p>為什麼要將程式變得這麼複雜呢? 常常是為了程式靈活性，但某些需求常常改變時，程式碼才需要這樣寫；假如某些需求從來沒改變過，為了程式靈活性而犧牲程式簡潔性，將沒有任何意義。</p>
</blockquote>
<p>如使用雲端服務，若需求只有 AWS，其實直接使用 AWS 亦未嘗不可，雖然耦合性較高，但畢竟<code>需求</code>就是這樣，若需求可能同一個網站會放在 AWS 與阿里雲，且分別使用各自的雲端服務，則應該使用 interface 切開，由使用者的需求觀點定義 interface，再以實踐該 interface 的 class 去使用 AWS 與 阿里雲的 API，而不是在 controller 內直接使用 AWS 或阿里雲的雲端服務，如此 controller 會使用相同的一份 code 去使用雲端服務，只要 service provider 一開使去 <code>app::bind()</code> AWS 或阿里雲的 class 即可。</p>
<p>這種方式的程式靈活性雖高，但缺犧牲了程式簡潔性，多了 interface，還多了 service provider，因此物件導向才要搭配 TDD 與重構，一開始需求很單純時，只求 <span class="label label-success">綠燈</span> 即可，儘管耦合性較高，但符合程式簡潔性，將來需求出現，再重構成 interface，也要繼續 <span class="label label-success">綠燈</span>，達成程式靈活性，TDD 與重構使得程式在程式靈活性與程式簡潔性取得一個平衡點，而不必一開始就 over design 使用 interface，在沒有需求的前提下提早放棄<code>程式簡潔性</code>。</p>
<p>程式靈活性與程式簡潔性雖然衝突，寫程式應該先考慮程式簡潔性，除非是有<code>需求</code>，才會考慮程式靈活性。</p>
<blockquote><p>The majority of the cost of software is incurred after the software has been first deployed, programs should be easy to change.</p>
<p>絕大部分的軟體成本，都是在軟體第一次部署後才產生。程式碼必須能容易被修改。</p>
</blockquote>
<p>除了在程式可讀性提到這句話外，在程式靈活性又再次提到這句話。</p>
<p>軟體第一次部署後，使用者才開始使用，有使用才會有新的需求，才需要去維護程式。</p>
<ul>
<li>必須先閱讀程式</li>
<li>然後才去修改程式</li>
<li>最後確保是否會改A壞B</li>
</ul>
<p>這才是軟體絕大部分的成本。</p>
<p>若<code>程式可讀性</code>很高，第一關過了。</p>
<p>但有於設計的耦合度太高，可能造成程式碼很難修改，或者只要修改就要改很多地方，而造成到處改A壞B，這就會造成很嚴重的維護成本。</p>
<p>所以程式碼必須要設計的容易被修改來降低維護成本。</p>
<blockquote><p>The flexibility I imagine will be needed tomorrow, though, is likely to be not what I need when I change the code. That’s why the flexibility of simplicity and extensive tests is more effective than the flexibility offered by speculative design. </p>
<p>「憑空想像而非真正需求」的 over design，與「為了程式好修改」的程式靈活性是兩碼子事。這也就是為什麼「程式簡潔導致程式好修改與完整的測試」比「為了憑空想像的需求所設計的靈活性」更為有效的原因。</p>
</blockquote>
<p>很多人會以「若將來有這個需求」為前提，提早使用某個模式，開始大量使用 interface，問題連<code>需求</code>都沒有，也無從寫測試案例作測試，這種就是 over design，提早增加複雜度，這就是「憑空想像的需求所設計的靈活性」。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>中譯本是翻譯成 : 這就是「簡單性和大規模測試所帶來的靈活性」比「專門設計出來的靈活性」更為有效的原因。我個人認為 flexibility of simplicity 是由<code>簡單所導致的靈活</code>，而非由<code>測試所帶來的靈活</code>。</span></span></span></p>
<blockquote><p>Choose patterns that encourage flexibility and bring immediate benefites. For patterns with immediate costs and only deferred benefits, often patience is the best strategy. Put theme back in the bag until they are needed. Then you can apply them in precisely the way they are needed.</p>
<p>先選擇那些能增加<code>程式靈活性</code>與立即幫助的模式。有些模式複雜度較高，可能需大規模更改架構而增加成本，而其收益卻要一段時間才能看的到，對於這類模式，可能需要些耐心<code>讓子彈飛一下</code>，將這些模式以學習的角度先放在自己的工具箱裡，等到真正有<code>需求</code>，或你能精確地駕馭這些模式時再拿出來用。</p>
</blockquote>
<div class="alert alert-info"><i class="fa fa-info"></i>  程式可讀性 > 程式簡潔性 > 程式靈活性</div>
<p>若三個價值觀相衝突 :</p>
<ul>
<li>優先考慮程式可讀性，不能因為程式簡潔性而喪失程式可讀性。</li>
<li>若無<code>需求</code>，優先考慮程式簡潔性，若有<code>需求</code>，則允許喪失些程式簡潔性換取程式靈活性，但程式可讀性則無從妥協。</li>
</ul>
<h2 id="程式設計原則">程式設計原則</h2><hr>
<blockquote><p>The principles described here aren’t as far-reaching or pervasive as the values, but each one is expressed by many of the patterns. The principles bridged the values, which are universal but often difficult to apply directly, and the patterns, which are clear to apply but specific.</p>
<p><code>程式設計原則</code>不像<code>程式設計價值觀</code>那般意義深遠與遙不可及，但每個原則都在許多模式中都可以看得到。程式價值觀具有普世價值，但卻往往難以實現；模式雖然可以直接應用，但卻是只能針對某些需求。程式設計原則剛好介於價值觀與模式之間，扮演橋樑的角色。</p>
</blockquote>
<p> 每一個模式都在某種程度實現了程式可讀性、程式簡潔性與程式靈活性的價值觀，但價值觀較偏人的角度思考，但程式設計原則則是以程式碼的角度思考。</p>
<blockquote><p>I have found it valuable to make the principles explicit for those situations where no patterns applies, or when two mutually exclusive patterns apply equally.</p>
<p>我發現程式設計原則的可貴之處在於那些「沒有模式可用」或「模式之間互相矛盾」的場合，如果把程式設計原則弄清楚，對解決疑難雜症很有幫助。</p>
</blockquote>
<p>當模式之間互相矛盾時，最好的方式就是讓程式設計原則說話，而不是讓模式之間爭來爭去。</p>
<p>如果遇到獨一無二的新需求，因而沒有模式可用時，可以轉而思考程式設計原則，甚至可以因此想出新的模式。</p>
<blockquote><p>When I encounter a new programming language I use my understanding of principles to develop an effective style of programming. I don’t have to ap existing style or, worse, cling to my style in some other programming language. Understanding principles give me a chance to learn quickly and act with integrity in novel situations.</p>
<p>當我使用新的程式語言時，我可以根據自己對程式設計原則的理解發展出有效的程式設計風格，不必盲目模仿現有的程式語言風格，更不用拘泥於將其他語言風格帶入新的程式語言，對於程式設計原則的徹底理解，能快速地學習新語言，即時在全新的語言也能寫出符合程式設計原則的好程式。</p>
</blockquote>
<p><img src="/images/ip/ip-theory/theory001.png" alt=""></p>
<p><img src="/images/ip/ip-theory/theory002.png" alt=""></p>
<p>程式設計原則講的是程式設計中，普世的原則，一個程式語言可能有盛有衰，你也可能因為換了工作而換了其他程式語言，無論你使用任何程式語言，最後都會用到這些原則。</p>
<h3 id="避免_Side_Effect">避免 Side Effect</h3><blockquote><p>Structure the code so changes have local consequences. If a change here can cause a problem there, then the cost of the changes rises dramatically.</p>
<p>設計程式架構時，要使得修改程式碼所產生的影響不至於改A壞B。如果這裡修改，會造其他地方出問題，如此將造成巨大的維護成本。</p>
</blockquote>
<p>有幾個具體方法，可以避免改 A 壞 B 所造成的 side effect:</p>
<ul>
<li>減少使用全域變數。</li>
<li>減少使用 pass by reference，盡量使用 pass by value。</li>
<li>符合 SOLID 的<code>單一職責原則</code>，不會什麼修改都會影響到我。</li>
<li>符合 SOLID 的<code>開放封閉原則</code>，原來的程式不再修改，確保原來的程式不再出錯。</li>
<li>符合 SOLID 的<code>最小知識原則</code>，盡量減少 public method。</li>
<li>符合 SOLID 的<code>依賴反轉原則</code>，將低耦合度。</li>
<li>寫測試，若真的還是改 A 壞 B，可以馬上發現。</li>
</ul>
<h3 id="避免程式碼重複">避免程式碼重複</h3><blockquote><p>A principle that contribute to keeping consequences local is to minimize repetition.</p>
<p>避免程式碼重複亦有助於避免改A壞B。</p>
</blockquote>
<p>當你有相同的程式碼散落在專案各處，當需求改變，需要變更邏輯時，就必須每個地方去改，但維護的人可能不知道這段邏輯也出現在其他地方，因此而沒改到。</p>
<blockquote><p>Copied code is only one form of repetition. Parallel class hierarchies are also repetitive.</p>
<p>複製貼上的程式碼只是其中一種的程式碼重複，平行的 class 架構也是程式碼重複。</p>
</blockquote>
<p><img src="/images/ip/ip-theory/theory004.png" alt=""></p>
<p>當你在某一個 class 繼承架構下新增 class 時，你發現還必須手動在另外一個 class 繼承架構下新增 class，但問題維護的人可能並不知道，因此而造成修改後的程式錯誤。</p>
<p>由於這兩個 class 繼承架構的相似度很高，才會導致平行 class 架構，應該使用重構的 <code>Move Field</code> 與 <code>Move Method</code> 整合成一個 class 繼承架構，或使用設計模式的 <code>Bridge</code> 模式，讓實作與抽象可以各自擴展。</p>
<blockquote><p>Duplication is not always abvious until after it has been created, and sometimes not for a while even then. Having seen it I can’t always think of a good way to eliminate it. Dupilcation isn’t evil, it just raises the cost of making changes.</p>
<p>程式碼重複在開發時不太容易被發現，有時候要在一段時間後才會被察覺。即使發現了程式碼有重複之處，我也不見得每次都能將重複程式碼拿掉。程式碼重複並不是罪過，只是會增加程式碼維護時的成本。</p>
</blockquote>
<p>儘管使用了 TDD 開發方式，有時可能還是會遇到程式碼重複，此時只要使用<code>重構</code>將重複的程式碼萃取出來即可。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>中譯本並沒有將 <code>Having seen it I can&#39;t always think of a good way to eliminate it.</code> 這句加以翻譯。</span></span></span></p>
<blockquote><p>One of the ways to remove duplication is to break programs up into many small pieces – small statements, small methods, small objects, small packages. Large peices of logic tend to duplicate parts of other large pieces of logic.</p>
<p>其中一個避免程式碼重複的手段，就是將程式拆成更多更小部分 : <code>更短的敘述、更小的方法、更小的物件、更小的套件</code>，一大段的程式碼邏輯很容易與其他程式碼邏輯重複。</p>
</blockquote>
<p>一個很長的 method，很難看出重複的部分，但是短短的 method，就很容易看出重複的部分。</p>
<p>重構也是鼓勵大家使用 <code>Extract Method</code> 將程式拆成眾多短短的 method，除了可讀性高外，也更能避免程式碼重複。</p>
<p>使用 TDD 開發也可以避免程式碼重複，為了測試案例明確，為了好測試，所寫出的 method 都是短短的，因為一個 method 太長，就會很難寫測試案例，也會違反 SOLID 的 <code>單一職責原則</code>。</p>
<p>有幾個具體方法，可以避免程式碼重複</p>
<ul>
<li>符合 SOLID 的<code>單一職責原則</code>，避免在單一 method 內寫很長的邏輯。</li>
<li>符合 SOLID 的<code>介面隔離原則</code>，職責明確的 interface 有助於寫出<code>單一職責</code>的 class。</li>
</ul>
<p>在使用MVC架構時，以下為初學者常犯的錯 :</p>
<ul>
<li><p><strong>重複的資料庫邏輯</strong><br>將資料庫邏輯寫在 controller 內，若其他 controller 也使用相同的邏輯，直接將資料庫邏輯複製貼上到其他 controller 內，導致相同的資料庫邏輯散佈在不同 controller。建議改用 Repository 模式，將資料庫邏輯統一寫在 repository 內，當需要使用相同的資料庫邏輯時，只要使用依賴注入到 controller 即可。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於 Repository 模式，詳細請參考<a href="/laravel/laravel-repository/">如何使用 Repository 模式?</a></span></span></span></p>
</li>
<li><p><strong>重複的商業邏輯</strong><br>將商業邏輯寫在 controller 內，若其他 controller 也使用相同的邏輯，由於無法 A controller 呼叫 B controller，因此直接將商業邏輯複製貼上到其他 controller 內，導致相同的商業邏輯散佈在不同 controller。建議改用 Service 模式，將商業邏輯統一寫在 service 內，當需要使用相同的商業邏輯時，只要使用依賴注入到 controller 即可。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>關於 Service 模式，詳細請參考<a href="/laravel/laravel-service/">如何使用 Service 模式?</a></span></span></span></p>
</li>
<li><p><strong>重複的顯示邏輯</strong><br>講顯示邏輯寫在 blade 內，若其他 blade 也使用相同的邏輯，直接將顯示邏輯複製貼上到其他 blade 內，導致相同的顯示邏輯散佈在不同 blade。建議改用 Presenter 模式，將顯示邏輯統一寫在 presenter 內，當需使用相同的顯示邏輯時，只要使用依賴注入到 blade 即可。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>關於 Presenter 模式，詳細請參考<a href="/laravel/laravel-presenter/">如何使用 Presenter 模式?</a></span></span></span></p>
</li>
</ul>
<h3 id="將資料與邏輯封裝在一起">將資料與邏輯封裝在一起</h3><blockquote><p>Another principle corollary to the principle of local consequence is keeping logic and data together. Put logic and the data it operates on near each other, in the same method if posible, or the same object, or at least the same package.</p>
<p>為了避免 Side Effect 的另一個方法就是將資料與邏輯封裝在一起，盡量放在同一個 method 中，或者退而求其次，在同一物件內，最少也要是同一 package 裡。</p>
</blockquote>
<p>將資料與行為封裝在一起，也是物件導向的<code>繼承</code>、 <code>封裝</code>、<code>多型</code>中最基本的特性之一的<code>封裝</code>，通常需求發生變化時，資料與邏輯行為都是一起變化，將其封裝在一起，可將程式碼修改所產生的副作用侷限在 method 中，或者在同一個物件內。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>這裡的 package，並不是 PHP 所認知的 package，而是如 C# 的 Dll 與 Assembly，有特別提供 <code>internal</code> 作用域，其 scope 只侷限在此 Dll 與 Assembly，只有該 Dll 與 Assembly 可以存取。</span></span></span></p>
<blockquote><p>It’s not always obvious at first where logic or data should go to satisfy this principle. I may be writing code in A and realize I need data from B. It’s only after I have the code working that I notice that it is too far from the data.</p>
<p>在一開始寫程式時，我們往往不太清楚資料與邏輯該放在哪裡。我可能在 A 寫邏輯，才意識到需要 B 的資料。直到程式碼真正執行一段時間之後，我才意識到資料與邏輯太遠了，應該將他們封裝在一起。</p>
</blockquote>
<p>連 Kent Beck 都不太確定資料與邏輯一開始要寫在哪裡，所以一開始寫程式時，不用太拘泥於資料與邏輯該放在哪個 class 才適當，只要當下思考過放在哪個 class 最適合、TDD 能 <span class="label label-success">綠燈</span> 即可，之後再不斷的重構，靠 <code>Move Field</code> 與  <code>Move Method</code> 將資料與邏輯慢慢的搬到最適合的 class 即可。</p>
<p>此外，原來資料與邏輯放在 A class 適合，也可能隨著<code>需求</code>的改變，變成放在 B class 更適合，此時只要繼續地靠 <code>Move Field</code> 與 <code>Move Method</code> 將資料與邏輯從 A class 重構到 B class 即可，也就是<code>持續重構</code>的概念。</p>
<h3 id="程式碼一致性">程式碼一致性</h3><blockquote><p>Symmetry in code is where the same idea is expressed the same way everywhere it appears in the code.</p>
<p>無論在什麼地方，相同的概念都應該以相同的形式呈現。</p>
</blockquote>
<p>如此閱讀者只需理解一部份的程式碼，就能以推理的方式去理解其他部份的程式碼。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>中譯本將 Symmetry 翻譯成<code>對稱性</code>，個人覺得不妥，翻譯成<code>一致性</code>比較符合程式設計師的用語。</span></span></span></p>
<ul>
<li><strong>以一致性的參數使用類似的方法</strong></li>
</ul>
<p>在 Laravel 的 Collection 中，絕大部分 method 的參數都是以 <code>$value</code>, <code>$key</code> 的順序</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>, <span class="variable">$key</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* some condition */</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>, <span class="variable">$key</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span> * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>, <span class="variable">$key</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span> &gt; <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>但有些卻是 <code>$key</code>, <code>$value</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;contains(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$key</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span> &gt; <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;first(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$key</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span> &gt; <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>這種 API 設計就違反了程式碼一致性。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>關於 Laravel 的 Collection 問題，我私下已經透過 Twitter 與 Taylor Otwell 確認，Taylor 說 Laravel 5.3 將會統一 Collection 的 API，不再有 <code>$value</code> 與 <code>$key</code> 不一致的問題。</span></span></span></p>
<ul>
<li><strong>以一致性的觀點替方法命名</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    count++;</span><br><span class="line">    output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>input()</code> 與 <code>output()</code> 都是以<code>需求</code>角度命名，但 <code>count++</code> 卻是實作，程式可讀性也不高，需加以重構。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    incrementCount();</span><br><span class="line">    output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>count++</code> 重構成 <code>incrementCount()</code> 之後，程式可讀性提高，但卻是以<code>實作</code>角度命名，與 <code>input()</code> 與 <code>output()</code> 以<code>需求</code>角度命名不一樣，違反程式碼一致性。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    input();</span><br><span class="line">    tally();</span><br><span class="line">    output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>tally()</code> 為計算，是以<code>需求</code>角度命名，程式可讀性更高，且符合程式碼一致性要求。</p>
<p>此外，這個範例還告訴我們另外一個重要的觀念 :</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  把抽象出來的方法放在一起，而不要把底層程式碼和抽象出來的方法放在一起</div>
<p>所謂<code>抽象出來的方法</code>是指 <code>extract method</code> 後的產物，它代表著這段程式碼的意圖。<br>每一階都有它放在這裡的意義，千萬不要將高階和低階的方法混雜在一起，這樣讀 code 時會很突兀。<span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>謝謝大澤木小鐵幫我們補充這個重要的觀念。</span></span></span></p>
<h3 id="使用宣告式編程">使用宣告式編程</h3><blockquote><p>Express as much of my intention as possible declaratively. Imperative programming is powerful and flexible, but to read it requires that you follow the thread of execution. For those parts of a program that are more like simple facts, without sequence or conditionals, it is easier to read code that is simply declarative.</p>
<p>盡可能以<code>宣告式編程</code>方式表達你的需求，<code>命令式編程</code>功能強大且靈活，但是閱讀時你必須以電腦的思維，跟著執行的流程去思考，程式碼較不易閱讀；宣告式編程只是陳述簡單的需求，並沒有考慮程式流程與程式判斷，完全是以需求的角度去思考，程式碼就容易閱讀。</p>
</blockquote>
<p>假如我們的需求是 : <code>計算今天全部訂單金額</code>。</p>
<p>若使用傳統命令式編程 (Imperative Programming)，我們會這樣寫 :</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$totalAmount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$orders</span> <span class="keyword">as</span> <span class="variable">$order</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$order</span>-&gt;order_date == Carbon::now()) &#123;</span><br><span class="line">        <span class="variable">$totalAmount</span> = <span class="variable">$totalAmount</span> + <span class="variable">$order</span>-&gt;quantity * <span class="variable">$order</span>-&gt;price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$totalAmount</span>;</span><br></pre></td></tr></table></figure>
<p>我們會使用 <code>foreach</code> 繞迴圈，使用 <code>if</code> 做判斷，使用暫存變數 <code>$totalAmount</code>，這種是典型以電腦思考為角度去寫程式，而不是以<code>需求</code>的角度去寫程式。</p>
<p>若以宣告式編程 (Declarative Programming) 方式思考 :</p>
<ul>
<li><strong>找出今天的訂單</strong> : <code>filter()</code>。</li>
<li><strong>計算每一筆訂單金額</strong> : <code>map()</code>。</li>
<li><strong>加總訂單金額</strong> : <code>sum()</code>。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable">$orders</span>-&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">            &#125;)-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">            &#125;)-&gt;sum();</span><br></pre></td></tr></table></figure>
<p>宣告式編程將不再以電腦思考角度使用 <code>foreach</code>、<code>if</code> 與暫存變數，完全以<code>需求</code>的角度去寫程式，程式碼的可讀性更高。<span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>關於宣告式編程，請參考 <a href="http://adamwathan.me/refactoring-to-collections/" target="_blank" rel="external">Refactoring to Collections</a></span></span></span></p>
<h3 id="將相同變化頻率的資料與邏輯封裝在一起">將相同變化頻率的資料與邏輯封裝在一起</h3><blockquote><p>Put logic or data that changes at the same rate together and seperate logic or data that changes at difference rate. These rates of change are a form of temporal symmetry.</p>
<p>將具有相同變化頻率的資料與邏輯封裝在同一個 class 或 method，將不同變化頻率的資料與邏輯抽離出不同 class 或 method。這符合相同變化頻率的程式碼一致性。</p>
</blockquote>
<ul>
<li><strong>分離不同變化頻率的邏輯</strong></li>
</ul>
<p>Kent Beck 在書中舉的例子是，如果開發一套稅務軟體，他會將計算<strong>通用稅金</strong>的程式碼，與計算<strong>每年特定稅金</strong>的程式碼拆成不同 class，因為通用稅金不會變，但每年特定稅金會因為每年的稅務計算公式而改變，分離這兩類程式碼，可以確保每年特定稅金程式碼修改，絕對不會影響到通用稅金，可以避免 side effect 發生。</p>
<ul>
<li><strong>封裝相同變化頻率的資料</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$price</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$currency</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAmount</span><span class="params">(int <span class="variable">$price</span>, int <span class="variable">$currency</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;price = <span class="variable">$price</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;currency = <span class="variable">$currency</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Order class</code> 有 <code>$price</code> (產品定價) 與 <code>$currency</code> (匯率) 資料，但實際上這兩個資料的變化頻率是一致的，也就是匯率一改變，產品定價就會跟著改變。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Money */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$money</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAmount</span><span class="params">(int <span class="variable">$price</span>, int <span class="variable">$currency</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    	<span class="variable">$this</span>-&gt;money = <span class="keyword">new</span> Money(<span class="variable">$price</span>, <span class="variable">$currency</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建議將 <code>$price</code> 與 <code>$currency</code> 封裝成 <code>Money</code> class。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Money */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$money</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAmount</span><span class="params">(Money <span class="variable">$money</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">    	<span class="variable">$this</span>-&gt;money = <span class="variable">$money</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以進一步重構成直接以 <code>$money</code> 物件傳入。</p>
<p>如此相同變化頻率的 <code>$price</code> 與 <code>$currency</code> 都會被封裝在 <code>Money</code>，而不是在 <code>Order</code>，符合程式碼一致性的要求。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>程式設計價值觀與程式設計理論是所有程式語言都成立的，只要能打通此任督二脈，將來學什麼新程式語言都很快。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Kent Beck, <a href="https://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091" target="_blank" rel="external">Implementation Patterns</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Ch.3 A Theory of Programming]]>
    
    </summary>
    
      <category term="Implementation Pattern" scheme="http://oomusou.io/tags/Implementation-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[實作模式筆記 (Patterns)]]></title>
    <link href="http://oomusou.io/ip/ip-patterns/"/>
    <id>http://oomusou.io/ip/ip-patterns/</id>
    <published>2016-06-30T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>將<strong>模式</strong>做更深入的探討，包含其起源、特性與影響，讓我們更能接受模式這個概念。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>本文為 Kent Beck 的 <a href="https://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091" target="_blank" rel="external">Implementation Patterns</a> 一書的讀書筆記，主要是整理給自己複習用，並加上自己的腦補。</p>
<h2 id="模式的起源">模式的起源</h2><hr>
<blockquote><p>Many decisions in programming are unique. However, as the decisions become more and more purely technical, a sense of familiarity sets in.</p>
<p>程式設計中，有許多決策是獨一無二的。然而，當決策內容越接近技術層面，其相似性會越多。</p>
</blockquote>
<p>以程式設計師天天要面對的<code>迴圈</code>為例，天天都要思考該用 <code>for</code>寫呢? 還是該用 <code>while</code> 寫呢？或者該用多執行緒的 <code>foreach</code>? 還是該使用 <code>collection</code>呢? 當思考寫迴圈時，大部分與 domain knowledge 有關的東西都已經拋諸腦後，只留下純粹技術問題。</p>
<blockquote><p>Each pattern illustrates a point of view about the relative priorities of the forces.</p>
<p>每個模式都代表一種「對於需求的相對的優先順序排序」的觀點。</p>
</blockquote>
<p>而需求可能有以下幾點 :</p>
<ul>
<li><strong>忠實呈現演算法</strong>。</li>
<li><strong>效能優先</strong>。</li>
<li><strong>容易閱讀</strong>。</li>
</ul>
<p>若需求是<code>忠實呈現演算法</code>，則可使用 <code>for</code> 或 <code>while</code> 的模式，會比較能夠忠實呈現原本演算法特性。</p>
<p>若需求是<code>效能優先</code>，則可使用多執行緒的<code>Parallel.Foreach()</code> 的模式，每個 closure 都會有在自己的執行緒執行，可充分發揮多核心硬體威力。</p>
<p>若需求是<code>容易閱讀</code>，則可使用 <code>Collection</code> 的模式，使用 <code>map().filter().reduce()</code> 寫法可讀性較佳。</p>
<blockquote><p>Most patterns come with a little essay about the alternatives for solving the problem and why the recommended solution is superior. Revealing the reasoning behind the advice in a pattern invites readers to decide for themselves how they want to approach a recurring problem.</p>
<p>大部分模式都會有一小段敘述，描述解決問題的各種方法，以及解釋此模式的優點在哪裡。探討模式背後的理論，有助於幫助讀者自行判斷應該如何解決這類一再出現的問題。</p>
</blockquote>
<p>以設計模式這本書為例 :</p>
<ul>
<li><strong>Motivation</strong> : 列出解決問題的各種方法。</li>
<li><strong>Applicability</strong> : 列出此模式適合的情境。</li>
<li><strong>Consequences</strong> : 列出此模式的優點與缺點。</li>
<li><strong>Implementation</strong> : 探討其背後的實作方法。</li>
</ul>
<p>如此可幫助讀者判斷此模式是否能解決需求。</p>
<blockquote><p>Patterns bridge from abstract principles to practice. Patterns help you write code.</p>
<p>模式是抽象原則與具體實踐間的橋樑，模式可幫助你寫出符合物件導向原則的程式碼。</p>
</blockquote>
<p>如降龍十八掌的心法是剛柔並濟，但就算你參悟了的心法，你還是很難打出降龍十八掌，因此才有了招式，如亢龍有悔、飛龍在天、神龍擺尾..，讓你可以一招一式去學習。</p>
<p>模式就類似<code>招式</code>一樣，在模式之前，談的大都是物件導向原則，如繼承、封裝、多型，就算你參悟了這些原則，你還是很難寫出物件導向程式，因此才有了模式，讓你可以一招一式去學習。</p>
<h2 id="模式的特性">模式的特性</h2><hr>
<h3 id="模式可彼此合作">模式可彼此合作</h3><blockquote><p>Patterns work together.</p>
<p>並不是一次只能使用一個模式，而是多個模式一起使用。</p>
</blockquote>
<p>如根據需求選擇了 <code>for 迴圈</code> 模式，又可能必須搭配 <code>替迴圈變數命名</code> 模式，而不是單一模式包山包海，將所有議題都放在單一模式中。</p>
<h3 id="實作抽象化">實作抽象化</h3><blockquote><p>As a pattern becomes habit I find I appreciate not having to raise a debate just to write a loop. If the whole team becomes dissatisfied with a pattern, they can discuss their options for introducing a new pattern.</p>
<p>當使用模式成為習慣之後，我很開心團隊不必再為「如何撰寫一個迴圈」的細節而討論，大家對 for 迴圈模式已經有共識，大家如果對 for 迴圈不滿意，也可以整個模式替換掉，如換成 Collection 模式。</p>
</blockquote>
<p>模式俗稱程式設計師的<code>黑話</code>，如當你說<code>工廠模式</code>，大家都知道你在講什麼，就不需再細部討論要有什麼 class，各 class 該怎麼互動，這就是將實作抽象化，讓大家的討論層級可以拉高，將重心放在如何解決問題，完成需求，而不是在細部的實作。</p>
<h3 id="沒有萬能模式">沒有萬能模式</h3><blockquote><p>No one set of patterns will work in all programming situations.</p>
<p>沒有任何一個模式可以適用於所有的需求。</p>
</blockquote>
<p>模式是解決特定問題的方法，只有在某些特定需求下適用，因此慎選模式很重要，沒有一個模式能解決所有需求，也不要為了要為了使用模式而硬套模式。</p>
<h3 id="協助人們做決定">協助人們做決定</h3><blockquote><p>Patterns work best as aids to human decision making.</p>
<p>模式最大的作用是幫助人們做決定。</p>
</blockquote>
<p>模式是前人與大師們經驗與智慧的結晶，因此很多時候我們不必每次都重新思考與踩雷，可以站在巨人的肩膀上。</p>
<h3 id="模式可能成為語言新功能">模式可能成為語言新功能</h3><blockquote><p>Some of the implementation patterns will eventually make their way into programming languages.</p>
<p>有些實作模式最後可能成為語言的一部份。</p>
</blockquote>
<p>有人說模式就是幫程式語言擦屁股用，就是因為程式語言沒有這些機制，因此我們必須使用模式來彌補，若最終成為程式語言或 framework 的一部份，就該改用程式語言或 framework 的新功能，不必太執著於一定要使用模式，因為通常程式語言或 framework 的方法都比模式更漂亮更乾淨。</p>
<h2 id="模式的影響">模式的影響</h2><hr>
<blockquote><p>Using patterns helps programmers write reasonable solutions to common problems, leaving more time, energy, and creativity to apply to the truly unique problems.</p>
<p>使用模式能幫助程式設計師使用更合理的方式解決常見問題，將更多時間、更多精力與創造力用於解決真正獨一無二的問題。</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>模式是具體的招式法門，也是前人留下的經驗與智慧結晶，讓我們可以站在巨人的肩膀上，使用模式來處理常見的問題，將更多時間與精力用來解決真正的問題。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Kent Beck, <a href="https://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091" target="_blank" rel="external">Implementation Patterns</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Ch.2 Patterns]]>
    
    </summary>
    
      <category term="Implementation Pattern" scheme="http://oomusou.io/tags/Implementation-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[實作模式筆記 (Introduction)]]></title>
    <link href="http://oomusou.io/ip/ip-intro/"/>
    <id>http://oomusou.io/ip/ip-intro/</id>
    <published>2016-06-29T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>介紹本書主要的目標、章節安排，心法與學習方式，並對<strong>模式</strong>一詞下了定義，也針對實作模式與設計模式的差異加以討論。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>本文為 Kent Beck 的 <a href="https://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091" target="_blank" rel="external">Implementation Patterns</a> 一書的讀書筆記，主要是整理給自己複習用，並加上自己的腦補。</p>
<h2 id="本書目標">本書目標</h2><blockquote><p>The goal of the book is to help you communicate your intentions through your code.</p>
<p>本書是教你寫容易閱讀、容易維護的程式碼。</p>
</blockquote>
<h2 id="本書架構">本書架構</h2><hr>
<ul>
<li><strong>程式設計與模式概論</strong> : Ch.2 ~ Ch.4。</li>
<li><strong>實作模式</strong> : Ch.5 ~ Ch.8</li>
<li><strong>Collection</strong> : Ch.9</li>
<li><strong>Framework</strong> : Ch.10</li>
</ul>
<p>整本書以 <strong>Communication</strong> 貫穿，也就是寫出<code>容易閱讀</code>、<code>容易維護</code>的程式碼。</p>
<h2 id="實作模式心法">實作模式心法</h2><hr>
<h3 id="保持頭腦清醒並放慢腳步">保持頭腦清醒並放慢腳步</h3><blockquote><p>Even though programming decisions came smoothly and quickly to me, I couldn’t explain why I was so sure a method should be called such-and-so, or that a bit of logic belonged in this object over here.</p>
<p>儘管我能在程式設計中快速的做決定，但我仍無法解釋一些我很確定的東西，如「這個 method 為什麼該這樣被呼叫?」或 「這段邏輯為什麼屬於這個物件?」這種基本問題。</p>
</blockquote>
<p>這是連 Kent Beck 也會犯的錯，也是我們常常忽略的點，只求會用其他 class，卻沒認真去想過為什麼要這樣設計。</p>
<blockquote><p>The first step towards communicating was slowing down long enough to become aware of what I was thinking, to stop pretending that I coded by instinct.</p>
<p>寫出容易閱讀的程式碼的第一步，就是將腳步慢下來，搞清楚自己在寫什麼，而不是一切都是理所當然。</p>
</blockquote>
<p>寫程式並不是寫的快就是好，Kent Beck 教我們將腳步放慢，細細去品味其他 class 為什麼要這樣設計。</p>
<h3 id="程式碼是要給其他人閱讀的">程式碼是要給其他人閱讀的</h3><blockquote><p>Before I could write communicative code I needed to believe that other people was as important as I was. Programming is hardly ever a solitary communication between one man and one machine.</p>
<p>程式並不是只寫給電腦看而已，你必須先相信程式碼是用來給其他人閱讀的。</p>
</blockquote>
<p>程式並不是讓電腦看得懂會動就好，重點是要讓自己與其他人看得懂，寫出容易閱讀的程式碼，才能進一步容易維護。</p>
<h3 id="使用實作模式">使用實作模式</h3><blockquote><p>I use the implementation patterns here to program consciously and for others as well as myself.</p>
<p>在此我介紹實作模式，寫出更容易閱讀的程式碼，不只是給其他人閱讀，也是給自己閱讀。</p>
</blockquote>
<h2 id="學習方式">學習方式</h2><hr>
<h3 id="需求學習法">需求學習法</h3><blockquote><p>I suggest skipping right to chapter 5 and skimming through to the end, then keeping the book by you as you program. After you’ve used many of the patterns, you can come back to the introductory material for the philosophical background behind the ideas you’ve been using.</p>
<p>我建議直接跳到 Ch.5 ~ Ch.8，快速地掃過後續章節，然後將本書放在手邊，有需要時隨時翻閱。當你使用過許多實作模式之後，可以再回到 Ch.2 ~ Ch.4，了解實作模式背後的設計理論。</p>
</blockquote>
<h3 id="理論學習法">理論學習法</h3><blockquote><p>If you are interested in a through understanding of the material here, you can read straight through from the beginning.</p>
<p>如果你想對實作模式徹底了解，可依本書章節從頭讀到尾，先從 Ch.2 ~ Ch.4 學習實作模式背後的理論，再由 Ch.5 ~ Ch.8 學習實作模式。</p>
</blockquote>
<p>這兩種方法沒有好壞與對錯，有的人習慣先學理論，再學實作；也有人習慣先學實作，回來悟得理論。</p>
<p>也可以是兩種學習方法的綜合體 : 先學理論，再學實作，再由不斷的實作，驗證理論，不斷地調整實作，讓實作符合需求，卻又不違背理論。</p>
<h2 id="模式定義">模式定義</h2><hr>
<blockquote><p>Most decisions in programming are similar to decisions that have come before. … The decision and its constraints repeat even though you might create different name each time.</p>
<p>在程式設計時，大部分的思考決策都很類似，而且曾經出現過 … 儘管每次實作結果不相同，但相同的決策與情境總是一再地出現。</p>
</blockquote>
<p>而這些一再重複出現的思考決策與情境，而且被證明是有效的處裡方式，就會被高手歸納成為<strong>模式</strong>，讓初學者可以遵循前人所留下來的智慧結晶，來處理這些一再重複出現的需求。</p>
<blockquote><p>This book contains 77 explicitly named patterns, each covering some aspect of writing readable code. In addition, there are many smaller patterns or variants of patterns that I mention in passing. My goal with this book is to offer advice for how to approach most common, daily coding tasks so as to help futuer readers understand what the code is supposed to do.</p>
<p>本書包含 77 個有命名的實作模式，每一個實作模式都在某種程度實現容易閱讀程式碼的目標。此外，還有一些較小的無名模式或者模式的變形。本書的目的是給程式設計師一些建議，告訴他們在每天的開發程式過程中，能寫出容易閱讀的程式碼。</p>
</blockquote>
<h2 id="實作模式與設計模式的差異">實作模式與設計模式的差異</h2><hr>
<blockquote><p>This book fits somewhere between Design Patterns and a Java language manual. Design Patterns talks about decisions you might make a few times a day while developing, typically decisions that regulate the interaction between objects. You apply an implementation pattern every few seconds while programming.</p>
<p>本書是介於設計模式與 Java 手冊之間的書籍。設計模式討論的是開發過程中，每天要做個幾次的決策，通常是物件之間的互動。但實作模式則關心更細微的實作部分，可能每幾秒鐘就會用到一個實作模式。</p>
</blockquote>
<p>設計模式是教你特定需求下的物件導向解決方式，而實作模式教你的是實現物件導向的基本功。</p>
<blockquote><p>While language manuals are good at describing what you can do with Java, they don’t talk much about why you would use a certain construct or what someone reading your code is likely to conclude form it.</p>
<p>Java 語言手冊會教你 Java 能做些什麼，但不會教你「這個 method 為什麼該這樣被呼叫?」或 「這段邏輯為什麼屬於這個物件?」，也不會教你如何寫出容易閱讀的程式碼，而這正是實作模式的重點所在。</p>
</blockquote>
<p>程式語言手冊教你的是程式語言的語法及功能，而實作模式教你的是駕馭這個語言並寫出容易閱讀的程式碼。</p>
<h2 id="本書不包含的主題">本書不包含的主題</h2><hr>
<ul>
<li>Concurrency。</li>
<li>Software Process。</li>
<li>Java 的新功能。</li>
</ul>
<h2 id="本書章節概述">本書章節概述</h2><hr>
<ul>
<li><strong>Introduction</strong> : Ch.2 ~ Ch.4，探討容易閱讀程式碼的重要性與價值，以及實作模式背後的設計理論。</li>
<li><strong>Class</strong> : Ch.5，與 class 先關的實作模式，如「如何設計 class?」、「如何將邏輯封裝在 class?」。</li>
<li><strong>State</strong> : Ch.6，與 state 存取相關的實作模式</li>
<li><strong>Behavior</strong> : Ch.7，與邏輯相關的實作模式，如「當你有很多方式實現相同邏輯時」。</li>
<li><strong>Methods</strong> : Ch.8，與 metohd 相關的實作模式，如「解耦合與命名方面」。</li>
<li><strong>Collections</strong> : Ch.9，與 collection 使用相關的實作模式。</li>
<li><strong>Frameworks</strong> : Ch.10，開發 framework 時，該如何使用實作模式。</li>
</ul>
<p><img src="/images/ip/ip-intro/intro000.png" alt=""></p>
<ul>
<li>Patterns / Values / Principles / Motivation (實作模式理論)</li>
<li>class (以 class 為中心設計)。</li>
<li>Behavior (相似邏輯) -&gt; Methods (解耦合)。</li>
<li>State (不同資料) -&gt; Collections (同類型資料)</li>
<li>Frameworks (全部統整)。</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>語言手冊只會教你語法與功能，無法教你寫出容易閱讀的程式碼。</li>
<li>設計模式只有在特定需求才用得到，但實作模式是隨時都在用。</li>
<li>不用解釋的程式，就是好程式。</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Kent Beck, <a href="https://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091" target="_blank" rel="external">Implementation Patterns</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Ch.1 Introduction]]>
    
    </summary>
    
      <category term="Implementation Pattern" scheme="http://oomusou.io/tags/Implementation-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 將專案發佈到 GitHub?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-github/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-github/</id>
    <published>2016-06-29T04:23:43.000Z</published>
    <updated>2016-08-06T03:14:31.000Z</updated>
    <content type="html"><![CDATA[<p>若要將專案發佈到 GitHub，實務上除了先在本機建立 local git repository 外，還要在 GitHub 建立 remote git repository，然後建立 remote branch，最後才能 push 到 GitHub，這些動作都可以在 PhpStorm 內簡單的完成。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="Motivation">Motivation</h2><hr>
<p>之前要將專案發佈到 GitHub，都是乖乖的下指令，但指令實在記不起來，只能複製貼上，在<a href="/azure/azure_phpstorm_deploy/">如何使用 PhpStorm 部署 Laravel 到 Azure?</a> 一文中，發現 PhpStorm 亦提供完整的圖形介面支援 Git 與 GitHub，讓我們可以使用更直覺的方式完成。</p>
<h2 id="建立_Laravel_專案">建立 Laravel 專案</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure000.png" alt=""></p>
<p>啟動 PhpStorm，選擇 <code>Create New Project</code> 建立新專案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure001.png" alt=""></p>
<ul>
<li><strong>專案類型</strong> :  <code>Composer Project</code>。</li>
<li><strong>Location</strong> : Laravel 專案路徑與專案名稱</li>
<li><strong>composer.phar</strong> : 選擇 <code>Use existing composer.phar</code>，輸入 <code>/usr/local/bin/composer</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>選擇 <code>Download composer.phar from getcomposer.org</code> 亦可，這種方式在 OS X 本機並不需要事先安裝 Composer，PhpStorm 會自動將 Composer 下載到目錄專案跟目錄下，唯此種方式安裝 package 將無法使用到 cache，必須從網路上下載，安裝時間較長，所以實務上建議使用 <code>Use existing composer.phar</code>。</span></span></span></li>
<li><strong>Filter packages</strong> : 輸入 <code>laravel/laravel</code>，此為 Laravel 專案的 package 名稱。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure002.png" alt=""></p>
<p>將畫面向下卷，還有其他設定。</p>
<ul>
<li><strong>Version to install</strong> : 選擇 Laravel 版本，<code>&lt;default&gt;</code> 為 Laravel 最新版本。</li>
<li><strong>Path to PHP executable</strong> : 指定 PHP 執行檔路徑，主要為了執行 Composer。</li>
<li><strong>Command line parameters</strong> : Composer 參數，輸入 <code>prefer-dist</code>。</li>
</ul>
<p><img src="/images/azure/azure-phpstorm-deploy/azure003.png" alt=""></p>
<p>建立 Laravel 專案中，由於 Composer 需解析 package 相依性，需要一些時間。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure004.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oomusou@mac:~/MyProject$ php artisan serve</span><br></pre></td></tr></table></figure>
<p>執行 PHP 內建 Http Server。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure005.png" alt=""></p>
<p>Laravel 已經順利在 OS X 本機執行。</p>
<h2 id="建立_Local_Git_Repository">建立 Local Git Repository</h2><hr>
<p>實務上開發 Laravel 會搭配 Git 做版本控制，先在本機建立 local repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure006.png" alt=""></p>
<p><strong><em>VCS -&gt; Import ino Version Control -&gt; Create Git Repository</em></strong></p>
<p>建立 Git repository。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>相當於 <code>git init</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure007.png" alt=""></p>
<p>選擇 local repository 目錄，也就是目前專案目錄。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure008.png" alt=""></p>
<p>下方出現 <code>Version Control</code>，並顯示有檔案尚未受 Git 管理，按 <code>browse</code> 顯示檔案。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure009.png" alt=""></p>
<p>選擇專案目錄，按 <code>+</code> (Add to VCS) 將檔案加入 stage。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>相當於 <code>git add .</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure010.png" alt=""></p>
<p>綠色檔案為加入 stage 的檔案，按 <code>VCS</code> (Commit Changes)。<br><img src="/images/azure/azure-phpstorm-deploy/azure011.png" alt=""></p>
<ul>
<li>不要選擇 <code>Perform code analysis</code>。</li>
<li><strong>Commit Message</strong> : Initial commit。</li>
</ul>
<p>按 <code>Commit</code> 寫檔案寫入 local repository。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>相當於 <code>git commit -m &quot;Initial commit&quot;</code>。</span></span></span></p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure012.png" alt=""></p>
<p>Commit 成功後，下方會顯示 <code>xx files committed : initial commit</code>。</p>
<h2 id="建立_Remote_GitHub_Repository">建立 Remote GitHub Repository</h2><hr>
<p>將 local repository 上傳至 GitHub 建立 remote repository。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure017.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Version Control -&gt; GitHub</em></strong></p>
<p>設定 GitHub 帳號。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure013.png" alt=""></p>
<p><strong><em>VCS -&gt; Import into Version Control -&gt; Share Project on GitHub</em></strong></p>
<p>將專案發佈到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure014.png" alt=""></p>
<p>預設會使用專案名稱為 remote GitHub repository 名稱。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure015.png" alt=""></p>
<p>在 GitHub 建立成功。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure016.png" alt=""></p>
<p>在 GitHub 已經看到剛剛上傳的專案。</p>
<h2 id="修改並_Push_到_GitHub">修改並 Push 到 GitHub</h2><hr>
<p><img src="/images/azure/azure-phpstorm-deploy/azure052.png" alt=""></p>
<p>將 <code>welcome.blade.php</code> 加以修改，由 <code>Laravel 5</code> 改成 <code>Hello Laravel</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure053.png" alt=""></p>
<p>點擊下方的 <code>Version control</code> 標籤，按 <code>VCS</code> 將此次變更加以 commit。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure054.png" alt=""></p>
<p>填入 commit message 後，按 <code>Commit and Push</code>。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure055.png" alt=""></p>
<p>按 <code>Push</code> 將直接 push 到 GitHub。</p>
<p><img src="/images/azure/azure-phpstorm-deploy/azure056.png" alt=""></p>
<p>Push 到 GitHub 成功。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>PhpStorm 所提供的 Git 與 GitHub 支援或許不夠完整，但對於日常使用足足有餘，可大幅提高開發效率。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormAzure_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Mikhail Vink, <a href="https://confluence.jetbrains.com/display/PhpStorm/Working+with+Windows+Azure+from+within+PhpStorm" target="_blank" rel="external">Working with Windows Azure from within PhpStorm</a></li>
<li>KevinAtStout, <a href="https://www.youtube.com/watch?v=48moauj0KtE" target="_blank" rel="external">Connecting PhpStorm to Your Azure Web Server</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[直接在 PhpStorm 內 push 到 GitHub]]>
    
    </summary>
    
      <category term="Git" scheme="http://oomusou.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://oomusou.io/tags/GitHub/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 對 Collection 除錯?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-collection-debug/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-collection-debug/</id>
    <published>2016-06-19T12:23:43.000Z</published>
    <updated>2016-08-06T03:11:22.000Z</updated>
    <content type="html"><![CDATA[<p>Laravel 的 <code>Collection</code> 在實務上非常好用，除了 Eloquent 直接回傳 <code>Collection</code> 外，還擴充了很多 method，讓我們可以使用 higher order function 與 fluent 風格開發，讓程式可讀性更高。不過 <code>Collection</code> 的除錯就比較麻煩，本文使用 PhpStorm 內建的 <strong>Watches</strong>，讓我們可以在不用修改程式碼的前提下，快速對 <code>Collection</code> 除錯。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.39<br>PhpStorm 2016.1.2</p>
<h2 id="Motivation">Motivation</h2><hr>
<p>在看了 Adam Wathan 的 <a href="http://adamwathan.me/refactoring-to-collections/" target="_blank" rel="external">Refactoring to Collections</a> 之後，發現這種 declarative 式的程式風格，不僅程式碼更精簡，可讀性更高，也符合 SOLID 原則的單一職責，因此開始大量使用 <code>Collection</code> 內建的 method 來寫程式。</p>
<p>但由於是 fluent 風格的程式，因此在 debug 時面臨困難，必須修改程式碼，加上很多暫存變數，設定中斷點後，透過 <strong>Variables</strong> 去觀察暫存變數，等除錯完後，再透過重構的 <code>Inline Variable</code> 去合併變數。</p>
<p>在 Freek Van der Herten 的 <a href="https://murze.be/2016/06/debugging-collections/" target="_blank" rel="external">Debugging collections</a> 一文中，提出了使用了 Collection Macro 配合 <code>dd()</code> 的方式，這種方式就不需要增加暫存變數，只要在要 debug 的 method 之後加上 <code>-&gt;dd()</code> 即可，非常方便。</p>
<p>不過唯一小小的可惜是，這種方式仍然需要去修改程式碼去加上 <code>-&gt;dd()</code>，是否可能在完全不需修改程式碼的前提下，快速對 <code>Collection</code> 除錯呢?</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>我們將以 <code>Order</code> model 為例，顯示<code>今天全部訂單金額</code>，並寫單元測試判斷結果是否如預期。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p>以 TDD 方式開發，因此必須先寫單元測試。</p>
<p><strong>OrderServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/a74e7cc1327e79f0a47e967d225cbaf5c88197f5" target="_blank" rel="external">單元測試 : 今天全部訂單金額</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/OrderServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">OrderService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 今天全部訂單金額<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** Arrange */</span></span><br><span class="line">        Carbon::setTestNow(Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">        Order::create([</span><br><span class="line">            <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">17</span>),</span><br><span class="line">            <span class="string">'quantity'</span>   =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">'price'</span>      =&gt; <span class="number">100</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        Order::create([</span><br><span class="line">            <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="string">'quantity'</span>   =&gt; <span class="number">2</span>,</span><br><span class="line">            <span class="string">'price'</span>      =&gt; <span class="number">200</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        Order::create([</span><br><span class="line">            <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="string">'quantity'</span>   =&gt; <span class="number">3</span>,</span><br><span class="line">            <span class="string">'price'</span>      =&gt; <span class="number">300</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">1300</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(OrderService::class)-&gt;calculateTodayTotalAmount();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>16 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Carbon::setTestNow(Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>));</span><br></pre></td></tr></table></figure></p>
<p>由於需求是<code>今天全部訂單金額</code>，勢必使用 <code>Carbon::now()</code> 回傳今天日期，但 <code>Carbon::now()</code> 回傳的每天的真實日期，並不是個固定值，這將造成測試困難，因此 Carbon 提供了 <code>setTestNow()</code> 讓我們自行設定測試用的日期，讓  <code>Carbon::now()</code> 回傳我們預期的日期，這是寫單元測試常用的手法。</p>
<p>18 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Order::create([</span><br><span class="line">    <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">17</span>),</span><br><span class="line">    <span class="string">'quantity'</span>   =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="string">'price'</span>      =&gt; <span class="number">100</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">Order::create([</span><br><span class="line">    <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">    <span class="string">'quantity'</span>   =&gt; <span class="number">2</span>,</span><br><span class="line">    <span class="string">'price'</span>      =&gt; <span class="number">200</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">Order::create([</span><br><span class="line">    <span class="string">'order_date'</span> =&gt; Carbon::create(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">18</span>),</span><br><span class="line">    <span class="string">'quantity'</span>   =&gt; <span class="number">3</span>,</span><br><span class="line">    <span class="string">'price'</span>      =&gt; <span class="number">300</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>由於我們是使用 SQLite in Memory 做測試，每個測試案例執行完就會釋放記憶體，所以除了需要重新 migration 外，還要重新塞假資料進資料庫。</p>
<p>由於我們要測試的日期為 <code>2016, 6, 18</code>，除了塞兩筆 <code>2016, 6, 18</code> 資料外，還多塞了一筆 <code>2016, 6, 17</code>，目的要測試日期時間有沒有抓錯。</p>
<p>36 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$expected</span> = <span class="number">1300</span>;</span><br></pre></td></tr></table></figure></p>
<p>根據我們所塞的假資料，人工計算其期望值為 <code>1300</code>，將以此值與測試所得的實際值做 assertion。</p>
<p>38 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(OrderService::class)-&gt;calculateTodayTotalAmount();</span><br></pre></td></tr></table></figure></p>
<p>實際建立 <code>OrderService</code> 物件，並測試 <code>calculateTodayTotalAmount()</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此時 <code>OrderService</code> 與 <code>calculateTodayTotalAmount()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>OrderService</code> 與 <code>calculateTodayTotalAmount()</code>。</span></span></span></p>
<p>除了使用 <code>app()</code> helper function 外，也可以使用 Facade 版本的 <code>App::make()</code>，但不建議使用 <code>new</code>，因為實務上待測物件可能會搭配依賴注入，若使用 <code>new</code> 必須自己在 constructor 輸入參數，非常麻煩，使用 <code>app()</code> 或 <code>App::make()</code> 後， Laravel 會自行依照 constructor 的 type hint 依賴注入，非常方便。</p>
<p>41 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Assert */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>最後使用 <code>assertEquals()</code> 判斷期望值與實際值是否相等。</p>
<h2 id="OrderService">OrderService</h2><hr>
<p>實際跑測試，會得到第 1 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>OrderService</code> 與 <code>calculateTodayTotalAmount()</code> 尚未建立，須趕快補上。</p>
<p><strong>OrderService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/e5112c689f60ceded162e52ac4dd91a783c42a6c" target="_blank" rel="external">建立 foreach 版本 OrderService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Order $order</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算今天全部訂單金額</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$totalAmount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$orders</span> = <span class="variable">$this</span>-&gt;order-&gt;all();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$orders</span> <span class="keyword">as</span> <span class="variable">$order</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$order</span>-&gt;order_date == Carbon::now()) &#123;</span><br><span class="line">                <span class="variable">$totalAmount</span> = <span class="variable">$totalAmount</span> + <span class="variable">$order</span>-&gt;quantity * <span class="variable">$order</span>-&gt;price;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$totalAmount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 8 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * OrderService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> Order $order</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 constructor injection 注入 <code>Order</code> model。</p>
<p>20 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算今天全部訂單金額</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$totalAmount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$orders</span> = <span class="variable">$this</span>-&gt;order-&gt;all();</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$orders</span> <span class="keyword">as</span> <span class="variable">$order</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span>-&gt;order_date == Carbon::now()) &#123;</span><br><span class="line">            <span class="variable">$totalAmount</span> = <span class="variable">$totalAmount</span> + <span class="variable">$order</span>-&gt;quantity * <span class="variable">$order</span>-&gt;price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$totalAmount</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由於需求是<code>今天全部訂單金額</code>，我們先建立一個 <code>$totalAmout</code> 初始變數，再由 <code>$this-&gt;orders-&gt;all()</code> 傳回資料庫目前所有訂單。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>實務上不會直接使用 <code>$this-&gt;order-&gt;all()</code> 的方式回傳 <code>Order</code> model 的所有資料，這裡只是為了範例便宜行事，應該從 <code>OrderRepository</code> 傳回必要的資料即可，這樣才不會造成 MySQL 與 PHP 的負擔。</span></span></span></p>
<p>接著使用 <code>foreach</code> 對全部 <code>orders</code> 判斷，只有 <code>order_date</code> 為 <code>今天</code>，也就是等於 <code>Carbon::now()</code> 才加以計算。</p>
<p>訂單金額並沒有直接一個欄位，需要使用 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code> 加以計算，才能與 <code>$totalAmount</code> 相加。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug000.png" alt=""></p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>，完成 <code>OrderService</code>。</p>
<h2 id="使用_Collection_重構">使用 Collection 重構</h2><hr>
<p>以上為典型的 <strong>Imperative Programming</strong> 寫法，透過暫存變數 <code>$totalAmount</code>，迴圈 <code>foreach()</code> 與判斷式 <code>if</code> 的方式寫程式，這也是過去我們習慣的 PHP 風格。</p>
<p>這種方式的缺點是程式可讀性較差，當你在 trace <code>calculateTodayTotalAmount()</code> 時，需馬上與一堆變數、迴圈與判斷式纏鬥，而不能一眼就看出程式所有表達的意思。</p>
<p><strong>OrderService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/517181e2b84f0483bc0574dd796a3cac3ae44781" target="_blank" rel="external">建立 Collection 版本的 OrderService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Order $order</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算今天全部訂單金額</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">            -&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">            &#125;)</span><br><span class="line">            -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">            &#125;)</span><br><span class="line">            -&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>20 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算今天全部訂單金額</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">        -&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">        &#125;)</span><br><span class="line">        -&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">        &#125;)</span><br><span class="line">        -&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>需求為 <code>今天全部訂單金額</code>，因此有以下幾個重點 :</p>
<ul>
<li><strong>今天</strong> : 必須先過濾出<code>今天</code>的資料。</li>
<li><strong>金額</strong> : 必須先由 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code> 計算<code>金額</code>。</li>
<li><strong>全部訂單</strong> : 必須由 <code>$totalAmout</code> 計算<code>全部訂單</code>金額。</li>
</ul>
<p><code>$this-&gt;order-&gt;all()</code> 回傳的為 <code>Collection</code>，事實上 Laravel 的 <code>Collection</code> 內建非常多的 method，可直接使用。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>詳細請參考 Laravel 的官方文件 : <a href="https://laravel.com/docs/master/collections#available-methods" target="_blank" rel="external">Collections</a></span></span></span></p>
<p>若使用 <code>Collection</code> 的 method，可改寫成 :</p>
<ul>
<li><strong>filter()</strong> : 由 <code>filter()</code> 過濾出<code>今天</code>的資料。</li>
<li><strong>map()</strong> : 由 <code>map()</code> 計算出 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code>。</li>
<li><strong>reduce()</strong> : 由 <code>reduce()</code> 計算出 <code>$totalAmount</code>。</li>
</ul>
<p>27 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><code>filter()</code> 要求傳入一個 closure，第 1 個參數為 <code>$value</code>，第 2 個參數為 <code>$key</code>，只要在 closure 內 return <code>filter()</code> 所需要的布林條件式即可。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>詳細請參考 Laravel 官方文件 : <a href="https://laravel.com/docs/master/collections#method-filter" target="_blank" rel="external">filter()</a></span></span></span></p>
<p>以本例來說，<code>$value</code> 就是 <code>foreach</code> 中 <code>$orders</code> 的 <code>$order</code>，所以其 <code>filter()</code> 條件為 <code>$value-&gt;order_date == Carbon::now()</code>。</p>
<p>30 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt;map(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><code>map()</code> 要求傳傳入一個 closure，第 1 個參數為 <code>$value</code>，第 2 個參數為 <code>$key</code>，只要在 closure 內 return <code>map()</code> 要成為的新值即可。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>詳細請參考 Laravel 官方文件 : <a href="https://laravel.com/docs/master/collections#method-map" target="_blank" rel="external">map()</a></span></span></span></p>
<p>以本例來說，<code>$value</code> 就是 <code>foreach</code> 中 <code>$orders</code> 的 <code>$order</code>，<code>map()</code> 之後的新值為 <code>$order-&gt;quantity</code> * <code>$order-&gt;price</code>。</p>
<p>33 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt;reduce(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>reduce()</code> 要求傳傳入一個 closure，第 1 個參數為 <code>$carry</code>，第 2 個參數為 <code>$value</code>，其中 <code>$carry</code> 為下一次執行 <code>reduce()</code> 時的累加值，只要在 closure 內 return 下一次執行 <code>reduce()</code> 時 <code>$carry</code> 的新值即可。<span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>詳細請參考 Laravel 官方文件 : <a href="https://laravel.com/docs/master/collections#method-reduce" target="_blank" rel="external">reduce()</a></span></span></span></p>
<p>以本例來說，<code>$value</code> 就是 <code>foreach</code> 中 <code>$orders</code> 的 <code>$order</code>，而 <code>$carry</code> 就是 <code>$totalAmount</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug001.png" alt=""></p>
<p>得到第 2 個 <span class="label label-success">綠燈</span>，使用 <code>Collection</code> 重構 <code>OrderService</code>。</p>
<h2 id="將_Closure_加以重構">將 Closure 加以重構</h2><hr>
<p>使用 <code>filter()</code>、<code>map()</code> 與 <code>reduce()</code> 搭配 closure 的寫法，已經比 Imperative Programming 寫法精簡，但 closure 部分可讀性還不是很高，需要進一步重構。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug002.png" alt=""></p>
<p>選擇 <code>filter()</code> 內部的 closure，按熱鍵 &#8963; + T，出現 <code>Refactor This</code> 選單，選擇 <code>7.Method</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug003.png" alt=""></p>
<p>Visibility 選擇 <code>Private</code>，在函式名稱輸入 <code>filterToToday</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug004.png" alt=""></p>
<p>PhpStorm 會替我們將 closure 重構出新的 <code>filterToToday()</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug005.png" alt=""></p>
<p>重構後趕快跑單元測試，確認 PhpStorm 有沒有改壞。</p>
<p>將 <code>map()</code> 與 <code>reduce()</code> 的 closure 也依照以上方式加以重構成 private method。</p>
<p><strong>OrderService.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo/commit/38bc52878707f137f5ce87a41ad9c3fd4b90057d" target="_blank" rel="external">將 Closure 加以重構</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/OrderService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Order</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Order */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * OrderService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> Order $order</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Order <span class="variable">$order</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算今天全部訂單金額</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">            -&gt;filter(<span class="variable">$this</span>-&gt;filterToToday())</span><br><span class="line">            -&gt;map(<span class="variable">$this</span>-&gt;mapToAmount())</span><br><span class="line">            -&gt;reduce(<span class="variable">$this</span>-&gt;reduceToTotalAmount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 只有今天的訂單</span><br><span class="line">     * <span class="doctag">@return</span> Closure</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterToToday</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;order_date == Carbon::now();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 換算成金額</span><br><span class="line">     * <span class="doctag">@return</span> Closure</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mapToAmount</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 換算成總金額</span><br><span class="line">     * <span class="doctag">@return</span> Closure</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">reduceToTotalAmount</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$carry</span>, <span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$carry</span> + <span class="variable">$value</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 計算今天全部訂單金額</span><br><span class="line"> * <span class="doctag">@return</span> int</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateTodayTotalAmount</span><span class="params">()</span> : <span class="title">int</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order-&gt;all()</span><br><span class="line">        -&gt;filter(<span class="variable">$this</span>-&gt;filterToToday())</span><br><span class="line">        -&gt;map(<span class="variable">$this</span>-&gt;mapToAmount())</span><br><span class="line">        -&gt;reduce(<span class="variable">$this</span>-&gt;reduceToTotalAmount());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最後程式碼會重構成這樣，可讀性很高，就跟口語敘述一樣直覺。</p>
<ol>
<li>先由 <code>Order</code> model 傳回所有資料。</li>
<li>再透過 <code>filter()</code> 過濾<code>今天</code>的資料。</li>
<li>再透過 <code>map()</code> 計算出<code>金額</code>。</li>
<li>最後由 <code>reduce()</code> 計算出<code>總金額</code>。</li>
</ol>
<p>至於怎麼<code>過濾</code>、<code>計算</code>，那是 closure 的事情，若有必要再繼續 trace 下去，不需一開始就面臨一堆變數、迴圈與判斷，這就是所謂的 Declarative Programming 只重視 <code>我們要做什麼，而不是要如何做</code>。</p>
<p>44 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 換算成金額</span><br><span class="line"> * <span class="doctag">@return</span> Closure</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">mapToAmount</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$value</span>-&gt;quantity * <span class="variable">$value</span>-&gt;price;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 closure 所重構出來的 method，也都符合 SOLID 的單一職責原則，將來若有需要，可以再進一步的重構成 interface 與 trait。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug006.png" alt=""></p>
<p>重構後趕快跑單元測試，確認 PhpStorm 有沒有改壞。</p>
<h2 id="使用_Watches_除錯">使用 Watches 除錯</h2><hr>
<p>使用 Declarative Programming 方式，程式可讀性雖然高，但除錯則面臨很大的挑戰，由於其 fluent 風格，基本上程式只有一行，因此無從下中斷點觀察變數，只能在除錯時加上很多暫存變數觀察。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug007.png" alt=""></p>
<p>加了 <code>$aa</code>、<code>$bb</code> … <code>$dd</code> 等暫存變數，雖然可以在 Debug Window 的 Variables 加以觀察，但必須修改程式碼，雖然之後可以靠重構的 <code>Inline Variable</code> 加以還原，但還是很麻煩。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug008.png" alt=""></p>
<p>比較理想的方式是使用 Debug Windw 的 Watches，比如說我們只想除錯 <code>$this-&gt;order-&gt;all()</code>，用滑鼠選擇 <code>$this-&gt;order-&gt;all()</code>，按滑鼠右鍵選擇 <code>Add to Watches</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug009.png" alt=""></p>
<p><code>$this-&gt;order-&gt;all()</code> 將會新增到右側下方的 Watches，可直接展開觀察結果。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug010.png" alt=""></p>
<p>同理若要除錯 <code>$this-&gt;orders-&gt;all()-&gt;filter($this-&gt;filterToToday())</code>，可將 <code>$this-&gt;orders-&gt;all()-&gt;filter($this-&gt;filterToToday())</code> 選起來，按滑鼠右鍵選擇 <code>Add to Watches</code>。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug012.png" alt=""></p>
<p><code>$this-&gt;orders-&gt;all()-&gt;filter($this-&gt;filterToToday())</code> 將會新增到右側下方的 Watches，可直接展開觀察結果。</p>
<p><img src="/images/phpstorm/phpstorm-collection-debug/debug011.png" alt=""></p>
<p>你也可以將 <code>Collection</code> 的每個過程全部加到 Watches，且只要你不刪除，Watches 就永遠存在，將來除錯還可以繼續用，這樣就可以達到不用修改程式碼，又可以對 <code>Collection</code> 除錯的目的。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Declarative 比 Imperative 方式更精簡，程式可讀性更高，也更符合單一職責原則。</li>
<li>Laravel 的 <code>Collection</code> 非常好用，但除錯一直是大家的夢靨，透過 PhpStorm 的 Watches，不僅不用修改程式碼，也可以繼續使用中斷點的除錯方式。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52PhpStormCollectionDebug_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<ul>
<li>Adam Watham, <a href="http://adamwathan.me/refactoring-to-collections/" target="_blank" rel="external">Refactoring to Collections</a></li>
<li>Freek Van der Herten, <a href="https://murze.be/2016/06/debugging-collections/" target="_blank" rel="external">Debugging collections</a></li>
<li>Taylor Otwell, <a href="https://laravel.com/docs/master/collections#available-methods" target="_blank" rel="external">Laravel Collections</a></li>
<li>PhpStorm 2016.1 Help, <a href="https://www.jetbrains.com/help/phpstorm/2016.1/debug-tool-window-watches.html" target="_blank" rel="external">Debug Tool Window.Watches</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 Watches 替 Collection 除錯]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="Laravel Collection" scheme="http://oomusou.io/tags/Laravel-Collection/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
      <category term="Xdebug" scheme="http://oomusou.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 重構 Namespace?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-refactor-namespace/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-refactor-namespace/</id>
    <published>2016-06-12T12:23:43.000Z</published>
    <updated>2016-06-19T02:28:44.000Z</updated>
    <content type="html"><![CDATA[<p>在 TDD 開發流程，為了第一個 <span class="label label-success">綠燈</span>，一開始可能在同一個 namespace 下只有一個 class，但隨著重構的進行，可能重構出更多的 class 與 interface，為了更加的<strong>高內聚，低耦合</strong>，我們可能會將更相關的 class 與 interface 重構到其他 namespace，導致相依的 class 也必須修改，在重構 namepsace 時，PhpStorm 可以幫我們將相依的 class 一併修改，非常方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.37</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>我們將以經典的 service + repository 模式為例，以 <code>PostService</code> 處理商業邏輯，以 <code>PostRepository</code> 處理資料庫邏輯，將全部 post 顯示在網頁上。</p>
<p>最後使用 PhpStorm 重構 <code>PostService</code> 與 <code>PostRepository</code>。</p>
<h2 id="單元測試">單元測試</h2><hr>
<p>以 TDD 方式開發，因此必須先寫單元測試。</p>
<p><strong>PostServiceTest.php</strong><span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/9f422f2f9a376f0d9e3aea11ae3f7bbde6f3b741" target="_blank" rel="external">單元測試 : 建立 PostServiceTest.php</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create(<span class="variable">$value</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$actual</span> = app(PostService::class)-&gt;displayAllPosts()-&gt;toArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    Post::create(<span class="variable">$value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>由於單元測試是使用 SQLite in Memory 為資料庫，只要測試一結束，記憶體就會釋放，因此每次測試都要重新新增資料。</p>
<p>使用 <code>Collection-&gt;each()</code> 將 <code>$expected</code> 中的資料透過 <code>Post::create()</code> 新增。</p>
<p>23 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$actual</span> = app(PostService::class)-&gt;displayAllPosts()-&gt;toArray();</span><br></pre></td></tr></table></figure></p>
<p>測試 <code>PostService-&gt;displayAllPosts()</code>。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>此時 <code>PostService</code> 與 <code>displayAllPost()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostService</code> 與 <code>displayAllPost()</code>。</span></span></span></p>
<p><code>displayAllPosts()</code> 回傳的是 <code>Collection</code>，但 PHPUnit 無法對 <code>Collection</code> 做 assertion，必須先轉成 array。</p>
<p>26 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;assertArraySubset(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br></pre></td></tr></table></figure></p>
<p>這裡不能使用 <code>assertEquals()</code>，因為 <code>posts</code> table 還包含 <code>created_at</code> 與 <code>updated_at</code> 兩個欄位，若使用 <code>assertEquals()</code> 一定失敗，必須改用 <code>assertArraySubset()</code>。</p>
<h2 id="PostService">PostService</h2><hr>
<p>實際跑測試，會得到第 1 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>PostService</code> 與 <code>displayAllPosts()</code> 尚未建立，須趕快補上。</p>
<p><strong>PostService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/ee587bd2a6e0cad4c94c024f6cdfdcd3ab46eb26" target="_blank" rel="external">建立 PostService</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Services/PostService.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">PostRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@var</span> PostRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * PostService constructor.</span><br><span class="line">     * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 8 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@var</span> PostRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="variable">$postRepository</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * PostService constructor.</span><br><span class="line"> * <span class="doctag">@param</span> PostRepository $postRepository</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PostRepository <span class="variable">$postRepository</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;postRepository = <span class="variable">$postRepository</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因為 <code>PostService</code> 須使用到 <code>PostRepository</code>，使用 constructor injection 注入 <code>PostRepository</code>。</p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@return</span> Collection</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayAllPosts</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable">$this</span>-&gt;postRepository-&gt;getAllPosts();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>呼叫 <code>PostRepository</code> 的 <code>getAllPosts()</code>, 回傳 <code>Collection</code>。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>此時 <code>PostRepository</code> 與 <code>getAllPosts()</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostRepository</code> 與 <code>getAllPosts()</code>。</span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  為什麼 <strong>PostService</strong> 只有呼叫 <strong>PostRepository</strong> 而已?</div>
<p>實務上 <code>PostService</code> 除了呼叫 <code>PostRepository</code> 外，還會有自己的商業邏輯要寫，本文因為重點在   <strong>namespace 重構</strong>，所以簡化了 <code>PostService</code>，關於 Service 模式，詳細請參考<a href="/laravel/laravel-service/">如何使用 Service 模式?</a></p>
<h2 id="PostRepository">PostRepository</h2><hr>
<p>實際跑測試，會得到第 2 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>PostRepository</code> 與 <code>getAllPosts()</code> 尚未建立，須趕快補上。</p>
<p><strong>PostRepository.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/175ca8490d72e5f8994833eceffe59b2bbda7fe6" target="_blank" rel="external">建立 PostRepository</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Repositories/PostRepository.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostRepository</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllPosts</span><span class="params">()</span> : <span class="title">Collection</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Post::all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>為簡化起見，回傳 <code>post</code> table 所有資料。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace000.png" alt=""></p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>，完成 <code>PostService</code> 與 <code>PostRepository</code>。</p>
<h2 id="整合測試">整合測試</h2><hr>
<p>單元測試目的是寫出 service 與 repository，我們要繼續寫整合測試，將 route、controller 與 view 補上。</p>
<p><strong>PostApplicationTest.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/9be08ef0d8afea91e51057c59948d7f8abc39e88" target="_blank" rel="external">整合測試 : 建立 PostApplicationTest</a></span></span></span><br><figure class="highlight php"><figcaption><span>tests/Unit/PostServiceTest.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostApplicationTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">DatabaseMigrations</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 顯示所有文章<span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="variable">$expected</span> = [</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">            [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            Post::create(<span class="variable">$value</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;visit(<span class="string">'/post'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'title'</span>]);</span><br><span class="line">            <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'description'</span>]);</span><br><span class="line">            <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'content'</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第 9 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** arrange */</span></span><br><span class="line"><span class="variable">$expected</span> = [</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title1'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc1'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content1'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title2'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc2'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content2'</span>],</span><br><span class="line">   [<span class="string">'title'</span> =&gt; <span class="string">'title3'</span>, <span class="string">'description'</span> =&gt; <span class="string">'desc3'</span>, <span class="string">'content'</span> =&gt; <span class="string">'content3'</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    Post::create(<span class="variable">$value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>由於單元測試是使用 SQLite in Memory 為資料庫，只要測試一結束，記憶體就會釋放，因此每次測試都要重新新增資料。</p>
<p>使用 <code>Collection-&gt;each()</code> 將 <code>$expected</code> 中的資料透過 <code>Post::create()</code> 新增。</p>
<p>22 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** act */</span></span><br><span class="line"><span class="variable">$this</span>-&gt;visit(<span class="string">'/post'</span>);</span><br></pre></td></tr></table></figure></p>
<p>實際測試 <code>/post</code> URI。<span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>此時 route 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 route。</span></span></span></p>
<p>27 行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** assert */</span></span><br><span class="line">collect(<span class="variable">$expected</span>)-&gt;each(<span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$value</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'title'</span>]);</span><br><span class="line">    <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'description'</span>]);</span><br><span class="line">    <span class="variable">$this</span>-&gt;see(<span class="variable">$value</span>[<span class="string">'content'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>期望在網頁上看到 <code>title</code>、<code>description</code> 與 <code>content</code> 等資料。 </p>
<p>使用 <code>Collection-&gt;each()</code> 將 <code>$expected</code> 中的資料透過 <code>$this-&gt;see()</code> 做 assertion。<span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>此時 view 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 view。</span></span></span>    </p>
<h2 id="Routes">Routes</h2><hr>
<p>實際跑測試，會得到第 1 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨找不到 <code>http://localhost/post</code>，因為 route 尚未建立，須趕快補上。</p>
<p><strong>routes.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/3d1077e9750cba89d6117b94779634c07e167293" target="_blank" rel="external">建立 routes</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/routes.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'/post'</span>, [</span><br><span class="line">    <span class="string">'as'</span>   =&gt; <span class="string">'post'</span>,</span><br><span class="line">    <span class="string">'uses'</span> =&gt; <span class="string">'PostController@index'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p>
<p>新增 route <code>/post</code>，並指定其 controller 為 <code>PostController@index</code>。<span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>此時 <code>PostController</code> 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>PostController</code>。</span></span></span>    </p>
<h2 id="PostController">PostController</h2><hr>
<p>實際跑測試，會得到第 2 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>PostController</code> 尚未建立，須趕快補上。</p>
<p><strong>PostController.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/af0121d61484ba6980a51ba6ee954071eb3bc85b" target="_blank" rel="external">建立 PostController</a></span></span></span><br><figure class="highlight php"><figcaption><span>app/Http/Controllers/PostController.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">PostService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Display a listing of the resource.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">'posts'</span>] = app(PostService::class)-&gt;displayAllPosts();</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'post.index'</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>app()</code> 建立 <code>PostService</code>，並呼叫其 <code>displayAllPosts()</code>。</p>
<p>回傳 <code>post.index</code> view。<span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>此時 <code>post.index</code> view 都還沒建立，TDD 會等待測試亮 <span class="label label-danger">紅燈</span> 時，才去新增 <code>post.index</code> view。</span></span></span>    </p>
<h2 id="Post-Index_Blade">Post.Index Blade</h2><hr>
<p>實際跑測試，會得到第 3 個 <span class="label label-danger">紅燈</span>，PHPUnit 抱怨 <code>post.index</code> view 尚未建立，須趕快補上。</p>
<p><strong>index.blade.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo/commit/d8ad575a285dcc0895a28e343ab38a30eb75e709" target="_blank" rel="external">建立 post.index view</a></span></span></span><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Posts<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">@foreach($posts as $post)</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&#123;&#123; $post-&gt;title &#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&#123;&#123; $post-&gt;description &#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h2</span>&gt;</span>&#123;&#123; $post-&gt;content &#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">hr</span>&gt;</span></span><br><span class="line">@endforeach</span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>簡單使用 <code>@foreach</code> 與 binding 將資料顯示。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace001.png" alt=""></p>
<p>得到第 1 個 <span class="label label-success">綠燈</span>，完成 <code>routes</code> 與 <code>PostController</code> 與 <code>post.index</code> view。</p>
<h2 id="重構_PostService">重構 PostService</h2><hr>
<p>到目前為止，已經 <span class="label label-success">綠燈</span> 達成需求，但發現將 <code>PostService</code> 放在 <code>app/Services</code> 下似乎不妥，想將 <code>PostServie</code> 重構放在 <code>app/Services/Post</code> 目錄下。</p>
<p>根據 <code>PSR-4</code>，PHP 的 namespace 必須與目錄相同，也就是說除了將 <code>PostService</code> 放到 <code>app/Services/Post</code> 目錄下外，以下程式碼必須修改 :</p>
<ul>
<li><code>PostService</code> 的 namespace 必須修改。</li>
<li>單元測試的 <code>PostServiceTest</code> 的 <code>use</code> 必須修改。</li>
<li>Controller 的 <code>PostController</code> 的 <code>use</code> 必須修改。</li>
</ul>
<p>本文只是很簡單的範例，已經要改 3 個地方，實務上會更複雜，要改的地方會更多，還可能沒改到或改錯。</p>
<p>這時候就要使用 PhpStorm 的重構了。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace002.png" alt=""></p>
<p>將滑鼠游標放在要重構的 <code>PostService</code> 的 class 名稱上，按熱鍵 &#8963; + T，選擇 <code>Move</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace003.png" alt=""></p>
<p>顯示 <code>Move Class</code> 對話框。</p>
<ul>
<li>在 <code>Move Class PostService to namespace</code> 填入新的 namespace : <code>App\Services\Post</code>，PhpStorm 會自動在 <code>Target destination directory</code> 加上 <code>Post</code>目錄。</li>
<li>將 <code>Search in comments and strings</code> 與  <code>Search for text occurrences</code> 都打勾。</li>
<li>按下 <code>Preview</code> 可以先看一下 PhpStorm 將做哪些重構，按 <code>Refactor</code> 則直接重構。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace004.png" alt=""></p>
<p>PhpStorm 預告將對 <code>PostController</code>、<code>PostServiceTest</code> 與 <code>PostService</code> 做重構，與我們的預期相同。</p>
<p>若發現 PhpStorm 失去水準判斷錯誤，可以將其選擇按右鍵將其 <code>Excluded</code> 或 <code>Remove</code> 掉。</p>
<p>最後按 <code>Do Refactor</code> 開始重構。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace005.png" alt=""></p>
<p>重構完趕快跑單元測試與整合測試，確認 PhpStorm 沒有改壞。</p>
<h2 id="重構_PostRepository">重構 PostRepository</h2><hr>
<p>前一個例子，是將 <code>PostService</code> 單一 class 重構其 namespace，實務上還有另外一種應用，是將一個目錄下所有 class 重構成另外一個 namespace。</p>
<p>目前想將 <code>app/Repositories</code> 下所有的 class 重構到 <code>app/Repositories/Post</code> 目錄下。</p>
<p>根據 <code>PSR-4</code>，PHP 的 namespace 必須與目錄相同，也就是說除了將 <code>PostRepository</code> 放到 <code>app/Repositories/Post</code> 目錄下外，以下程式碼必須修改 :</p>
<ul>
<li><code>PostRepository</code> 的 namespace 必須修改。</li>
<li>Service 的 <code>PostService</code> 的 <code>use</code> 必須修改。</li>
</ul>
<p>若目錄下有很多 class，要改的地方會更多，還可能沒改到或改錯。</p>
<p>這時候就要使用 PhpStorm 的重構了。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace006.png" alt=""></p>
<p>選擇要重構目錄下的其中一個檔案開啟，本例 <code>app/Repositories</code> 目錄下只有 <code>PostRepository</code>。</p>
<p>將滑鼠游標放在要重構的 <code>PostRepository</code> 的 namespace 名稱上，按熱鍵 &#8963; + T，選擇 <code>Move</code>。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace007.png" alt=""></p>
<p>顯示 <code>Move Namespace</code> 對話框。</p>
<ul>
<li>在 <code>New Namespace name</code> 填入新的 namespace : <code>App\Repositories\Post</code>，PhpStorm 會自動在 <code>Target destination directory</code> 加上 <code>Post</code>目錄。</li>
<li>將 <code>Search in comments and strings</code> 與  <code>Search for text occurrences</code> 都打勾。</li>
<li>按下 <code>Preview</code> 可以先看一下 PhpStorm 將做哪些重構，按 <code>Refactor</code> 則直接重構。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace008.png" alt=""></p>
<p>PhpStorm 預告將對 <code>PostRepository</code> 與 <code>PostService</code> 做重構，與我們的預期相同。</p>
<p>若發現 PhpStorm 失去水準判斷錯誤，可以將其選擇按右鍵將其 <code>Excluded</code> 或 <code>Remove</code> 掉。</p>
<p>最後按 <code>Do Refactor</code> 開始重構。</p>
<p><img src="/images/phpstorm/phpstorm-refactor-namespace/namespace009.png" alt=""></p>
<p>重構完趕快跑單元測試與整合測試，確認 PhpStorm 沒有改壞。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>重構單一 class，是將游標放在 class 名稱上。</li>
<li>重構一目錄下所有 class，是將游標放在 namespace 名稱上。</li>
<li>Laravel 5 大量使用 namespace 後，只要改 namespace 就是大家永遠的痛，透過 PhpStorm 的重構，與自己寫的單元測試與整合測試保護後，再也不用害怕改 namespace 了。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52RefactorNamespace_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 PhpStorm 自動幫我們重構 Namespace]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
      <category term="TDD" scheme="http://oomusou.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 PhpStorm 對 Laravel 除錯?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-xdebug/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-xdebug/</id>
    <published>2016-06-11T12:23:43.000Z</published>
    <updated>2016-06-12T02:45:15.000Z</updated>
    <content type="html"><![CDATA[<p>傳統 PHP 大都使用 <code>echo()</code>、<code>var_dump()</code> 或 <code>dd()</code> 除錯，此種方式必須破壞原本程式碼，而且所能觀察的變數有限，也無法明確得知程式執行的流程。PhpStorm 支援 Xdebug，允許我們設定中斷點，程式將停在中斷點設定之處，讓我們透過 Step Into、Step Over、Step Out 的方式除錯，非常方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.0<br>Laravel 5.2.37<br>MAMP PRO 3.5<br>PhpStorm 2016.1.2</p>
<h2 id="設定_Xdebug">設定 Xdebug</h2><hr>
<p>MAMP PRO 預設已經有安裝 Xdebug，只是在 <code>php.ini</code> 並沒有啟動，必須手動啟動後，再加上一些設定。</p>
<figure class="highlight php"><figcaption><span>/Applications/MAMP/bin/php/php7.0.0/conf/php.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">zend_extension=<span class="string">"/Applications/MAMP/bin/php/php7.0.0/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so"</span></span><br><span class="line">xdebug.remote_enable=<span class="number">1</span></span><br><span class="line">xdebug.remote_port=<span class="number">9000</span></span><br><span class="line">xdebug.profiler_enable=<span class="number">1</span></span><br><span class="line">xdebug.profiler_output_dir=<span class="string">"/Applications/MAMP/tmp"</span></span><br></pre></td></tr></table></figure>
<p>MAMP PRO 預設將 PHP 安裝在<code>/Applications/MAMP/bin/php/phpX.X.XX/conf/php.ini</code>，選擇版本加以修改<code>php.ini</code>。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>若不知道該改哪一個<code>php.ini</code>，可下<code>php --ini</code>指令，看看目前系統正在使用哪一個<code>php.ini</code>。</span></span></span></p>
<p>其中 <code>[xdebug]</code> 位於 <code>php.ini</code> 的最後一行，預設使用 <code>;</code> 註解，將 <code>;</code> 拿掉，並加上以上的 Xdebug 設定。</p>
<p>存檔後須重新啟動MAMP。</p>
<h2 id="設定_Hosts">設定 Hosts</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug007.png" alt=""></p>
<p>在 MAMP PRO 設定新 host。</p>
<ul>
<li><strong>PHP version</strong> : 7.0.0。</li>
<li><strong>Document root</strong> : <code>/Users/oomusou/Code/Demo/Laravel52Xdebug_demo/public</code>。</li>
</ul>
<p>存檔後須重新啟動MAMP。</p>
<h2 id="啟動_PHP_外掛">啟動 PHP 外掛</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug000.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Plugins</em></strong></p>
<ul>
<li>PhpStorm 預設已經安裝並啟動 PHP 外掛，確認此外掛已經啟動。</li>
</ul>
<h2 id="設定_Interpreter">設定 Interpreter</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug001.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP</em></strong></p>
<ul>
<li><strong>PHP language level</strong> : <code>7</code>。</li>
<li><strong>Interpreter</strong> : 按 <code>...</code> 設定PHP interpreter。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>PHP Interpreter 每個專案都要重新設定一遍。</span></span></span></li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug002.png" alt=""></p>
<p>選擇 <code>PHP 7.0.0</code> 的路徑 : <code>/Applications/MAMP/bin/php/php7.0.0/bin/php</code>。</p>
<p>若路徑正確，PhpStorm 會抓到 PHP 與 Xdebug 的版本。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug003.png" alt=""></p>
<p>從原本的 <code>&lt;no interpreter&gt;</code> 變成明確的 <code>PHP7 (7.0.0)</code>。</p>
<h2 id="產生_Bookmarklets">產生 Bookmarklets</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug004.png" alt=""></p>
<p><strong><em>PhpStorm -&gt; Preferences -&gt; Language &amp; Frameworks -&gt; PHP -&gt; Debug</em></strong></p>
<ul>
<li>按下 <code>Use debugger bookmarklets to initiate debugging form your favorite browser</code>，將會使用你預設的瀏覽器開啟 <code>https://www.jetbrains.com/phpstorm/marklets/</code>。</li>
</ul>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug005.png" alt=""></p>
<p>在左側的 Xdebug 部分，按下 <code>Generate</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug006.png" alt=""></p>
<p>將產生 <code>Start debugger</code>，<code>Stop Debugger</code> 與 <code>Debug this page</code>。</p>
<p>將這 3 個連結拖拉到上方的 Bookmarks Bar。</p>
<ul>
<li><strong>Start debugger</strong> : 啟動 Xdebug 除錯。</li>
<li><strong>Stop debugger</strong> : 停止 Xdebug 除錯。</li>
<li><strong>Debug this page</strong> : 啟動 Xdebug，並重新載入目前網頁。</li>
</ul>
<h2 id="設定中斷點">設定中斷點</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug008.png" alt=""></p>
<p>在 <code>app/Http/routes.php</code> 的 14 行的最左側點一下，設定中斷點。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>實務上你可以在任何你想要除錯的 PHP 程式碼中設定中斷點，本範例是以 Laravel 預設專案的 <code>routes.php</code> 為例。</span></span></span></p>
<h2 id="傾聽_Xdebug">傾聽 Xdebug</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug009.png" alt=""></p>
<p>按下上方的 <code>電話筒</code> 圖示，綠色表示開始傾聽 Xdebug，可在所設定的中斷點停止。</p>
<h2 id="啟動_Xdebug">啟動 Xdebug</h2><hr>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug010.png" alt=""></p>
<p>開啟瀏覽器，按下 <code>Start debugger</code>，在網址列輸入 <code>http://laravel52xdebug:8888</code>。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug011.png" alt=""></p>
<p>PhpStorm 會跳出 <code>Incoming Connection From Xdebug</code> 視窗，按 <code>Accept</code> 繼續。</p>
<p><img src="/images/phpstorm/phpstorm-xdebug/xdebug012.png" alt=""></p>
<p>程式執行將停在剛剛設定的中斷點。</p>
<p>下方會出現 Debugger 視窗，提供除錯的詳細資訊。</p>
<ul>
<li>左側綠色三角形為 <code>Resume Program</code>，表示將繼續執行，直到下一個中斷點停止。</li>
<li>左側紅色方形為 <code>Stop</code>，表示停止目前程式執行。</li>
<li>上方第一個圖示為 <code>Step Over</code>，表示將跳過目前函式。</li>
<li>上方第二個圖示為 <code>Step Into</code>，表示將執行目前函式內部的程式碼。</li>
<li>上方第三個圖示為 <code>Force Step Into</code>，表示將強制執行目前函式內部的程式碼。</li>
<li>上方第四個圖示為 <code>Step Out</code>，表示將跳出目前函式內部的程式碼。</li>
<li>上方第五個圖示為 <code>Run to Cursor</code>，表示將快速執行到目前游標處停止。</li>
<li><code>Variables</code> 為目前 scope 所有的變數值。</li>
<li><code>Watches</code> 可自行新增想觀察的變數。</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>使用這種方式之後，我再也沒用過 <code>echo()</code>、<code>var_dump()</code> 或 <code>dd()</code> 來除錯，只要在認為有問題的程式碼之處，設定中斷點，就可以觀察當時所有變數的值，並且觀察程式實際執行的流程。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[以中斷點方式替 Laravel 除錯]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="MAMP" scheme="http://oomusou.io/tags/MAMP/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="Xdebug" scheme="http://oomusou.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何設定 PhpStorm 的 Directories?]]></title>
    <link href="http://oomusou.io/phpstorm/phpstorm-directories/"/>
    <id>http://oomusou.io/phpstorm/phpstorm-directories/</id>
    <published>2016-06-10T12:23:43.000Z</published>
    <updated>2016-06-17T07:30:40.000Z</updated>
    <content type="html"><![CDATA[<p>PhpStorm 最強的三個功能為 : Refactoring、Debugging、與 Inspection，但由於 PHP 生態是眾多 framework，而每個 framework 的目錄架構也不太一樣，因此必須先在 PhpStorm 設定 directories，才能發揮 PhpStorm 的強悍功能，而不只是文字編輯器而已。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Laravel 5.2.36</p>
<h2 id="提示設定_Directories">提示設定 Directories</h2><hr>
<p><img src="/images/phpstorm/phpstorm-directories/dir000.png" alt=""></p>
<p>當使用 PhpStorm 開啟 Laravel 專案時，一開始會對專案做 indexing，之後就會出現 <code>Detect PSR-0 namespace roots</code> 的提示，要求你設定 Directories。</p>
<p>很多初學者因為不知道設定 Directories 的重要性，就直接將對話框關閉，這是非常可惜的，這將喪失很多 PhpStorm 重要的功能。</p>
<h2 id="手動設定_Directories">手動設定 Directories</h2><hr>
<p><img src="/images/phpstorm/phpstorm-directories/dir001.png" alt=""></p>
<p>按 <code>Settings | Directories</code> 手動設定 <code>Directories</code>。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  不建議使用 <strong>automatically</strong> 由 PhpStorm 自動設定 directories，這將導致 <strong>vendor</strong> 目錄被設定在 <strong>Excluded</strong> 下，導致 Laravel 與其他 package 的語法提示不正常。</div>
<p><img src="/images/phpstorm/phpstorm-directories/dir002.png" alt=""></p>
<p>進入設定 Directories 視窗，若第一次沒由 <code>Detect PSR-0 namespaces roots</code> 設定也沒關係，日後只要在此設定即可。</p>
<p><strong><em> PhpStorm -&gt; Preferences -&gt; Directories </em></strong></p>
<p>接下來要設定 <code>Tests</code>、<code>Sources</code>、<code>Excluded</code> 與 <code>Resource Root</code> 4 個目錄。</p>
<h2 id="Sources">Sources</h2><hr>
<p>設定 <code>PSR-0 namespace roots</code> 的主目錄，也就是 Laravel 的 <code>app</code> 目錄。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir003.png" alt=""></p>
<p>選擇 <code>app</code> 目錄，按上方的 <code>Sources</code>，會在右側出現 <code>Source Folders app</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir004.png" alt=""></p>
<p>按 <code>P</code> 設定該目錄的 property。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir005.png" alt=""></p>
<p>在 <code>Package prefix</code> 輸入 <code>App</code>，因為 <code>app</code> 目錄對應的正是 Laravel 的 namespace <code>App</code>。</p>
<p>這是所有 directories 設定中最重要的一個，在 Laravel 5 之後，全面使用 namespace，管理 namespace 成為很多人的惡夢，但只要設定了 <code>Sources</code> 之後，將來 PhpStorm 會幫我們管理 namespace。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir006.png" alt=""></p>
<p>設定了 <code>Sources</code> 之後，在 project windows 的 <code>app</code> 會顯示藍色。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir007.png" alt=""></p>
<p>假如我們想在自己建立的 <code>Services</code> 目錄下，建立其他 class 寫商業邏輯。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>關於 Service 模式，詳細請參考<a href="/laravel/laravel-service/">如何使用 Service 模式?</a></span></span></span></p>
<p>選擇 <code>Services</code> 目錄，按熱鍵 &#8984; + N，顯示 <code>New</code> 視窗，選擇 <code>PHP Class</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir008.png" alt=""></p>
<p>自行輸入 class 名稱，值得注意的是，PhpStorm 已經自動幫我們準備好 namespace，不必我們操心。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir009.png" alt=""></p>
<p>程式碼也幫我們管理好 namespace 了。<span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/81257eedf3819dd685911dd90f04ce7207b3ea34" target="_blank" rel="external">建立 OrderService</a></span></span></span></p>
<p><img src="/images/phpstorm/phpstorm-directories/dir010.png" alt=""></p>
<p>若想要注入其他物件，可在 constructor 的參數以 type hint 方式注入。<span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>關於依賴注入，詳細請參考<a href="/tdd/tdd-di/">深入探討依賴注入</a></span></span></span></p>
<p>如我們想注入 <code>User</code>，但 PhpStorm 已經反白警告找不到 <code>User</code> class。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir011.png" alt=""></p>
<p>選擇反白的 <code>User</code>，按熱鍵 &#8997; + &#8617;，選擇 <code>Import class</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir012.png" alt=""></p>
<p>若整個專案只有一個同名的 class，PhpStorm 會自動 import，否則會出現視窗讓你決定要 import 哪一個 class。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir013.png" alt=""></p>
<p>PhpStorm 自動幫我們 use 了 <code>App\User</code>。<span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/8a4d3267723e5b9d3be63767503d1f399a85c6a9" target="_blank" rel="external">注入 User</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  無論是建立 namespace，或者引用 namespace，完全由 PhpStorm 自動幫我們處理，不用擔心 namespace 大小寫寫錯，也不用擔心 namespace 的完整路徑為何。</div>
<h2 id="Tests">Tests</h2><hr>
<p>設定測試程式的主目錄，也就是 Laravel 的 <code>tests</code> 目錄。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir014.png" alt=""></p>
<p>選擇 <code>tests</code> 目錄，按上方的 <code>Tests</code>，會在右側出現 <code>Test Source Folders tests</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir015.png" alt=""></p>
<p>設定了 <code>Tests</code> 之後，在 project windows 的 <code>tests</code> 會顯示綠色。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir016.png" alt=""></p>
<p>可在 project windows 選擇 <code>Tests</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir017.png" alt=""></p>
<p>將只顯示所有測試程式，方便測試時使用。</p>
<h2 id="Resource_Root">Resource Root</h2><hr>
<p>設定前端資源的主目錄，也就是 Laravel 的 <code>public</code> 目錄。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir018.png" alt=""></p>
<p>選擇 <code>public</code> 目錄，按上方的 <code>Resource Root</code>，會在右側出現 <code>Resource roots public</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir019.png" alt=""></p>
<p>設定了 <code>Resource roots</code> 之後，在 project windows 的 <code>public</code> 會顯示紫色。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir020.png" alt=""></p>
<p>在 <code>resources/views/welcome.blade.php</code> 加上 Vue.js 後，在 <code>js/app.js</code> 出現反白。<span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/b5e0b68d2677e96e77117eb1d9f17ea316af7d1f" target="_blank" rel="external">修改 welcome.blade.php</a></span></span></span></p>
<p>PhpStorm 抱怨找不到 <code>js/app.js</code>，的確我們在 <code>public</code> 目錄下還沒有建立 <code>js/app.js</code>。</p>
<p><img src="/images/phpstorm/phpstorm-directories/dir021.png" alt=""></p>
<p>在 <code>public</code> 目錄下新增 <code>js/app.js</code> 之後，PhpStorm 就不在警告了。<span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel52Directories_demo/commit/4418c29aa7d0913388911dee8ad5411414adbb25" target="_blank" rel="external">新增 js/app.js</a></span></span></span></p>
<div class="alert alert-info"><i class="fa fa-info"></i>  <strong>Resource roots</strong> 不是設定在 Laravel 的 <strong>resources</strong> 目錄，而是設定在 <strong>public</strong> 目錄。藉由此設定，PhpStorm 可以幫你檢查 Blade 或 HTML 的 JavaScript 與 CSS 路徑是否合法。</div>
<h2 id="Excluded">Excluded</h2><hr>
<p>不由 PhpStorm 管理，或不想由 PhpStorm 建立 index 的目錄。</p>
<p>實務上若你在專案目錄下，會自己建立一個目錄放 Spec 或相關文件，如 pdf, docx, xlsx 格式，這個目錄交給 PhpStorm 管理並沒有任何意義，只會增加建立 index 時間而已，就可以將該目錄設定為 <code>Excluded</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>這些都是很重要的設定，可惜 PhpStorm 文件並沒有仔細介紹，以上都是實際使用 PhpStorm 一段時間之後摸索出來的心得，將這些目錄設定之後，才能發揮 PhpStorm 強悍功能。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel52Directories_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
]]></content>
    <summary type="html">
    <![CDATA[正確設定 Directories 才能發揮 PhpStorm 的威力]]>
    
    </summary>
    
      <category term="Laravel" scheme="http://oomusou.io/tags/Laravel/"/>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
  </entry>
  
</feed>
